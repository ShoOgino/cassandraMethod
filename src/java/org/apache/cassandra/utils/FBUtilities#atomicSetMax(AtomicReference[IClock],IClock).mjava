    /** 
     * Sets an atomic clock reference to the maximum of its current value and
     * a new value.
     *
     * The function is not synchronized and does not guarantee that the resulting
     * reference will hold either the old or new value, but it does guarantee
     * that it will hold a value, v, such that: v = max(oldValue, newValue, v).
     *
     * @param atomic the atomic reference to set
     * @param newClock the new provided value
     */
    public static void atomicSetMax(AtomicReference<IClock> atomic, IClock newClock)
    {
        while (true)
        {
            IClock oldClock = atomic.get();
            ClockRelationship rel = oldClock.compare(newClock);
            if (rel == ClockRelationship.DISJOINT)
            {
                newClock = oldClock.getSuperset(Arrays.asList(newClock));
            }
            if (rel == ClockRelationship.GREATER_THAN || rel == ClockRelationship.EQUAL 
                || atomic.compareAndSet(oldClock, newClock))
                break;
        }
    }

