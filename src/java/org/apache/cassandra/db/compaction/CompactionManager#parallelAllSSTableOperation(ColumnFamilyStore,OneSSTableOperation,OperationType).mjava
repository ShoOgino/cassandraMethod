    @SuppressWarnings("resource")
    private AllSSTableOpStatus parallelAllSSTableOperation(final ColumnFamilyStore cfs, final OneSSTableOperation operation, OperationType operationType) throws ExecutionException, InterruptedException
    {
        try (LifecycleTransaction compacting = cfs.markAllCompacting(operationType);)
        {
            if (compacting == null)
            {
                logger.info("Aborting operation on {}.{} after failing to interrupt other compaction operations", cfs.keyspace.getName(), cfs.name);
                return AllSSTableOpStatus.ABORTED;
            }
            if (compacting.originals().isEmpty())
            {
                logger.info("No sstables for {}.{}", cfs.keyspace.getName(), cfs.name);
                return AllSSTableOpStatus.SUCCESSFUL;
            }

            Iterable<SSTableReader> sstables = operation.filterSSTables(compacting.originals());
            List<Pair<LifecycleTransaction,Future<Object>>> futures = new ArrayList<>();


            for (final SSTableReader sstable : sstables)
            {
                if (executor.isShutdown())
                {
                    logger.info("Executor has shut down, not submitting task");
                    return AllSSTableOpStatus.ABORTED;
                }

                final LifecycleTransaction txn = compacting.split(singleton(sstable));
                futures.add(Pair.create(txn,executor.submit(new Callable<Object>()
                {
                    @Override
                    public Object call() throws Exception
                    {
                        operation.execute(txn);
                        return this;
                    }
                })));
            }

            assert compacting.originals().isEmpty();


            //Collect all exceptions
            Exception exception = null;

            for (Pair<LifecycleTransaction, Future<Object>> f : futures)
            {
                try
                {
                    f.right.get();
                }
                catch (InterruptedException | ExecutionException e)
                {
                    if (exception == null)
                        exception = new Exception();

                    exception.addSuppressed(e);
                }
                finally
                {
                    f.left.close();
                }
            }

            if (exception != null)
                Throwables.propagate(exception);

            return AllSSTableOpStatus.SUCCESSFUL;
        }
    }

