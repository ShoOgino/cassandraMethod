    /**
     * Register a tree from the given endpoint to be compared to neighbor trees
     * in AE_SERVICE_STAGE when they become available.
     *
     * @param cf The column family of the tree.
     * @param endpoint The endpoint which owns the given tree.
     * @param tree The tree for the endpoint.
     */
    void register(CFTuple cf, InetAddress endpoint, MerkleTree tree)
    {
        InetAddress LOCAL = FBUtilities.getLocalAddress();

        // store the tree, possibly replacing an older copy
        Cachetable<CFTuple, MerkleTree> etrees = cacheForEndpoint(endpoint);

        List<Differencer> differencers = new ArrayList<Differencer>();
        if (LOCAL.equals(endpoint))
        {
            // we stored a local tree: queue differencing for all remote trees
            for (Map.Entry<InetAddress, Cachetable<CFTuple, MerkleTree>> entry : trees.entrySet())
            {
                if (LOCAL.equals(entry.getKey()))
                    // don't compare to ourself
                    continue;
                MerkleTree remotetree = entry.getValue().remove(cf);
                if (remotetree == null)
                    // no tree stored for this endpoint at the moment
                    continue;

                differencers.add(new Differencer(cf, LOCAL, entry.getKey(), tree, remotetree));
            }
            etrees.put(cf, tree);
            logger.debug("Cached local tree for " + cf);
        }
        else
        {
            // we stored a remote tree: queue differencing for local tree
            MerkleTree localtree = cacheForEndpoint(LOCAL).get(cf);
            if (localtree != null)
                // compare immediately
                differencers.add(new Differencer(cf, LOCAL, endpoint, localtree, tree));
            else
            {
                // cache for later comparison
                etrees.put(cf, tree);
                logger.debug("Cached remote tree from " + endpoint + " for " + cf);
            }
        }

        for (Differencer differencer : differencers)
        {
            logger.debug("Queueing comparison " + differencer);
            StageManager.getStage(AE_SERVICE_STAGE).execute(differencer);
        }
    }

