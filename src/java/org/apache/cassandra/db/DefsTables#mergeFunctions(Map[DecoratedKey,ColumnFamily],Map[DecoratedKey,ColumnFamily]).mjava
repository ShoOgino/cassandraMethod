    private static void mergeFunctions(Map<DecoratedKey, ColumnFamily> old, Map<DecoratedKey, ColumnFamily> updated)
    {
        MapDifference<DecoratedKey, ColumnFamily> diff = Maps.difference(old, updated);

        // New namespace with functions
        for (Map.Entry<DecoratedKey, ColumnFamily> entry : diff.entriesOnlyOnRight().entrySet())
        {
            ColumnFamily cfFunctions = entry.getValue();
            if (!cfFunctions.hasColumns())
                continue;

            for (UDFunction udf : UDFunction.fromSchema(new Row(entry.getKey(), cfFunctions)).values())
                addFunction(udf);
        }

        for (Map.Entry<DecoratedKey, MapDifference.ValueDifference<ColumnFamily>> modifiedEntry : diff.entriesDiffering().entrySet())
        {
            DecoratedKey namespace = modifiedEntry.getKey();
            ColumnFamily prevCFFunctions = modifiedEntry.getValue().leftValue(); // state before external modification
            ColumnFamily newCFFunctions = modifiedEntry.getValue().rightValue(); // updated state

            if (!prevCFFunctions.hasColumns()) // whole namespace was deleted and now it's re-created
            {
                for (UDFunction udf : UDFunction.fromSchema(new Row(namespace, newCFFunctions)).values())
                    addFunction(udf);
            }
            else if (!newCFFunctions.hasColumns()) // whole namespace is deleted
            {
                for (UDFunction udf : UDFunction.fromSchema(new Row(namespace, prevCFFunctions)).values())
                    dropFunction(udf);
            }
            else // has modifications in the functions, need to perform nested diff to determine what was really changed
            {
                MapDifference<ByteBuffer, UDFunction> functionsDiff = Maps.difference(UDFunction.fromSchema(new Row(namespace, prevCFFunctions)),
                                                                                      UDFunction.fromSchema(new Row(namespace, newCFFunctions)));

                for (UDFunction udf : functionsDiff.entriesOnlyOnRight().values())
                    addFunction(udf);

                for (UDFunction udf : functionsDiff.entriesOnlyOnLeft().values())
                    dropFunction(udf);

                for (MapDifference.ValueDifference<UDFunction> tdiff : functionsDiff.entriesDiffering().values())
                    updateFunction(tdiff.rightValue()); // use the most recent value
            }
        }
    }

