    /**
     * Print a list of pending token relocations for all nodes.
     *
     * @throws ShuffleError
     */
    public void ls() throws ShuffleError
    {
        Map<String, List<CqlRow>> queuedRelocations = listRelocations();
        boolean justOnce = false;
        IPartitioner<?> partitioner = getPartitioner();

        for (String host : queuedRelocations.keySet())
        {
            for (CqlRow row : queuedRelocations.get(host))
            {
                assert row.getColumns().size() == 2;

                if (!justOnce)
                {
                    writeln("%-42s %-15s %s", "Token", "Endpoint", "Requested at");
                    writeln("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                    justOnce = true;
                }

                ByteBuffer tokenBytes = ByteBuffer.wrap(row.getColumns().get(0).getValue());
                ByteBuffer requestedAt = ByteBuffer.wrap(row.getColumns().get(1).getValue());
                Date time = TimestampSerializer.instance.deserialize(requestedAt);
                Token<?> token = partitioner.getTokenFactory().fromByteArray(tokenBytes);

                writeln("%-42s %-15s %s", token.toString(), host, time.toString());
            }
        }
    }

