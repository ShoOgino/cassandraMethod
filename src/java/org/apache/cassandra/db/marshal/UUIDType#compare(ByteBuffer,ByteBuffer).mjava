    public int compare(ByteBuffer b1, ByteBuffer b2)
    {

        // Compare for length

        if ((b1 == null) || (b1.remaining() < 16))
        {
            return ((b2 == null) || (b2.remaining() < 16)) ? 0 : -1;
        }
        if ((b2 == null) || (b2.remaining() < 16))
        {
            return 1;
        }

        int s1 = b1.arrayOffset() + b1.position();
        byte[] o1 = b1.array();

        int s2 = b2.arrayOffset() + b2.position();
        byte[] o2 = b2.array();

        if (o1.length == s1)
        {
            return o2.length == s2 ? 0 : -1;
        }
        if (o2.length == s2)
        {
            return 1;
        }

        // Compare versions

        int v1 = (o1[s1 + 6] >> 4) & 0x0f;
        int v2 = (o2[s2 + 6] >> 4) & 0x0f;

        if (v1 != v2)
        {
            return v1 - v2;
        }

        // Compare timestamps for version 1

        if (v1 == 1)
        {
            // if both time-based, compare as timestamps
            int c = compareTimestampBytes(s1, o1, s2, o2);
            if (c != 0)
            {
                return c;
            }
        }

        // Compare the two byte arrays starting from the first
        // byte in the sequence until an inequality is
        // found. This should provide equivalent results
        // to the comparison performed by the RFC 4122
        // Appendix A - Sample Implementation.
        // Note: java.util.UUID.compareTo is not a lexical
        // comparison

        for (int i = 0; i < 16; i++)
        {
            int c = ((o1[s1 + i]) & 0xFF) - ((o2[s2 + i]) & 0xFF);
            if (c != 0)
            {
                return c;
            }
        }

        return 0;
    }

