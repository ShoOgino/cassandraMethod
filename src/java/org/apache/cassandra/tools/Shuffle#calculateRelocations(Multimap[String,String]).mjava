    /**
     * Given a Multimap of endpoint to tokens, return a new randomized mapping.
     *
     * @param endpointMap current mapping of endpoint to tokens
     * @return a new mapping of endpoint to tokens
     */
    private Multimap<String, String> calculateRelocations(Multimap<String, String> endpointMap)
    {
        Multimap<String, String> relocations = HashMultimap.create();
        Set<String> endpoints = new HashSet<>(endpointMap.keySet());
        Map<String, Integer> endpointToNumTokens = new HashMap<>(endpoints.size());
        Map<String, Iterator<String>> iterMap = new HashMap<>(endpoints.size());

        // Create maps of endpoint to token iterators, and endpoint to number of tokens.
        for (String endpoint : endpoints)
        {
            try
            {
                endpointToNumTokens.put(endpoint, ssProxy.getTokens(endpoint).size());
            }
            catch (UnknownHostException e)
            {
                throw new RuntimeException("What that...?", e);
            }

            iterMap.put(endpoint, endpointMap.get(endpoint).iterator());
        }

        int epsToComplete = endpoints.size();
        Set<String> endpointsCompleted = new HashSet<>();

        while (true)
        {
            endpoints.removeAll(endpointsCompleted);

            for (String endpoint : endpoints)
            {
                boolean choiceMade = false;

                if (!iterMap.get(endpoint).hasNext())
                {
                    endpointsCompleted.add(endpoint);
                    continue;
                }

                String token = iterMap.get(endpoint).next();

                List<String> subSet = new ArrayList<>(endpoints);
                subSet.remove(endpoint);
                Collections.shuffle(subSet, rand);

                for (String choice : subSet)
                {
                    if (relocations.get(choice).size() < endpointToNumTokens.get(choice))
                    {
                        relocations.put(choice, token);
                        choiceMade = true;
                        break;
                    }
                }

                if (!choiceMade)
                    relocations.put(endpoint, token);
            }

            // We're done when we've exhausted all of the token iterators
            if (endpointsCompleted.size() == epsToComplete)
                break;
        }

        return relocations;
    }

