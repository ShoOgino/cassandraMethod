    public void run(final ThriftClient client) throws IOException
    {
        SliceRange sliceRange = new SliceRange();
        // start/finish
        sliceRange.setStart(new byte[] {}).setFinish(new byte[] {});
        // reversed/count
        sliceRange.setReversed(false).setCount(state.settings.columns.maxColumnsPerKey);
        // initialize SlicePredicate with existing SliceRange
        final SlicePredicate predicate = new SlicePredicate().setSlice_range(sliceRange);

        final ByteBuffer key = getKey();
        for (final ColumnParent parent : state.columnParents)
        {

            timeWithRetry(new RunOp()
            {
                @Override
                public boolean run() throws Exception
                {
                    return client.get_slice(key, parent, predicate, state.settings.command.consistencyLevel).size() != 0;
                }

                @Override
                public String key()
                {
                    return new String(key.array());
                }

                @Override
                public int keyCount()
                {
                    return 1;
                }
            });
        }
    }

