    @Test
    public void testDiff()
    {
        Allocator allocator = HeapAllocator.instance;
        ContextState left;
        ContextState right;

        CounterCell leftCol;
        CounterCell rightCol;

        // timestamp
        leftCol = new CounterCell(Util.cellname("x"), 0, 1L);
        rightCol = new CounterCell(Util.cellname("x"), 0, 2L);

        Assert.assertEquals(rightCol, leftCol.diff(rightCol));
        Assert.assertNull(rightCol.diff(leftCol));

        // timestampOfLastDelete
        leftCol = new CounterCell(Util.cellname("x"), 0, 1L, 1L);
        rightCol = new CounterCell(Util.cellname("x"), 0, 1L, 2L);

        Assert.assertEquals(rightCol, leftCol.diff(rightCol));
        Assert.assertNull(rightCol.diff(leftCol));

        // equality: equal nodes, all counts same
        left = ContextState.allocate(3, 0, allocator);
        left.writeElement(CounterId.fromInt(3), 3L, 0L);
        left.writeElement(CounterId.fromInt(6), 2L, 0L);
        left.writeElement(CounterId.fromInt(9), 1L, 0L);
        right = new ContextState(ByteBufferUtil.clone(left.context), 2);

        leftCol  = new CounterCell(Util.cellname("x"), left.context,  1L);
        rightCol = new CounterCell(Util.cellname("x"), right.context, 1L);
        Assert.assertNull(leftCol.diff(rightCol));

        // greater than: left has superset of nodes (counts equal)
        left = ContextState.allocate(4, 0, allocator);
        left.writeElement(CounterId.fromInt(3), 3L, 0L);
        left.writeElement(CounterId.fromInt(6), 2L, 0L);
        left.writeElement(CounterId.fromInt(9), 1L, 0L);
        left.writeElement(CounterId.fromInt(12), 0L, 0L);

        right = ContextState.allocate(3, 0, allocator);
        right.writeElement(CounterId.fromInt(3), 3L, 0L);
        right.writeElement(CounterId.fromInt(6), 2L, 0L);
        right.writeElement(CounterId.fromInt(9), 1L, 0L);

        leftCol  = new CounterCell(Util.cellname("x"), left.context,  1L);
        rightCol = new CounterCell(Util.cellname("x"), right.context, 1L);
        Assert.assertNull(leftCol.diff(rightCol));

        // less than: right has subset of nodes (counts equal)
        Assert.assertEquals(leftCol, rightCol.diff(leftCol));

        // disjoint: right and left have disjoint node sets
        left = ContextState.allocate(3, 0, allocator);
        left.writeElement(CounterId.fromInt(3), 1L, 0L);
        left.writeElement(CounterId.fromInt(4), 1L, 0L);
        left.writeElement(CounterId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0, allocator);
        right.writeElement(CounterId.fromInt(3), 1L, 0L);
        right.writeElement(CounterId.fromInt(6), 1L, 0L);
        right.writeElement(CounterId.fromInt(9), 1L, 0L);

        leftCol  = new CounterCell(Util.cellname("x"), left.context,  1L);
        rightCol = new CounterCell(Util.cellname("x"), right.context, 1L);
        Assert.assertEquals(rightCol, leftCol.diff(rightCol));
        Assert.assertEquals(leftCol, rightCol.diff(leftCol));
    }

