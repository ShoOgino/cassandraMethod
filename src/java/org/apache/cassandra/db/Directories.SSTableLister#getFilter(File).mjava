        private FileFilter getFilter(File location)
        {
           final Set<File> temporaryFiles = skipTemporary || onlyTemporary
                                            ? LifecycleTransaction.getTemporaryFiles(metadata, location)
                                            : Collections.<File>emptySet();

            return new FileFilter()
            {
                // This function always return false since accepts adds to the components map
                public boolean accept(File file)
                {
                    if (file.isDirectory())
                        return false;

                    Pair<Descriptor, Component> pair = SSTable.tryComponentFromFilename(file.getParentFile(), file.getName());
                    if (pair == null)
                        return false;

                    // we are only interested in the SSTable files that belong to the specific ColumnFamily
                    if (!pair.left.ksname.equals(metadata.ksName) || !pair.left.cfname.equals(metadata.cfName))
                        return false;

                    if (skipTemporary && temporaryFiles.contains(file))
                        return false;

                    if (onlyTemporary && !temporaryFiles.contains(file))
                        return false;

                    Set<Component> previous = components.get(pair.left);
                    if (previous == null)
                    {
                        previous = new HashSet<>();
                        components.put(pair.left, previous);
                    }
                    previous.add(pair.right);
                    nbFiles++;
                    return false;
                }
            };
        }

