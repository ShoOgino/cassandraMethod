    public static Integer dateStringToDays(String source) throws MarshalException
    {
        // Raw day value in unsigned int form, epoch @ 2^31
        if (rawPattern.matcher(source).matches())
        {
            try
            {
                Long result = Long.parseLong(source);

                if (result < 0 || result > maxSupportedDays)
                    throw new NumberFormatException("Input out of bounds: " + source);

                // Shift > epoch days into negative portion of Integer result for byte order comparability
                if (result >= Integer.MAX_VALUE)
                    result -= byteOrderShift;

                return result.intValue();
            }
            catch (NumberFormatException e)
            {
                throw new MarshalException(String.format("Unable to make unsigned int (for date) from: '%s'", source), e);
            }
        }

        // Attempt to parse as date string
        try
        {
            DateTime parsed = formatter.parseDateTime(source);
            long millis = parsed.getMillis();
            if (millis < minSupportedDateMillis)
                throw new MarshalException(String.format("Input date %s is less than min supported date %s", source, new LocalDate(minSupportedDateMillis).toString()));
            if (millis > maxSupportedDateMillis)
                throw new MarshalException(String.format("Input date %s is greater than max supported date %s", source, new LocalDate(maxSupportedDateMillis).toString()));

            Integer result = (int)TimeUnit.MILLISECONDS.toDays(millis);
            result -= Integer.MIN_VALUE;
            return result;
        }
        catch (IllegalArgumentException e1)
        {
            throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1);
        }
    }

