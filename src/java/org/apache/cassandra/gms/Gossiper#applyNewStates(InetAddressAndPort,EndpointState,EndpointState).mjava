    private void applyNewStates(InetAddressAndPort addr, EndpointState localState, EndpointState remoteState)
    {
        // don't assert here, since if the node restarts the version will go back to zero
        int oldVersion = localState.getHeartBeatState().getHeartBeatVersion();

        localState.setHeartBeatState(remoteState.getHeartBeatState());
        if (logger.isTraceEnabled())
            logger.trace("Updating heartbeat state version to {} from {} for {} ...", localState.getHeartBeatState().getHeartBeatVersion(), oldVersion, addr);

        Set<Entry<ApplicationState, VersionedValue>> remoteStates = remoteState.states();
        assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();
        localState.addApplicationStates(remoteStates);

        //Filter out pre-4.0 versions of data for more complete 4.0 versions
        Set<Entry<ApplicationState, VersionedValue>> filtered = remoteStates.stream().filter(entry -> {
           switch (entry.getKey())
           {
               case INTERNAL_IP:
                    return remoteState.getApplicationState(ApplicationState.INTERNAL_ADDRESS_AND_PORT) == null;
               case STATUS:
                   return remoteState.getApplicationState(ApplicationState.STATUS_WITH_PORT) == null;
               case RPC_ADDRESS:
                   return remoteState.getApplicationState(ApplicationState.NATIVE_ADDRESS_AND_PORT) == null;
               default:
                   return true;
           }
        }).collect(Collectors.toSet());

        for (Entry<ApplicationState, VersionedValue> remoteEntry : filtered)
            doOnChangeNotifications(addr, remoteEntry.getKey(), remoteEntry.getValue());
    }

