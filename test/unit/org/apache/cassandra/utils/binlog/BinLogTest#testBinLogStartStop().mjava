    /**
     * Check that we can start and stop the bin log and that it releases resources held by any subsequent appended
     * records
     */
    @Test
    public void testBinLogStartStop() throws Exception
    {
        AtomicInteger releaseCount = new AtomicInteger();
        CountDownLatch ready = new CountDownLatch(2);
        Supplier<BinLog.ReleaseableWriteMarshallable> recordSupplier =
        () -> new BinLog.ReleaseableWriteMarshallable()
        {
            public void release()
            {
                releaseCount.incrementAndGet();
            }

            protected long version()
            {
                return 0;
            }

            protected String type()
            {
                return "test";
            }

            public void writeMarshallablePayload(WireOut wire)
            {
                ready.countDown();
            }
        };
        binLog.put(recordSupplier.get());
        binLog.put(recordSupplier.get());
        ready.await(1, TimeUnit.MINUTES);
        Util.spinAssertEquals("Both records should be released", 2, releaseCount::get, 10, TimeUnit.SECONDS);
        Thread t = new Thread(() -> {
            try
            {
                binLog.stop();
            }
            catch (InterruptedException e)
            {
                throw new AssertionError(e);
            }
        });
        t.start();
        t.join(60 * 1000);
        assertEquals("BinLog should not take more than 1 minute to stop", t.getState(), Thread.State.TERMINATED);

        Util.spinAssertEquals(2, releaseCount::get, 60);
        Util.spinAssertEquals(Thread.State.TERMINATED, binLog.binLogThread::getState, 60);
     }

