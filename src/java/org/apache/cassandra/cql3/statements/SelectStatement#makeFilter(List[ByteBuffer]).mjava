    private IFilter makeFilter(List<ByteBuffer> variables)
    throws InvalidRequestException
    {
        if (isColumnRange())
        {
            // For sparse, we used to ask for 'defined columns' * 'asked limit' to account for the grouping of columns.
            // Since that doesn't work for maps/sets/lists, we use the compositesToGroup option of SliceQueryFilter.
            // But we must preserver backward compatibility too.
            int multiplier = cfDef.isCompact ? 1 : cfDef.metadata.size();
            int toGroup = cfDef.isCompact ? -1 : cfDef.columns.size();
            ColumnSlice slice = new ColumnSlice(getRequestedBound(isReversed ? Bound.END : Bound.START, variables),
                                                getRequestedBound(isReversed ? Bound.START : Bound.END, variables));
            SliceQueryFilter filter = new SliceQueryFilter(new ColumnSlice[]{slice},
                                                           isReversed,
                                                           getLimit(),
                                                           toGroup,
                                                           multiplier);
            QueryProcessor.validateSliceFilter(cfDef.cfm, filter);
            return filter;
        }
        else
        {
            SortedSet<ByteBuffer> columnNames = getRequestedColumns(variables);
            QueryProcessor.validateColumnNames(columnNames);
            return new NamesQueryFilter(columnNames);
        }
    }

