    public IndexSummary build(IPartitioner partitioner)
    {
        assert keys.size() > 0;
        assert keys.size() == positions.size();

        // first we write out the position in the *summary* for each key in the summary,
        // then we write out (key, actual index position) pairs
        Memory memory = Memory.allocate(offheapSize + (keys.size() * 4));
        int idxPosition = 0;
        int keyPosition = keys.size() * 4;
        for (int i = 0; i < keys.size(); i++)
        {
            // write the position of the actual entry in the index summary (4 bytes)
            memory.setInt(idxPosition, keyPosition);
            idxPosition += TypeSizes.NATIVE.sizeof(keyPosition);

            // write the key
            byte[] keyBytes = keys.get(i);
            memory.setBytes(keyPosition, keyBytes, 0, keyBytes.length);
            keyPosition += keyBytes.length;

            // write the position in the actual index file
            long actualIndexPosition = positions.get(i);
            memory.setLong(keyPosition, actualIndexPosition);
            keyPosition += TypeSizes.NATIVE.sizeof(actualIndexPosition);
        }
        int sizeAtFullSampling = (int) Math.ceil(keysWritten / (double) indexInterval);
        return new IndexSummary(partitioner, memory, keys.size(), sizeAtFullSampling, indexInterval, samplingLevel);
    }

