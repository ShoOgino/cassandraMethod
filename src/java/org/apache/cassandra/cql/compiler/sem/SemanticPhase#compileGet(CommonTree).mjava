    // Compile a GET statement
    private static Plan compileGet(CommonTree ast) throws SemanticException
    {
        int childCount = ast.getChildCount();
        assert(childCount == 1);

        CommonTree columnFamilySpec = (CommonTree)ast.getChild(0);
        assert(columnFamilySpec.getType() == CqlParser.A_COLUMN_ACCESS);

        CFMetaData cfMetaData = getColumnFamilyInfo(columnFamilySpec);
        ConstantOperand rowKey = new ConstantOperand(getRowKey(columnFamilySpec));
        int dimensionCnt = numColumnDimensions(columnFamilySpec);

        RowSourceDef rwsDef;
        if ("Super".equals(cfMetaData.columnType))
        {
            if (dimensionCnt > 2)
            {
                // We don't expect this case to arise, since Cql.g grammar disallows this.
                // therefore, raise this case as an "internal error".
                throw new SemanticException(CompilerErrorMsg.INTERNAL_ERROR.getMsg(columnFamilySpec));
            }

            if (dimensionCnt == 2)
            {
                // Case: table.super_cf[<rowKey>][<superColumnKey>][<columnKey>]
                ConstantOperand superColumnKey = new ConstantOperand(getColumn(columnFamilySpec, 0));                
                ConstantOperand columnKey = new ConstantOperand(getColumn(columnFamilySpec, 1));
                rwsDef = new UniqueKeyQueryRSD(cfMetaData, rowKey, superColumnKey, columnKey);
            }
            else if (dimensionCnt == 1)
            {
                // Case: table.super_cf[<rowKey>][<superColumnKey>]
                ConstantOperand superColumnKey = new ConstantOperand(getColumn(columnFamilySpec, 0));                
                rwsDef = new ColumnRangeQueryRSD(cfMetaData, rowKey, superColumnKey, -1, Integer.MAX_VALUE);
            }
            else
            {
                // Case: table.super_cf[<rowKey>]             
                rwsDef = new SuperColumnRangeQueryRSD(cfMetaData, rowKey, -1, Integer.MAX_VALUE);
            }
        }
        else  // Standard Column Family
        {
            if (dimensionCnt == 1)
            {
                // Case: table.standard_cf[<rowKey>][<columnKey>]
                ConstantOperand columnKey = new ConstantOperand(getColumn(columnFamilySpec, 0));
                rwsDef = new UniqueKeyQueryRSD(cfMetaData, rowKey, columnKey);
            }
            else
            {
                // Case: table.standard_cf[<rowKey>]
                logger_.assertLog((dimensionCnt == 0), "invalid dimensionCnt: " + dimensionCnt);
                rwsDef = new ColumnRangeQueryRSD(cfMetaData, rowKey, -1, Integer.MAX_VALUE);
            }
        }
        return new QueryPlan(rwsDef);
    }

