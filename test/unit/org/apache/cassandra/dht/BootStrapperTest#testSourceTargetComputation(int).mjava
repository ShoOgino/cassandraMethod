    private void testSourceTargetComputation(int numOldNodes) throws UnknownHostException
    {
        generateFakeEndpoints(numOldNodes);
        
        Token myToken = StorageService.getPartitioner().getDefaultToken();
        InetAddress myEndpoint = InetAddress.getByName("127.0.0.1");
 
        StorageService ss = StorageService.instance();
        ss.updateTokenMetadataUnsafe(myToken, myEndpoint);

        TokenMetadata tmd = ss.getTokenMetadata();
        assertEquals(numOldNodes + 1, tmd.cloneTokenEndPointMap().size());
        BootStrapper b = new BootStrapper(ss.getReplicationStrategy(), myEndpoint, myToken, tmd);
        Map<Range, Set<InetAddress>> res = b.getRangesWithSources();
        
        int transferCount = 0;
        for (Map.Entry<Range, Set<InetAddress>> e : res.entrySet())
        {
            assert e.getValue() != null && e.getValue().size() > 0 : StringUtils.join(e.getValue(), ", ");
            transferCount++;
        }

        /* Only 1 transfer from old node to new node */
        assertEquals(1, transferCount);
        IFailureDetector mockFailureDetector = new IFailureDetector()
        {
            public boolean isAlive(InetAddress ep)
            {
                return true;
            }

            public void interpret(InetAddress ep) { throw new UnsupportedOperationException(); }
            public void report(InetAddress ep) { throw new UnsupportedOperationException(); }
            public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener) { throw new UnsupportedOperationException(); }
            public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener) { throw new UnsupportedOperationException(); }
        };
        Map<InetAddress, List<Range>> temp = BootStrapper.getWorkMap(res, mockFailureDetector);
        assertEquals(1, temp.keySet().size());
        assertEquals(1, temp.values().iterator().next().size());
        assert !temp.keySet().iterator().next().equals(myEndpoint);
    }

