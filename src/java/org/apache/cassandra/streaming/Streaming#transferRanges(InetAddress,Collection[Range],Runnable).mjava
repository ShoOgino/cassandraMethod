    /**
     * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.
    */
    public static void transferRanges(InetAddress target, Collection<Range> ranges, Runnable callback)
    {
        assert ranges.size() > 0;

        if (logger.isDebugEnabled())
            logger.debug("Beginning transfer process to " + target + " for ranges " + StringUtils.join(ranges, ", "));

        /*
         * (1) dump all the memtables to disk.
         * (2) anticompaction -- split out the keys in the range specified
         * (3) transfer the data.
        */
        List<String> tables = DatabaseDescriptor.getTables();
        for (String tName : tables)
        {
            try
            {
                Table table = Table.open(tName);
                if (logger.isDebugEnabled())
                  logger.debug("Flushing memtables ...");
                for (Future f : table.flush())
                {
                    try
                    {
                        f.get();
                    }
                    catch (InterruptedException e)
                    {
                        throw new RuntimeException(e);
                    }
                    catch (ExecutionException e)
                    {
                        throw new RuntimeException(e);
                    }
                }
                if (logger.isDebugEnabled())
                  logger.debug("Performing anticompaction ...");
                /* Get the list of files that need to be streamed */
                transferSSTables(target, table.forceAntiCompaction(ranges, target), tName); // SSTR GC deletes the file when done
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
        }
        if (callback != null)
            callback.run();
    }

