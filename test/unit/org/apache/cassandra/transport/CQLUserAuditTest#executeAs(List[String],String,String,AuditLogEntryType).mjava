    private static ArrayList<AuditEvent> executeAs(List<String> queries, String username, String password,
                                                   AuditLogEntryType expectedAuthType) throws Exception
    {
        boolean authFailed = false;
        Cluster cluster = Cluster.builder().addContactPoints(InetAddress.getLoopbackAddress())
                                 .withoutJMXReporting()
                                 .withCredentials(username, password)
                                 .withPort(DatabaseDescriptor.getNativeTransportPort()).build();
        try (Session session = cluster.connect())
        {
            for (String query : queries)
                session.execute(query);
        }
        catch (AuthenticationException e)
        {
            authFailed = true;
        }
        cluster.close();

        if (expectedAuthType == null) return null;

        AuditEvent event = auditEvents.poll(100, TimeUnit.MILLISECONDS);
        assertEquals(expectedAuthType, event.getType());
        assertTrue(!authFailed || event.getType() == AuditLogEntryType.LOGIN_ERROR);
        assertEquals(InetAddressAndPort.getLoopbackAddress().address,
                     event.getEntry().getSource().address);
        assertTrue(event.getEntry().getSource().port > 0);
        if (event.getType() != AuditLogEntryType.LOGIN_ERROR)
            assertEquals(username, event.toMap().get("user"));

        // drain all remaining login related events, as there's no specification how connections and login attempts
        // should be handled by the driver, so we can't assert a fixed number of login events
        for (AuditEvent e = auditEvents.peek();
             e != null && (e.getType() == AuditLogEntryType.LOGIN_ERROR
                           || e.getType() == AuditLogEntryType.LOGIN_SUCCESS);
             e = auditEvents.peek())
        {
            auditEvents.remove(e);
        }

        ArrayList<AuditEvent> ret = new ArrayList<>(auditEvents.size());
        auditEvents.drainTo(ret);
        return ret;
    }

