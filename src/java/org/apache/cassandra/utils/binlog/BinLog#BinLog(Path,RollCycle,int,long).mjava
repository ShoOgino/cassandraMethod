    /**
     *
     * @param path Path to store the BinLog. Can't be shared with anything else.
     * @param rollCycle How often to roll the log file so it can potentially be deleted
     * @param maxQueueWeight Maximum weight of in memory queue for records waiting to be written to the file before blocking or dropping
     * @param maxLogSize Maximum size of the rolled files to retain on disk before deleting the oldest file
     */
    public BinLog(Path path, RollCycle rollCycle, int maxQueueWeight, long maxLogSize)
    {
        Preconditions.checkNotNull(path, "path was null");
        Preconditions.checkNotNull(rollCycle, "rollCycle was null");
        Preconditions.checkArgument(maxQueueWeight > 0, "maxQueueWeight must be > 0");
        Preconditions.checkArgument(maxLogSize > 0, "maxLogSize must be > 0");
        ChronicleQueueBuilder builder = ChronicleQueueBuilder.single(path.toFile());
        builder.rollCycle(rollCycle);
        builder.storeFileListener(this);
        queue = builder.build();
        appender = queue.acquireAppender();
        sampleQueue = new WeightedQueue<>(maxQueueWeight);
        this.maxLogSize = maxLogSize;
    }

