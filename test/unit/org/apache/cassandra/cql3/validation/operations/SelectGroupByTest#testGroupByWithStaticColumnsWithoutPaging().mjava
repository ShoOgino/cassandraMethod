    @Test
    public void testGroupByWithStaticColumnsWithoutPaging() throws Throwable
    {
        createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, primary key (a, b, c))");

        // ------------------------------------
        // Test with non static columns empty
        // ------------------------------------
        execute("UPDATE %s SET s = 1 WHERE a = 1");
        execute("UPDATE %s SET s = 2 WHERE a = 2");
        execute("UPDATE %s SET s = 3 WHERE a = 4");

        // Range queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        // Range query without aggregates
        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
                   row(1, null, 1),
                   row(2, null, 2),
                   row(4, null, 3));

        // Range query with wildcard
        assertRows(execute("SELECT * FROM %s GROUP BY a, b"),
                   row(1, null, null, 1, null),
                   row(2, null, null, 2, null),
                   row(4, null, null, 3, null ));

        // Range query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b LIMIT 2"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L));

        // Range queries with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        // Range query with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a"),
                   row(1, 1, 1L),
                   row(2, 2, 1L),
                   row(4, 3, 1L));

        // Range queries with DISTINCT and LIMIT
        assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a LIMIT 2"),
                   row(1, 1, 1L),
                   row(2, 2, 1L));

        // Single partition queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
                   row(1, null, 1, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b"),
                   row(1, null, 1, 0L, 1L));

        // Single partition query without aggregates
        assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a, b"),
                   row(1, null, 1));

        // Single partition query with wildcard
        assertRows(execute("SELECT * FROM %s WHERE a = 1 GROUP BY a, b"),
                   row(1, null, null, 1, null));

        // Single partition query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2"),
                   row(1, null, 1, 0L, 1L));

        // Single partition query with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 2"),
                   row(1, null, 1, 0L, 1L));

        // Single partition query with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1 GROUP BY a"),
                   row(1, 1, 1L));

        // Multi-partitions queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        // Multi-partitions query without aggregates
        assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, null, 1),
                   row(2, null, 2),
                   row(4, null, 3));

        // Multi-partitions query with wildcard
        assertRows(execute("SELECT * FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, null, null, 1, null),
                   row(2, null, null, 2, null),
                   row(4, null, null, 3, null ));

        // Multi-partitions query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 2"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L));

        // Multi-partitions query with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
                   row(1, null, 1, 0L, 1L),
                   row(2, null, 2, 0L, 1L),
                   row(4, null, 3, 0L, 1L));

        // Multi-partitions queries with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, 1, 1L),
                   row(2, 2, 1L),
                   row(4, 3, 1L));

        // Multi-partitions with DISTINCT and LIMIT
        assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
                   row(1, 1, 1L),
                   row(2, 2, 1L));

        // ------------------------------------
        // Test with some non static columns empty
        // ------------------------------------
        execute("UPDATE %s SET s = 3 WHERE a = 3");
        execute("DELETE s FROM %s WHERE a = 4");

        execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 1, 3)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 2, 6)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 2, 12)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 2, 12)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 3, 6)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 3, 3)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (2, 4, 3, 6)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (4, 8, 2, 12)");
        execute("INSERT INTO %s (a, b, c, d) VALUES (5, 8, 2, 12)");

        // Makes sure that we have some tombstones
        execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2");
        execute("DELETE FROM %s WHERE a = 5");

        // Range queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
                   row(1, 2, 1, 4L, 4L),
                   row(2, 2, 2, 2L, 2L),
                   row(4, 8, null, 1L, 0L),
                   row(3, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
                   row(1, 2, 1, 2L, 2L),
                   row(1, 4, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(2, 4, 2, 1L, 1L),
                   row(4, 8, null, 1L, 0L),
                   row(3, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L));

        // Range queries without aggregates
        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a"),
                   row(1, 2, 1),
                   row(2, 2, 2),
                   row(4, 8, null),
                   row(3, null, 3));

        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
                   row(1, 2, 1),
                   row(1, 4, 1),
                   row(2, 2, 2),
                   row(2, 4, 2),
                   row(4, 8, null),
                   row(3, null, 3));

        // Range queries with wildcard
        assertRows(execute("SELECT * FROM %s GROUP BY a"),
                   row(1, 2, 1, 1, 3),
                   row(2, 2, 3, 2, 3),
                   row(4, 8, 2, null, 12),
                   row(3, null, null, 3, null));

        assertRows(execute("SELECT * FROM %s GROUP BY a, b"),
                   row(1, 2, 1, 1, 3),
                   row(1, 4, 2, 1, 12),
                   row(2, 2, 3, 2, 3),
                   row(2, 4, 3, 2, 6),
                   row(4, 8, 2, null, 12),
                   row(3, null, null, 3, null));

        // Range query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a LIMIT 2"),
                   row(1, 2, 1, 4L, 4L),
                   row(2, 2, 2, 2L, 2L));

        // Range query with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(4, 8, null, 1L, 0L),
                   row(3, null, 3, 0L, 1L));

        // Range query with PER PARTITION LIMIT and LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(4, 8, null, 1L, 0L));

        // Range queries without aggregates and with LIMIT
        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a LIMIT 2"),
                   row(1, 2, 1),
                   row(2, 2, 2));

        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b LIMIT 10"),
                   row(1, 2, 1),
                   row(1, 4, 1),
                   row(2, 2, 2),
                   row(2, 4, 2),
                   row(4, 8, null),
                   row(3, null, 3));

        // Range queries with wildcard and with LIMIT
        assertRows(execute("SELECT * FROM %s GROUP BY a LIMIT 2"),
                   row(1, 2, 1, 1, 3),
                   row(2, 2, 3, 2, 3));

        assertRows(execute("SELECT * FROM %s GROUP BY a, b LIMIT 10"),
                   row(1, 2, 1, 1, 3),
                   row(1, 4, 2, 1, 12),
                   row(2, 2, 3, 2, 3),
                   row(2, 4, 3, 2, 6),
                   row(4, 8, 2, null, 12),
                   row(3, null, null, 3, null));

        // Range queries without aggregates and with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
                   row(1, 2, 1),
                   row(2, 2, 2),
                   row(4, 8, null),
                   row(3, null, 3));

        // Range queries with wildcard and with PER PARTITION LIMIT
        assertRows(execute("SELECT * FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
                   row(1, 2, 1, 1, 3),
                   row(2, 2, 3, 2, 3),
                   row(4, 8, 2, null, 12),
                   row(3, null, null, 3, null));

        // Range queries without aggregates, with PER PARTITION LIMIT and with LIMIT
        assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
                   row(1, 2, 1),
                   row(2, 2, 2));

        // Range queries with wildcard, PER PARTITION LIMIT and LIMIT
        assertRows(execute("SELECT * FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
                   row(1, 2, 1, 1, 3),
                   row(2, 2, 3, 2, 3));

        // Range query with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a"),
                   row(1, 1, 1L, 1L),
                   row(2, 2, 1L, 1L),
                   row(4, null, 1L, 0L),
                   row(3, 3, 1L, 1L));

        // Range query with DISTINCT and LIMIT
        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a LIMIT 2"),
                   row(1, 1, 1L, 1L),
                   row(2, 2, 1L, 1L));

        // Range query with ORDER BY
        assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
                             "SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a ORDER BY b DESC, c DESC");

        // Single partition queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
                   row(1, 2, 1, 4L, 4L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3 GROUP BY a, b"),
                   row(3, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2 GROUP BY a, b"),
                   row(2, 2, 2, 1L, 1L));

        // Single partition queries without aggregates
        assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a"),
                   row(1, 2, 1));

        assertRows(execute("SELECT a, b, s FROM %s WHERE a = 4 GROUP BY a, b"),
                   row(4, 8, null));

        // Single partition queries with wildcard
        assertRows(execute("SELECT * FROM %s WHERE a = 1 GROUP BY a"),
                   row(1, 2, 1, 1, 3));

        assertRows(execute("SELECT * FROM %s WHERE a = 4 GROUP BY a, b"),
                   row(4, 8, 2, null, 12));

        // Single partition query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
                   row(2, 2, 2, 1L, 1L));

        // Single partition query with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b PER PARTITION LIMIT 1"),
                   row(2, 2, 2, 1L, 1L));

        // Single partition queries without aggregates and with LIMIT
        assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
                   row(2, 2, 2));

        assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 2"),
                   row(2, 2, 2),
                   row(2, 4, 2));

        // Single partition queries with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 2 GROUP BY a"),
                   row(2, 2, 1L, 1L));

        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 4 GROUP BY a"),
                   row(4, null, 1L, 0L));

         // Single partition query with ORDER BY
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC"),
                   row(2, 4, 2, 1L, 1L),
                   row(2, 2, 2, 1L, 1L));

         // Single partition queries with ORDER BY and LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 1"),
                   row(2, 4, 2, 1L, 1L));

        // Single partition queries with ORDER BY and PER PARTITION LIMIT
       assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC PER PARTITION LIMIT 1"),
                  row(2, 4, 2, 1L, 1L));

        // Multi-partitions queries
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, 2, 1, 4L, 4L),
                   row(2, 2, 2, 2L, 2L),
                   row(3, null, 3, 0L, 1L),
                   row(4, 8, null, 1L, 0L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, 2, 1, 2L, 2L),
                   row(1, 4, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(2, 4, 2, 1L, 1L),
                   row(3, null, 3, 0L, 1L),
                   row(4, 8, null, 1L, 0L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2 GROUP BY a, b"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L));

        // Multi-partitions queries without aggregates
        assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, 2, 1),
                   row(2, 2, 2),
                   row(3, null, 3),
                   row(4, 8, null));

        assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, 2, 1),
                   row(1, 4, 1),
                   row(2, 2, 2),
                   row(2, 4, 2),
                   row(3, null, 3),
                   row(4, 8, null));

        // Multi-partitions queries with wildcard
        assertRows(execute("SELECT * FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, 2, 1, 1, 3),
                   row(2, 2, 3, 2, 3),
                   row(3, null, null, 3, null),
                   row(4, 8, 2, null, 12));

        assertRows(execute("SELECT * FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
                   row(1, 2, 1, 1, 3),
                   row(1, 4, 2, 1, 12),
                   row(2, 2, 3, 2, 3),
                   row(2, 4, 3, 2, 6),
                   row(3, null, null, 3, null),
                   row(4, 8, 2, null, 12));

        // Multi-partitions query with LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
                   row(1, 2, 1, 4L, 4L),
                   row(2, 2, 2, 2L, 2L));

        // Multi-partitions query with PER PARTITION LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(3, null, 3, 0L, 1L),
                   row(4, 8, null, 1L, 0L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
                   row(1, 2, 1, 2L, 2L),
                   row(1, 4, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(2, 4, 2, 1L, 1L),
                   row(3, null, 3, 0L, 1L),
                   row(4, 8, null, 1L, 0L));

        // Multi-partitions queries with PER PARTITION LIMIT and LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
                   row(1, 2, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L),
                   row(3, null, 3, 0L, 1L));

        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 4 LIMIT 3"),
                   row(1, 2, 1, 2L, 2L),
                   row(1, 4, 1, 2L, 2L),
                   row(2, 2, 2, 1L, 1L));

        // Multi-partitions queries without aggregates and with LIMIT
        assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
                   row(1, 2, 1),
                   row(2, 2, 2));

        assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 10"),
                   row(1, 2, 1),
                   row(1, 4, 1),
                   row(2, 2, 2),
                   row(2, 4, 2),
                   row(3, null, 3),
                   row(4, 8, null));

        // Multi-partitions query with DISTINCT
        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
                   row(1, 1, 1L, 1L),
                   row(2, 2, 1L, 1L),
                   row(3, 3, 1L, 1L),
                   row(4, null, 1L, 0L));

        // Multi-partitions query with DISTINCT and LIMIT
        assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
                   row(1, 1, 1L, 1L),
                   row(2, 2, 1L, 1L));

         // Multi-partitions query with ORDER BY
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC"),
                   row(4, 8, null, 1L, 0L),
                   row(1, 4, 1, 2L, 2L),
                   row(2, 4, 2, 1L, 1L),
                   row(2, 2, 2, 1L, 1L),
                   row(1, 2, 1, 2L, 2L));

         // Multi-partitions queries with ORDER BY and LIMIT
        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 2"),
                   row(4, 8, null, 1L, 0L),
                   row(1, 4, 1, 2L, 2L));
    }

