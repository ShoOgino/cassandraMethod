    @Test
    public void testGetRowSuperColumnOffsetCount() throws Throwable
    {
        Table table = Table.open("Table1");
        
        RowMutation rm = new RowMutation("Table1",TEST_KEY);
        ColumnFamily cf = ColumnFamily.create("Table1", "Super1");
        SuperColumn sc1 = new SuperColumn("sc1");
        sc1.addColumn(new Column("col1","val1".getBytes(), 1L));
        sc1.addColumn(new Column("col2","val2".getBytes(), 1L));
        SuperColumn sc2 = new SuperColumn("sc2");
        sc2.addColumn(new Column("col3","val3".getBytes(), 1L));
        sc2.addColumn(new Column("col4","val4".getBytes(), 1L));
        cf.addColumn(sc1);
        cf.addColumn(sc2);
        rm.add(cf);
        
        rm.apply();
        //Slicing top level columns of a supercolumn
        Row result = table.getRow(TEST_KEY, "Super1", 0, 2);
        ColumnFamily cres = result.getColumnFamily("Super1");
        assertNotNull(cres);
        assertEquals(cres.getAllColumns().size(), 2); //2 supercolumns
        assertEquals(cres.getColumnCount(),2+4); //2 cols, 2 subcols each
        // should have col1 ... col4
        assertNotNull(cres.getColumn("sc1").getSubColumn("col1"));
        assertNotNull(cres.getColumn("sc1").getSubColumn("col2"));
        assertNotNull(cres.getColumn("sc2").getSubColumn("col3"));
        assertNotNull(cres.getColumn("sc2").getSubColumn("col4"));

        
        result = table.getRow(TEST_KEY, "Super1:sc1", 1, 2); //get at most 2, but only 1 column will be available
        cres = result.getColumnFamily("Super1");
        assertNotNull(cres);
        assertEquals(cres.getAllColumns().size(), 1); //only 1 top level column. sc1 has only 2 subcolumns
        assertEquals(cres.getColumnCount(), 2); //getObjectCount: 1 for the column, and 1 for subcolumn
        
        assertNotNull(cres.getColumn("sc1").getSubColumn("col2"));
        assertNull(cres.getColumn("sc2"));       
    }

