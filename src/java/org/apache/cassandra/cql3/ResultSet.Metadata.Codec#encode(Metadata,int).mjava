            public ChannelBuffer encode(Metadata m, int version)
            {
                boolean noMetadata = m.flags.contains(Flag.NO_METADATA);
                boolean globalTablesSpec = m.flags.contains(Flag.GLOBAL_TABLES_SPEC);
                boolean hasMorePages = m.flags.contains(Flag.HAS_MORE_PAGES);

                int stringCount = noMetadata ? 0 : (globalTablesSpec ? 2 + m.columnCount : 3 * m.columnCount);
                CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(1 + (noMetadata ? 0 : m.columnCount), stringCount, hasMorePages ? 1 : 0);

                ChannelBuffer header = ChannelBuffers.buffer(8);

                assert version > 1 || (!m.flags.contains(Flag.HAS_MORE_PAGES) && !noMetadata);

                header.writeInt(Flag.serialize(m.flags));
                header.writeInt(m.columnCount);

                builder.add(header);

                if (hasMorePages)
                    builder.addValue(m.pagingState == null ? null : m.pagingState.serialize());

                if (!noMetadata)
                {
                    if (globalTablesSpec)
                    {
                        builder.addString(m.names.get(0).ksName);
                        builder.addString(m.names.get(0).cfName);
                    }

                    for (ColumnSpecification name : m.names)
                    {
                        if (!globalTablesSpec)
                        {
                            builder.addString(name.ksName);
                            builder.addString(name.cfName);
                        }
                        builder.addString(name.toString());
                        builder.add(DataType.codec.encodeOne(DataType.fromType(name.type)));
                    }
                }
                return builder.build();
            }

