    @SuppressWarnings("unchecked")
    private static void testSplit(IPartitioner partitioner)
    {
        boolean isRandom = partitioner instanceof RandomPartitioner;
        Splitter splitter = getSplitter(partitioner);
        BigInteger min = splitter.valueForToken(partitioner.getMinimumToken());
        BigInteger max = splitter.valueForToken(partitioner.getMaximumToken());
        BigInteger first = isRandom ? RandomPartitioner.ZERO : min;
        BigInteger last = isRandom ? max.subtract(BigInteger.valueOf(1)) : max;
        BigInteger midpoint = last.add(first).divide(BigInteger.valueOf(2));

        // regular single range
        testSplit(partitioner, 1, newHashSet(Pair.create(1, 100)), newHashSet(Pair.create(1, 100)));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(1, 100)),
                  newHashSet(Pair.create(1, 50), Pair.create(50, 100)));
        testSplit(partitioner, 4,
                  newHashSet(Pair.create(1, 100)),
                  newHashSet(Pair.create(1, 25), Pair.create(25, 50), Pair.create(50, 75), Pair.create(75, 100)));
        testSplit(partitioner, 5,
                  newHashSet(Pair.create(3, 79)),
                  newHashSet(Pair.create(3, 18), Pair.create(18, 33), Pair.create(33, 48), Pair.create(48, 63),
                             Pair.create(63, 79)));
        testSplit(partitioner, 3,
                  newHashSet(Pair.create(3, 20)),
                  newHashSet(Pair.create(3, 8), Pair.create(8, 14), Pair.create(14, 20)));
        testSplit(partitioner, 4,
                  newHashSet(Pair.create(3, 20)),
                  newHashSet(Pair.create(3, 7), Pair.create(7, 11), Pair.create(11, 15), Pair.create(15, 20)));

        // single range too small to be partitioned
        testSplit(partitioner, 1, newHashSet(Pair.create(1, 2)), newHashSet(Pair.create(1, 2)));
        testSplit(partitioner, 2, newHashSet(Pair.create(1, 2)), newHashSet(Pair.create(1, 2)));
        testSplit(partitioner, 4, newHashSet(Pair.create(1, 4)), newHashSet(Pair.create(1, 4)));
        testSplit(partitioner, 8, newHashSet(Pair.create(1, 2)), newHashSet(Pair.create(1, 2)));

        // single wrapping range
        BigInteger cutpoint = isRandom ? midpoint.add(BigInteger.valueOf(7)) : min.add(BigInteger.valueOf(6));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(8, 4)),
                  newHashSet(Pair.create(8, cutpoint), Pair.create(cutpoint, 4)));

        // single range around partitioner min/max values
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(8)), min)),
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(8)), max.subtract(BigInteger.valueOf(4))),
                             Pair.create(max.subtract(BigInteger.valueOf(4)), isRandom ? first : max)));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(8)), max)),
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(8)), max.subtract(BigInteger.valueOf(4))),
                             Pair.create(max.subtract(BigInteger.valueOf(4)), max)));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(min, min.add(BigInteger.valueOf(8)))),
                  newHashSet(Pair.create(min, min.add(BigInteger.valueOf(4))),
                             Pair.create(min.add(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(8)))));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(max, min.add(BigInteger.valueOf(8)))),
                  newHashSet(Pair.create(max, min.add(BigInteger.valueOf(4))),
                             Pair.create(min.add(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(8)))));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(4)))),
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(4)), last),
                             Pair.create(last, min.add(BigInteger.valueOf(4)))));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(8)))),
                  newHashSet(Pair.create(max.subtract(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(2))),
                             Pair.create(min.add(BigInteger.valueOf(2)), min.add(BigInteger.valueOf(8)))));

        // multiple ranges
        testSplit(partitioner, 1,
                  newHashSet(Pair.create(1, 100), Pair.create(200, 300)),
                  newHashSet(Pair.create(1, 100), Pair.create(200, 300)));
        testSplit(partitioner, 2,
                  newHashSet(Pair.create(1, 100), Pair.create(200, 300)),
                  newHashSet(Pair.create(1, 100), Pair.create(200, 300)));
        testSplit(partitioner, 4,
                  newHashSet(Pair.create(1, 100), Pair.create(200, 300)),
                  newHashSet(Pair.create(1, 50), Pair.create(50, 100), Pair.create(200, 250), Pair.create(250, 300)));
        testSplit(partitioner, 4,
                  newHashSet(Pair.create(1, 100),
                             Pair.create(200, 300),
                             Pair.create(max.subtract(BigInteger.valueOf(4)), min.add(BigInteger.valueOf(4)))),
                  newHashSet(Pair.create(1, 50),
                             Pair.create(50, 100),
                             Pair.create(200, 250),
                             Pair.create(250, 300),
                             Pair.create(last, min.add(BigInteger.valueOf(4))),
                             Pair.create(max.subtract(BigInteger.valueOf(4)), last)));
    }

