    /**
     * Generate two trees with different splits, but containing the same keys, and
     * check that they compare equally.
     *
     * The set of keys used in this test is: #{2,4,6,8,12,14,0}
     */
    @Test
    public void testValidateTree()
    {
        TOKEN_SCALE = new BigInteger("16"); // this test needs slightly more resolution

        Range<Token> full = new Range<>(tok(-1), tok(-1));
        Iterator<TreeRange> ranges;
        MerkleTrees mts2 = new MerkleTrees(partitioner);
        mts2.addMerkleTree(Integer.MAX_VALUE, fullRange());

        mts.split(tok(8));
        mts.split(tok(4));
        mts.split(tok(12));
        mts.split(tok(6));
        mts.split(tok(10));

        int seed = 123456789;

        Random random1 = new Random(seed);
        ranges = mts.rangeIterator();
        ranges.next().addAll(new HIterator(random1, 2, 4)); // (-1,4]: depth 2
        ranges.next().addAll(new HIterator(random1, 6)); // (4,6]
        ranges.next().addAll(new HIterator(random1, 8)); // (6,8]
        ranges.next().addAll(new HIterator(/*empty*/ new int[0])); // (8,10]
        ranges.next().addAll(new HIterator(random1, 12)); // (10,12]
        ranges.next().addAll(new HIterator(random1, 14, -1)); // (12,-1]: depth 2


        mts2.split(tok(8));
        mts2.split(tok(4));
        mts2.split(tok(12));
        mts2.split(tok(2));
        mts2.split(tok(10));
        mts2.split(tok(9));
        mts2.split(tok(11));

        Random random2 = new Random(seed);
        ranges = mts2.rangeIterator();
        ranges.next().addAll(new HIterator(random2, 2)); // (-1,2]
        ranges.next().addAll(new HIterator(random2, 4)); // (2,4]
        ranges.next().addAll(new HIterator(random2, 6, 8)); // (4,8]: depth 2
        ranges.next().addAll(new HIterator(/*empty*/ new int[0])); // (8,9]
        ranges.next().addAll(new HIterator(/*empty*/ new int[0])); // (9,10]
        ranges.next().addAll(new HIterator(/*empty*/ new int[0])); // (10,11]: depth 4
        ranges.next().addAll(new HIterator(random2, 12)); // (11,12]: depth 4
        ranges.next().addAll(new HIterator(random2, 14, -1)); // (12,-1]: depth 2

        byte[] mthash = mts.hash(full);
        byte[] mt2hash = mts2.hash(full);
        assertHashEquals("Tree hashes did not match: " + mts + " && " + mts2, mthash, mt2hash);
    }

