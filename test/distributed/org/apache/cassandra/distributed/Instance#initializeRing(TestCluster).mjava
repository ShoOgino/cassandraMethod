    private void initializeRing(TestCluster cluster)
    {
        // This should be done outside instance in order to avoid serializing config
        String partitionerName = config.partitioner;
        List<String> initialTokens = new ArrayList<>();
        List<InetAddressAndPort> hosts = new ArrayList<>();
        List<UUID> hostIds = new ArrayList<>();
        for (int i = 1 ; i <= cluster.size() ; ++i)
        {
            InstanceConfig config = cluster.get(i).config;
            initialTokens.add(config.initial_token);
            try
            {
                hosts.add(InetAddressAndPort.getByName(config.broadcast_address));
            }
            catch (UnknownHostException e)
            {
                throw new RuntimeException(e);
            }
            hostIds.add(config.hostId);
        }

        runOnInstance(() ->
        {
            try
            {
                IPartitioner partitioner = FBUtilities.newPartitioner(partitionerName);
                StorageService storageService = StorageService.instance;
                List<Token> tokens = new ArrayList<>();
                for (String token : initialTokens)
                    tokens.add(partitioner.getTokenFactory().fromString(token));

                for (int i = 0; i < tokens.size(); i++)
                {
                    InetAddressAndPort ep = hosts.get(i);
                    Gossiper.instance.initializeNodeUnsafe(ep.address, hostIds.get(i), 1);
                    Gossiper.instance.injectApplicationState(ep.address,
                            ApplicationState.TOKENS,
                            new VersionedValue.VersionedValueFactory(partitioner).tokens(Collections.singleton(tokens.get(i))));
                    storageService.onChange(ep.address,
                            ApplicationState.STATUS,
                            new VersionedValue.VersionedValueFactory(partitioner).normal(Collections.singleton(tokens.get(i))));
                    Gossiper.instance.realMarkAlive(ep.address, Gossiper.instance.getEndpointStateForEndpoint(ep.address));
                    MessagingService.instance().setVersion(ep.address, MessagingService.current_version);
                }

                // check that all nodes are in token metadata
                for (int i = 0; i < tokens.size(); ++i)
                    assert storageService.getTokenMetadata().isMember(hosts.get(i).address);
            }
            catch (Throwable e) // UnknownHostException
            {
                throw new RuntimeException(e);
            }
        });
    }

