    /**
     * @return the number of objects consumed by moving out of the next (possibly current) leaf
     */
    private int consumeNextLeaf()
    {
        Object[] node = currentNode();
        int r = 0;

        if (!isLeaf(node))
        {
            // if we're not in a leaf, then calling successor once will take us to a leaf, since the next
            // key will be in the leftmost subtree of whichever branch is next.  For instance, if we
            // are in the root node of the tree depicted by http://cis.stvincent.edu/html/tutorials/swd/btree/btree1.gif,
            // successor() will take us to the leaf containing N and O.
            int i = currentIndex();
            if (node == endNode && i == endIndex)
                return -1;
            r = 1;
            successor();
            node = currentNode();
        }

        if (node == endNode)
        {
            // only count up to endIndex, and don't call successor()
            if (currentIndex() == endIndex)
                return r > 0 ? r : -1;
            r += endIndex - currentIndex();
            setIndex(endIndex);
            return r;
        }

        // count the remaining objects in this leaf
        int keyEnd = getLeafKeyEnd(node);
        r += keyEnd - currentIndex();
        setIndex(keyEnd);
        successor();
        return r;
    }

