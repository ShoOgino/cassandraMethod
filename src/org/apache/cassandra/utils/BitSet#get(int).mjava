    /**
     * Returns the value of the bit with the specified index. The value is
     * <code>true</code> if the bit with the index <code>bitIndex</code> is
     * currently set in this <code>BitSet</code>; otherwise, the result is
     * <code>false</code>.
     * 
     * @param bitIndex
     *            the bit index.
     * @return the value of the bit with the specified index.
     * @exception IndexOutOfBoundsException
     *                if the specified index is negative.
     */
    public boolean get(int bitIndex)
    {
        if (bitIndex < 0)
            throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);
        
        checkInvariants();
        
        int wordIndex = wordIndex(bitIndex);
        return (wordIndex < wordsInUse)
        && ((words[wordIndex] & (1L << bitIndex)) != 0);
    }

