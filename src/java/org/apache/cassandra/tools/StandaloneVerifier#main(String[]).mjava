    public static void main(String args[])
    {
        Options options = Options.parseArgs(args);
        Util.initDatabaseDescriptor();

        try
        {
            // load keyspace descriptions.
            Schema.instance.loadFromDisk(false);

            boolean hasFailed = false;

            if (Schema.instance.getTableMetadataRef(options.keyspaceName, options.cfName) == null)
                throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
                                                                 options.keyspaceName,
                                                                 options.cfName));

            // Do not load sstables since they might be broken
            Keyspace keyspace = Keyspace.openWithoutSSTables(options.keyspaceName);
            ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(options.cfName);

            OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
            Directories.SSTableLister lister = cfs.getDirectories().sstableLister(Directories.OnTxnErr.THROW).skipTemporary(true);

            List<SSTableReader> sstables = new ArrayList<>();

            // Verify sstables
            for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet())
            {
                Set<Component> components = entry.getValue();
                if (!components.contains(Component.DATA) || !components.contains(Component.PRIMARY_INDEX))
                    continue;

                try
                {
                    SSTableReader sstable = SSTableReader.openNoValidation(entry.getKey(), components, cfs);
                    sstables.add(sstable);
                }
                catch (Exception e)
                {
                    JVMStabilityInspector.inspectThrowable(e);
                    System.err.println(String.format("Error Loading %s: %s", entry.getKey(), e.getMessage()));
                    if (options.debug)
                        e.printStackTrace(System.err);
                }
            }
            Verifier.Options verifyOptions = Verifier.options().invokeDiskFailurePolicy(false)
                                                               .extendedVerification(options.extended)
                                                               .checkVersion(options.checkVersion)
                                                               .mutateRepairStatus(options.mutateRepairStatus)
                                                               .checkOwnsTokens(false) // don't know the ranges when running offline
                                                               .build();
            for (SSTableReader sstable : sstables)
            {
                try
                {

                    try (Verifier verifier = new Verifier(cfs, sstable, handler, true, verifyOptions))
                    {
                        verifier.verify();
                    }
                    catch (CorruptSSTableException cs)
                    {
                        System.err.println(String.format("Error verifying %s: %s", sstable, cs.getMessage()));
                        hasFailed = true;
                    }
                }
                catch (Exception e)
                {
                    System.err.println(String.format("Error verifying %s: %s", sstable, e.getMessage()));
                    e.printStackTrace(System.err);
                }
            }

            CompactionManager.instance.finishCompactionsAndShutdown(5, TimeUnit.MINUTES);

            System.exit( hasFailed ? 1 : 0 ); // We need that to stop non daemonized threads
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
            if (options.debug)
                e.printStackTrace(System.err);
            System.exit(1);
        }
    }

