    // $ANTLR start connectStmt
    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cli/Cli.g:86:1: connectStmt : K_CONNECT host SLASH port -> ^( NODE_CONNECT host port ) ;
    public final connectStmt_return connectStmt() throws RecognitionException {
        connectStmt_return retval = new connectStmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token K_CONNECT11=null;
        Token SLASH13=null;
        host_return host12 = null;

        port_return port14 = null;


        CommonTree K_CONNECT11_tree=null;
        CommonTree SLASH13_tree=null;
        RewriteRuleTokenStream stream_SLASH=new RewriteRuleTokenStream(adaptor,"token SLASH");
        RewriteRuleTokenStream stream_K_CONNECT=new RewriteRuleTokenStream(adaptor,"token K_CONNECT");
        RewriteRuleSubtreeStream stream_port=new RewriteRuleSubtreeStream(adaptor,"rule port");
        RewriteRuleSubtreeStream stream_host=new RewriteRuleSubtreeStream(adaptor,"rule host");
        try {
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cli/Cli.g:87:5: ( K_CONNECT host SLASH port -> ^( NODE_CONNECT host port ) )
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cli/Cli.g:87:7: K_CONNECT host SLASH port
            {
            K_CONNECT11=(Token)input.LT(1);
            match(input,K_CONNECT,FOLLOW_K_CONNECT_in_connectStmt298); if (failed) return retval;
            if ( backtracking==0 ) stream_K_CONNECT.add(K_CONNECT11);

            pushFollow(FOLLOW_host_in_connectStmt300);
            host12=host();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_host.add(host12.getTree());
            SLASH13=(Token)input.LT(1);
            match(input,SLASH,FOLLOW_SLASH_in_connectStmt302); if (failed) return retval;
            if ( backtracking==0 ) stream_SLASH.add(SLASH13);

            pushFollow(FOLLOW_port_in_connectStmt304);
            port14=port();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_port.add(port14.getTree());

            // AST REWRITE
            // elements: host, port
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 87:33: -> ^( NODE_CONNECT host port )
            {
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cli/Cli.g:87:36: ^( NODE_CONNECT host port )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(NODE_CONNECT, "NODE_CONNECT"), root_1);

                adaptor.addChild(root_1, stream_host.next());
                adaptor.addChild(root_1, stream_port.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end connectStmt

