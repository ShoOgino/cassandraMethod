    /**
     * Register a tree from the given endpoint to be compared to the appropriate trees
     * in AE_SERVICE_STAGE when they become available.
     *
     * @param cf The column family of the tree.
     * @param endpoint The endpoint which owns the given tree.
     * @param tree The tree for the endpoint.
     */
    private void rendezvous(CFPair cf, InetAddress endpoint, MerkleTree tree)
    {
        InetAddress LOCAL = FBUtilities.getLocalAddress();

        // return the rendezvous pairs for this cf
        ExpiringMap<InetAddress, TreePair> ctrees = rendezvousPairs(cf);

        List<Differencer> differencers = new ArrayList<Differencer>();
        if (LOCAL.equals(endpoint))
        {
            // we're registering a local tree: rendezvous with all remote trees
            for (InetAddress neighbor : getNeighbors(cf.left))
            {
                TreePair waiting = ctrees.remove(neighbor);
                if (waiting != null && waiting.right != null)
                {
                    // the neighbor beat us to the rendezvous: queue differencing
                    differencers.add(new Differencer(cf, LOCAL, neighbor,
                                                     tree, waiting.right));
                    continue;
                }

                // else, the local tree is first to the rendezvous: store and wait
                ctrees.put(neighbor, new TreePair(tree, null));
                logger.debug("Stored local tree for " + cf + " to wait for " + neighbor);
            }
        }
        else
        {
            // we're registering a remote tree: rendezvous with the local tree
            TreePair waiting = ctrees.remove(endpoint);
            if (waiting != null && waiting.left != null)
            {
                // the local tree beat us to the rendezvous: queue differencing
                differencers.add(new Differencer(cf, LOCAL, endpoint,
                                                 waiting.left, tree));
            }
            else
            {
                // else, the remote tree is first to the rendezvous: store and wait
                ctrees.put(endpoint, new TreePair(null, tree));
                logger.debug("Stored remote tree for " + cf + " from " + endpoint);
            }
        }

        for (Differencer differencer : differencers)
        {
            logger.info("Queueing comparison " + differencer);
            StageManager.getStage(StageManager.AE_SERVICE_STAGE).execute(differencer);
        }
    }

