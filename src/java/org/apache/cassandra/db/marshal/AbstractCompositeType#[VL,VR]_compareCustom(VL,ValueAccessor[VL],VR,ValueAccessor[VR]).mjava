    public <VL, VR> int compareCustom(VL left, ValueAccessor<VL> accessorL, VR right, ValueAccessor<VR> accessorR)
    {
        if (accessorL.isEmpty(left) || accessorR.isEmpty(right))
            return Boolean.compare(accessorR.isEmpty(right), accessorL.isEmpty(left));

        boolean isStaticL = readIsStatic(left, accessorL);
        boolean isStaticR = readIsStatic(right, accessorR);
        if (isStaticL != isStaticR)
            return isStaticL ? -1 : 1;

        int i = 0;

        VL previous = null;
        int offsetL = startingOffset(isStaticL);
        int offsetR = startingOffset(isStaticR);

        while (!accessorL.isEmptyFromOffset(left, offsetL) && !accessorR.isEmptyFromOffset(right, offsetL))
        {
            AbstractType<?> comparator = getComparator(i, left, accessorL, right, accessorR, offsetL, offsetR);
            offsetL += getComparatorSize(i, left, accessorL, offsetL);
            offsetR += getComparatorSize(i, right, accessorR, offsetR);

            VL value1 = accessorL.sliceWithShortLength(left, offsetL);
            offsetL += accessorL.sizeWithShortLength(value1);
            VR value2 = accessorR.sliceWithShortLength(right, offsetR);
            offsetR += accessorR.sizeWithShortLength(value2);

            int cmp = comparator.compareCollectionMembers(value1, accessorL, value2, accessorR, previous);
            if (cmp != 0)
                return cmp;

            previous = value1;

            byte bL = accessorL.getByte(left, offsetL++);
            byte bR = accessorR.getByte(right, offsetR++);
            if (bL != bR)
                return bL - bR;

            ++i;
        }

        if (accessorL.isEmptyFromOffset(left, offsetL))
            return accessorR.sizeFromOffset(right, offsetR) == 0 ? 0 : -1;

        // left.remaining() > 0 && right.remaining() == 0
        return 1;
    }

