    /**
     * Create a FilteredPartition holding all the rows of the provided iterator.
     *
     * Warning: Note that this method does not close the provided iterator and it is
     * up to the caller to do so.
     */
    public static FilteredPartition create(RowIterator iterator)
    {
        FilteredPartition partition = new FilteredPartition(iterator.metadata(),
                                                            iterator.partitionKey(),
                                                            iterator.columns(),
                                                            4,
                                                            iterator.isReverseOrder());

        partition.staticRow = iterator.staticRow().takeAlias();

        Writer writer = partition.new Writer(true);

        while (iterator.hasNext())
            iterator.next().copyTo(writer);

        // A Partition (or more precisely AbstractPartitionData) always assumes that its data is in clustering
        // order. So if we've just added them in reverse clustering order, reverse them.
        if (iterator.isReverseOrder())
            partition.reverse();

        return partition;
    }

