    private static <C, K extends C, V extends C, S> Object[] buildInternal(S source, IteratingFunction<S> iterFunc, int size, int level, int startIdx, UpdateFunction<K, V> updateF)
    {
        assert size > 0;
        assert level >= 0;
        if (level == 0)
            return buildLeaf(source, iterFunc, size, startIdx, updateF);

        // calcuate child num: (size - (childNum - 1)) / maxChildSize <= childNum
        int childNum = size / (TREE_SIZE[level - 1] + 1) + 1;

        V[] values = (V[]) new Object[childNum * 2];
        if (updateF != UpdateFunction.<K>noOp())
            updateF.allocated(ObjectSizes.sizeOfArray(values));

        int[] indexOffsets = new int[childNum];
        int childPos = childNum - 1;

        int index = 0;
        for (int i = 0; i < childNum - 1; i++)
        {
            // Calculate the next childSize by splitting the remaining values to the remaining child nodes.
            // The performance could be improved by pre-compute the childSize (see #9989 comments).
            int childSize = (size - index) / (childNum - i);
            // Build the tree with inorder traversal
            values[childPos + i] = (V) buildInternal(source, iterFunc, childSize, level - 1, startIdx + index, updateF);
            index += childSize;
            indexOffsets[i] = index;

            K k = iterFunc.nextAt(source, startIdx + index);
            values[i] = updateF.apply(k);
            index++;
        }

        values[childPos + childNum - 1] = (V) buildInternal(source, iterFunc, size - index, level - 1, startIdx + index, updateF);
        indexOffsets[childNum - 1] = size;

        values[childPos + childNum] = (V) indexOffsets;

        return values;
    }

