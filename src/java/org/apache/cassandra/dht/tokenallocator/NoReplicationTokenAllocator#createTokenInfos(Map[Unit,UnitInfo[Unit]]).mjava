    /**
     * Construct the token ring as a CircularList of TokenInfo,
     * and populate the ownership of the UnitInfo's provided
     */
    private TokenInfo<Unit> createTokenInfos(Map<Unit, UnitInfo<Unit>> units)
    {
        if (units.isEmpty())
            return null;

        // build the circular list
        TokenInfo<Unit> prev = null;
        TokenInfo<Unit> first = null;
        for (Map.Entry<Token, Unit> en : sortedTokens.entrySet())
        {
            Token t = en.getKey();
            UnitInfo<Unit> ni = units.get(en.getValue());
            TokenInfo<Unit> ti = new TokenInfo<>(t, ni);
            first = ti.insertAfter(first, prev);
            prev = ti;
        }

        TokenInfo<Unit> curr = first;
        tokensInUnits.clear();
        sortedUnits.clear();
        do
        {
            populateTokenInfoAndAdjustUnit(curr);
            curr = curr.next;
        } while (curr != first);

        for (UnitInfo<Unit> unitInfo : units.values())
        {
            sortedUnits.add(new Weighted<UnitInfo>(unitInfo.ownership, unitInfo));
        }

        return first;
    }

