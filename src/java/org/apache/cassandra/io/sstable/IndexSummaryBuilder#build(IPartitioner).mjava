    public IndexSummary build(IPartitioner partitioner)
    {
        assert keys != null && keys.size() > 0;
        assert keys.size() == positions.size();

        Memory memory = Memory.allocate(offheapSize + (keys.size() * 4));
        int idxPosition = 0;
        int keyPosition = keys.size() * 4;
        for (int i = 0; i < keys.size(); i++)
        {
            memory.setInt(idxPosition, keyPosition);
            idxPosition += TypeSizes.NATIVE.sizeof(keyPosition);

            byte[] temp = keys.get(i);
            memory.setBytes(keyPosition, temp, 0, temp.length);
            keyPosition += temp.length;
            long tempPosition = positions.get(i);
            memory.setLong(keyPosition, tempPosition);
            keyPosition += TypeSizes.NATIVE.sizeof(tempPosition);
        }
        return new IndexSummary(partitioner, memory, keys.size(), indexInterval);
    }

