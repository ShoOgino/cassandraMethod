    @Test
    public void testRequestResponse() throws InterruptedException, ExecutionException
    {
        // echo message that we like to mock as incoming reply for outgoing echo message
        MessageIn<EchoMessage> echoMessageIn = MessageIn.create(FBUtilities.getBroadcastAddress(),
                EchoMessage.instance,
                Collections.emptyMap(),
                MessagingService.Verb.ECHO,
                MessagingService.current_version
        );
        MockMessagingSpy spy = MockMessagingService
                .when(
                        all(
                                to(FBUtilities.getBroadcastAddress()),
                                verb(MessagingService.Verb.ECHO)
                        )
                )
                .respond(echoMessageIn);

        MessageOut<EchoMessage> echoMessageOut = new MessageOut<>(MessagingService.Verb.ECHO, EchoMessage.instance, EchoMessage.serializer);
        MessagingService.instance().sendRR(echoMessageOut, FBUtilities.getBroadcastAddress(), new IAsyncCallback()
        {
            public void response(MessageIn msg)
            {
                assertEquals(MessagingService.Verb.ECHO, msg.verb);
                assertEquals(echoMessageIn.payload, msg.payload);
            }

            public boolean isLatencyForSnitch()
            {
                return false;
            }
        });

        // we must have intercepted the outgoing message at this point
        MessageOut<?> msg = spy.captureMessageOut().get();
        assertEquals(1, spy.messagesIntercepted);
        assertTrue(msg == echoMessageOut);

        // and return a mocked response
        assertEquals(1, spy.mockedMessageResponses);
    }

