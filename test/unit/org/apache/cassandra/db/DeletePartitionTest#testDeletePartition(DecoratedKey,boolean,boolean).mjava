    public void testDeletePartition(DecoratedKey key, boolean flushBeforeRemove, boolean flushAfterRemove)
    {
        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
        ColumnDefinition column = store.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));

        // write
        new RowUpdateBuilder(store.metadata, 0, key.getKey())
                .clustering("Column1")
                .add("val", "asdf")
                .build()
                .applyUnsafe();

        // validate that data's written
        FilteredPartition partition = Util.getOnlyPartition(Util.cmd(store, key).build());
        assertTrue(partition.rowCount() > 0);
        Row r = partition.iterator().next();
        assertTrue(r.getCell(column).value().equals(ByteBufferUtil.bytes("asdf")));

        if (flushBeforeRemove)
            store.forceBlockingFlush();

        // delete the partition
        new Mutation(KEYSPACE1, key)
                .add(PartitionUpdate.fullPartitionDelete(store.metadata, key, 0, FBUtilities.nowInSeconds()))
                .applyUnsafe();

        if (flushAfterRemove)
            store.forceBlockingFlush();

        // validate removal
        ImmutableBTreePartition partitionUnfiltered = Util.getOnlyPartitionUnfiltered(Util.cmd(store, key).build());
        assertFalse(partitionUnfiltered.partitionLevelDeletion().isLive());
        assertFalse(partitionUnfiltered.iterator().hasNext());
    }

