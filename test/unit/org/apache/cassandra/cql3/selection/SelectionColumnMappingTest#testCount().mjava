    private void testCount() throws Throwable
    {
        // SELECT COUNT does not necessarily include any mappings, but it must always return
        // a singleton list from getColumnSpecifications() in order for the ResultSet.Metadata
        // to be constructed correctly:
        // * COUNT(*) / COUNT(1) do not generate any mappings, as no specific columns are referenced
        // * COUNT(foo) does generate a mapping from the 'system.count' column spec to foo
        ColumnSpecification count = columnSpecification("count", LongType.instance);
        SelectionColumnMapping expected = SelectionColumnMapping.newMapping()
                                                                .addMapping(count, null);

        SelectionColumns actual = extractColumnMappingFromSelect("SELECT COUNT(*) FROM %s");
        assertEquals(expected, actual);
        assertEquals(Collections.singletonList(count), actual.getColumnSpecifications());
        assertTrue(actual.getMappings().isEmpty());

        actual = extractColumnMappingFromSelect("SELECT COUNT(1) FROM %s");
        assertEquals(expected, actual);
        assertEquals(Collections.singletonList(count), actual.getColumnSpecifications());
        assertTrue(actual.getMappings().isEmpty());

        ColumnSpecification countV1 = columnSpecification("system.count(v1)", LongType.instance);
        expected = SelectionColumnMapping.newMapping()
                                         .addMapping(countV1, columnDefinition("v1"));
        actual = extractColumnMappingFromSelect("SELECT COUNT(v1) FROM %s");
        assertEquals(expected, actual);
        assertEquals(Collections.singletonList(countV1), actual.getColumnSpecifications());
        assertFalse(actual.getMappings().isEmpty());
    }

