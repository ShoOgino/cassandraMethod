    @Test
    public void testOverlapDifference2()
    {
        /*
            |A               |B               |C
         ---+----------------+----------------+------------------
         A  |=               |5,45            |0,10 40,50
         B  |                |=               |0,5 10,40 45,50
         C  |                |                |=

         A needs to stream (5, 45] from B, (0, 10], (40, 50) from C
         B needs to stream (5, 45] from A, (0, 5], (10, 40], (45, 50] from C
         C needs to stream (0, 10], (40,50] from A, (0,5], (10,40], (45,50] from B
         A == B on (0, 5], (45, 50]
         A == C on (10, 40]
         B == C on (5, 10], (40, 45]
         */

        Map<InetAddressAndPort, HostDifferences> differences = new HashMap<>();
        addDifference(A, differences, B, list(range(5, 45)));
        addDifference(A, differences, C, list(range(0, 10), range(40,50)));
        addDifference(B, differences, C, list(range(0, 5), range(10,40), range(45,50)));

        DifferenceHolder differenceHolder = new DifferenceHolder(differences);
        Map<InetAddressAndPort, IncomingRepairStreamTracker> tracker = ReduceHelper.createIncomingRepairStreamTrackers(differenceHolder);

        Map<Range<Token>, StreamFromOptions> ranges = tracker.get(A).getIncoming();
        assertEquals(5, ranges.size());

        assertEquals(set(set(C)), ranges.get(range(0, 5)).allStreams());
        assertEquals(set(set(B, C)), ranges.get(range(5, 10)).allStreams());
        assertEquals(set(set(B)), ranges.get(range(10, 40)).allStreams());
        assertEquals(set(set(B, C)), ranges.get(range(40, 45)).allStreams());
        assertEquals(set(set(C)), ranges.get(range(45, 50)).allStreams());

        ranges = tracker.get(B).getIncoming();
        assertEquals(5, ranges.size());
        assertEquals(set(set(C)), ranges.get(range(0, 5)).allStreams());
        assertEquals(set(set(A)), ranges.get(range(5, 10)).allStreams());
        assertEquals(set(set(A, C)), ranges.get(range(10, 40)).allStreams());
        assertEquals(set(set(A)), ranges.get(range(40, 45)).allStreams());
        assertEquals(set(set(C)), ranges.get(range(45, 50)).allStreams());

        ranges = tracker.get(C).getIncoming();
        assertEquals(5, ranges.size());
        assertEquals(set(set(A, B)), ranges.get(range(0, 5)).allStreams());
        assertEquals(set(set(A)), ranges.get(range(5, 10)).allStreams());
        assertEquals(set(set(B)), ranges.get(range(10, 40)).allStreams());
        assertEquals(set(set(A)), ranges.get(range(40, 45)).allStreams());
        assertEquals(set(set(A,B)), ranges.get(range(45, 50)).allStreams());
        ImmutableMap<InetAddressAndPort, HostDifferences> reduced = ReduceHelper.reduce(differenceHolder, (x, y) -> y);

        assertNoOverlap(A, reduced.get(A), list(range(0, 50)));
        assertNoOverlap(B, reduced.get(B), list(range(0, 50)));
        assertNoOverlap(C, reduced.get(C), list(range(0, 50)));
    }

