        /**
         * Connect, log in and set up the correct comparator.
         */
        private void maybeConnect() throws InvalidRequestException, TException, AuthenticationException, 
            AuthorizationException, NotFoundException, InstantiationException, IllegalAccessException, 
            ClassNotFoundException, NoSuchFieldException
        {
            // only need to connect once
            if (socket != null && socket.isOpen())
                return;

            // create connection using thrift
            String location = getLocation();
            socket = new TSocket(location, DatabaseDescriptor.getRpcPort());
            TBinaryProtocol binaryProtocol = new TBinaryProtocol(socket, false, false);
            client = new Cassandra.Client(binaryProtocol);
            socket.open();
            
            // log in
            client.set_keyspace(keyspace);
            if (!(DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator))
            {
                client.login(authRequest);
            }
            
            // Get the keyspace information to get the comparator
            if (comparator == null)
            {
                Map<String, Map<String,String>> desc = client.describe_keyspace(keyspace);
                Map<String,String> ksProps = desc.get(cfName);
                String compClass = ksProps.get("CompareWith");
                // Get the singleton instance of the AbstractType subclass
                Class<?> c = Class.forName(compClass);
                comparator = (AbstractType) c.getField("instance").get(c);
            }
        }

