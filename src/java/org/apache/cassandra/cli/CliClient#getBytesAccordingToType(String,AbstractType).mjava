    /**
     * Converts object represented as string into byte[] according to comparator
     * @param object - object to covert into byte array
     * @param comparator - comparator used to convert object
     * @return byte[] - object in the byte array representation
     * @throws UnsupportedEncodingException - raised but String.getBytes(encoding)
     */
    private byte[] getBytesAccordingToType(String object, AbstractType comparator) throws UnsupportedEncodingException
    {
        if (comparator instanceof LongType)
        {
            long longType;
            try
            {
                longType = Long.valueOf(object);
            }
            catch (Exception e)
            {
                throw new RuntimeException("'" + object + "' could not be translated into a LongType.");
            }

            return FBUtilities.toByteArray(longType);
        }
        else if (comparator instanceof IntegerType)
        {
            BigInteger integerType;

            try
            {
                integerType =  new BigInteger(object);
            }
            catch (Exception e)
            {
                throw new RuntimeException("'" + object + "' could not be translated into an IntegerType.");
            }

            return integerType.toByteArray();
        }
        else if (comparator instanceof AsciiType)
        {
            return object.getBytes("US-ASCII");
        }
        else
        {
            return object.getBytes("UTF-8");
        }
    }

