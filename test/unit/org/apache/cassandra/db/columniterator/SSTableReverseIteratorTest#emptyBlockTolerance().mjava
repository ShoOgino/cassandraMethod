    /**
     * SSTRI shouldn't bail out if it encounters empty blocks (due to dropped columns)
     */
    @Test
    public void emptyBlockTolerance()
    {
        String table = "empty_block_tolerance";
        QueryProcessor.executeInternal(String.format("CREATE TABLE %s.%s (k INT, c int, v1 blob, v2 blob, primary key (k, c))", KEYSPACE, table));
        ColumnFamilyStore tbl = Keyspace.open(KEYSPACE).getColumnFamilyStore(table);
        assert tbl != null;

        int key = 100;

        QueryProcessor.executeInternal(String.format("UPDATE %s.%s SET v1=?, v2=? WHERE k=? AND c=?", KEYSPACE, table), bytes(8), bytes(8), key, 0);
        QueryProcessor.executeInternal(String.format("UPDATE %s.%s SET v1=? WHERE k=? AND c=?", KEYSPACE, table), bytes(0x20000), key, 1);
        QueryProcessor.executeInternal(String.format("UPDATE %s.%s SET v1=? WHERE k=? AND c=?", KEYSPACE, table), bytes(0x20000), key, 2);
        QueryProcessor.executeInternal(String.format("UPDATE %s.%s SET v1=? WHERE k=? AND c=?", KEYSPACE, table), bytes(0x20000), key, 3);

        tbl.forceBlockingFlush();
        SSTableReader sstable = Iterables.getOnlyElement(tbl.getLiveSSTables());
        DecoratedKey dk = tbl.getPartitioner().decorateKey(Int32Type.instance.decompose(key));
        RowIndexEntry indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
        Assert.assertTrue(indexEntry.isIndexed());
        Assert.assertTrue(indexEntry.columnsIndex().size() > 2);

        // drop v1 so the first 2 index blocks only contain empty unfiltereds
        QueryProcessor.executeInternal(String.format("ALTER TABLE %s.%s DROP v1", KEYSPACE, table));

        UntypedResultSet result = QueryProcessor.executeInternal(String.format("SELECT v2 FROM %s.%s WHERE k=? ORDER BY c DESC", KEYSPACE, table), key);
        Assert.assertEquals(1, result.size());

    }

