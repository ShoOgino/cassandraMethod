    @Test
    public void testFollowNRollArgs()
    {
            Lists.cartesianProduct(Arrays.asList("-f", "--follow"), Arrays.asList("-r", "--roll_cycle")).forEach(arg -> {
                try (ObservableTool tool = ToolRunner.invokeAsync(toolPath,
                                                             path.toAbsolutePath().toString(),
                                                             arg.get(0),
                                                             arg.get(1),
                                                             "TEST_SECONDLY");)
                {
                    // Tool is running in the background 'following' so wait and then we have to kill it
                    try
                    {
                        Thread.sleep(3000);
                    }
                    catch(InterruptedException e)
                    {
                        Thread.currentThread().interrupt();
                    }
                    assertTrue(tool.getPartialStdout(), tool.getPartialStdout().isEmpty());
                    // @IgnoreAssert see CASSANDRA-16021
    //                assertTrue(tool.getCleanedStderr(),
    //                           tool.getCleanedStderr().isEmpty() // j8 is fine
    //                           || tool.getCleanedStderr().startsWith("WARNING: An illegal reflective access operation has occurred")); //j11 throws an error
                }
        });
    }

