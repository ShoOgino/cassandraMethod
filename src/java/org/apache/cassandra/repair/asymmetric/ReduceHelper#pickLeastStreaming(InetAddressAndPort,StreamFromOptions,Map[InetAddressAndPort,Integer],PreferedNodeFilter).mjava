    // greedily pick the nodes doing the least amount of streaming
    private static Collection<InetAddressAndPort> pickLeastStreaming(InetAddressAndPort streamingNode,
                                                              StreamFromOptions toStreamFrom,
                                                              Map<InetAddressAndPort, Integer> outgoingStreamCounts,
                                                              PreferedNodeFilter filter)
    {
        Set<InetAddressAndPort> retSet = new HashSet<>();
        for (Set<InetAddressAndPort> toStream : toStreamFrom.allStreams())
        {
            InetAddressAndPort candidate = null;
            Set<InetAddressAndPort> prefered = filter.apply(streamingNode, toStream);
            for (InetAddressAndPort node : prefered)
            {
                if (candidate == null || outgoingStreamCounts.getOrDefault(candidate, 0) > outgoingStreamCounts.getOrDefault(node, 0))
                {
                    candidate = node;
                }
            }
            // ok, found no prefered hosts, try all of them
            if (candidate == null)
            {
                for (InetAddressAndPort node : toStream)
                {
                    if (candidate == null || outgoingStreamCounts.getOrDefault(candidate, 0) > outgoingStreamCounts.getOrDefault(node, 0))
                    {
                        candidate = node;
                    }
                }
            }
            assert candidate != null;
            outgoingStreamCounts.put(candidate, outgoingStreamCounts.getOrDefault(candidate, 0) + 1);
            retSet.add(candidate);
        }
        return retSet;
    }

