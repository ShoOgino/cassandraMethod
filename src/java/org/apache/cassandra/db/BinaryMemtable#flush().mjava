    /*
     * 
    */
    void flush() throws IOException
    {
        if ( columnFamilies_.size() == 0 )
            return;

        /*
         * Use the SSTable to write the contents of the TreeMap
         * to disk.
        */

        String path;
        SSTableWriter writer;
        ColumnFamilyStore cfStore = Table.open(table_).getColumnFamilyStore(cfName_);
        List<String> keys = new ArrayList<String>( columnFamilies_.keySet() );
        /*
            Adding a lock here so data directories are evenly used. By default currentIndex
            is incremented, not an AtomicInteger. Let's fix this!
         */
        lock_.lock();
        try
        {
            path = cfStore.getTempSSTablePath();
            writer = new SSTableWriter(path, keys.size(), StorageService.getPartitioner());
        }
        finally
        {
            lock_.unlock();
        }

        final IPartitioner partitioner = StorageService.getPartitioner();
        final Comparator<String> dc = partitioner.getDecoratedKeyComparator();
        Collections.sort(keys, dc);


        /* Use this BloomFilter to decide if a key exists in a SSTable */
        for ( String key : keys )
        {           
            byte[] bytes = columnFamilies_.get(key);
            if ( bytes.length > 0 )
            {            	
                /* Now write the key and value to disk */
                writer.append(key, bytes);
            }
        }
        cfStore.storeLocation(writer.closeAndOpenReader(DatabaseDescriptor.getKeysCachedFraction(table_)));
        columnFamilies_.clear();       
    }

