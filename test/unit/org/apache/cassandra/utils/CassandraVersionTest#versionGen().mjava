    private static Gen<CassandraVersion> versionGen()
    {
        Gen<Integer> positive = SourceDSL.integers().allPositive();
        Gen<Integer> hotfixGen = positive.mix(Generate.constant(CassandraVersion.NO_HOTFIX));
        Gen<Integer> smallSizes = SourceDSL.integers().between(0, 5);
        Gen<String> word = Generators.regexWord(SourceDSL.integers().between(1, 100)); // empty isn't allowed while parsing since \w+ is used, so must be at least 1
        return td -> {
            int major = positive.generate(td);
            int minor = positive.generate(td);
            int patch = positive.generate(td);

            int hotfix = hotfixGen.generate(td);

            int numPreRelease = smallSizes.generate(td);
            String[] preRelease = numPreRelease == 0 ? null : new String[numPreRelease];
            for (int i = 0; i < numPreRelease; i++)
                preRelease[i] = word.generate(td);

            int numBuild = smallSizes.generate(td);
            String[] build = numBuild == 0 ? null : new String[numBuild];
            for (int i = 0; i < numBuild; i++)
                build[i] = word.generate(td);
            return new CassandraVersion(major, minor, patch, hotfix, preRelease, build);
        };
    }

