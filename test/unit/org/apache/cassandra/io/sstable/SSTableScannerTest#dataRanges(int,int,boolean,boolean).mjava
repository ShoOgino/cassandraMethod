    private static Iterable<DataRange> dataRanges(int start, int end, boolean inclusiveStart, boolean inclusiveEnd)
    {
        List<DataRange> ranges = new ArrayList<>();
        if (start == end + 1)
        {
            assert !inclusiveStart && inclusiveEnd;
            ranges.add(dataRange(min(start), false, max(end), true));
            ranges.add(dataRange(min(start), false, min(end + 1), true));
            ranges.add(dataRange(max(start - 1), false, max(end), true));
            ranges.add(dataRange(dk(start - 1), false, dk(start - 1), true));
        }
        else
        {
            for (RowPosition s : starts(start, inclusiveStart))
            {
                for (RowPosition e : ends(end, inclusiveEnd))
                {
                    if (end < start && e.compareTo(s) > 0)
                        continue;
                    if (!isEmpty(new AbstractBounds.Boundary<>(s, inclusiveStart), new AbstractBounds.Boundary<>(e, inclusiveEnd)))
                        continue;
                    ranges.add(dataRange(s, inclusiveStart, e, inclusiveEnd));
                }
            }
        }
        return ranges;
    }

