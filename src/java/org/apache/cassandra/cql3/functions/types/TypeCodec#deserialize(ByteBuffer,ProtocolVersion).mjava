    /**
     * Deserialize the given {@link ByteBuffer} instance according to the CQL type handled by this
     * codec.
     *
     * <p>Implementation notes:
     *
     * <ol>
     * <li>Null or empty buffers should be gracefully handled and no exception should be raised;
     * these should be considered as the equivalent of a NULL CQL value and, in most cases,
     * should map to {@code null} or a default value for the corresponding Java type, if
     * applicable;
     * <li>Codecs for CQL collection types should clearly document whether they return immutable
     * collections or not (note that the driver's default collection codecs return
     * <em>mutable</em> collections);
     * <li>Codecs for CQL collection types should avoid returning {@code null}; they should return
     * empty collections instead (the driver's default collection codecs all comply with this
     * rule).
     * <li>The provided {@link ByteBuffer} should never be consumed by read operations that modify
     * its current position; if necessary, {@link ByteBuffer#duplicate()} duplicate} it before
     * consuming.
     * </ol>
     *
     * @param bytes           A {@link ByteBuffer} instance containing the serialized form of T; may be {@code
     *                        null} or empty.
     * @param protocolVersion the protocol version to use when serializing {@code bytes}. In most
     *                        cases, the proper value to provide for this argument is the value returned by {@code
     *                        ProtocolOptions#getProtocolVersion} (which is the protocol version in use by the driver).
     * @return An instance of T
     * @throws InvalidTypeException if the given {@link ByteBuffer} instance cannot be deserialized
     */
    public abstract T deserialize(ByteBuffer bytes, ProtocolVersion protocolVersion)
    throws InvalidTypeException;

