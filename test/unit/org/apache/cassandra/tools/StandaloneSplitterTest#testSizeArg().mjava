    @Test
    public void testSizeArg()
    {
        Arrays.asList(Pair.of("-s", ""), Pair.of("-s", "w"), Pair.of("--size", ""), Pair.of("--size", "w"))
              .forEach(arg -> {
                  ToolResult tool = ToolRunner.invokeClass(StandaloneSplitter.class,
                                                           arg.getLeft(),
                                                           arg.getRight(),
                                                           "mockFile");
                  assertEquals(-1, tool.getExitCode());
                  Assertions.assertThat(tool.getStderr()).contains(NumberFormatException.class.getSimpleName());
              });

        Arrays.asList(Pair.of("-s", "0"),
                      Pair.of("-s", "1000"),
                      Pair.of("-s", "-1"),
                      Pair.of("--size", "0"),
                      Pair.of("--size", "1000"),
                      Pair.of("--size", "-1"))
              .forEach(arg -> {
                  ToolResult tool = ToolRunner.invokeClass(StandaloneSplitter.class,
                                                                  arg.getLeft(),
                                                                  arg.getRight(),
                                                                  "mockFile");
                  assertThat("Arg: [" + arg + "]", tool.getStdout(), CoreMatchers.containsStringIgnoringCase("Skipping inexisting file mockFile"));
                  assertThat("Arg: [" + arg + "]", tool.getCleanedStderr(), CoreMatchers.containsStringIgnoringCase("No valid sstables to split"));
                  assertEquals(1, tool.getExitCode());
                  assertCorrectEnvPostTest();
              });
    }

