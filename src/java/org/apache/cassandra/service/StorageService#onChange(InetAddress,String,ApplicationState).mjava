    /*
     * onChange only ever sees one ApplicationState piece change at a time, so we perform a kind of state machine here.
     * We are concerned with two events: knowing the token associated with an enpoint, and knowing its operation mode.
     * Nodes can start in either bootstrap or normal mode, and from bootstrap mode can change mode to normal.
     * A node in bootstrap mode needs to have pendingranges set in TokenMetadata; a node in normal mode
     * should instead be part of the token ring.
     */
    public void onChange(InetAddress endpoint, String stateName, ApplicationState state)
    {
        if (STATE_BOOTSTRAPPING.equals(stateName))
        {
            Token token = getPartitioner().getTokenFactory().fromString(state.getValue());
            if (logger_.isDebugEnabled())
                logger_.debug(endpoint + " state bootstrapping, token " + token);
            tokenMetadata_.addBootstrapToken(token, endpoint);
            calculatePendingRanges();
        }
        else if (STATE_NORMAL.equals(stateName))
        {
            Token token = getPartitioner().getTokenFactory().fromString(state.getValue());
            if (logger_.isDebugEnabled())
                logger_.debug(endpoint + " state normal, token " + token);
            tokenMetadata_.updateNormalToken(token, endpoint);
            calculatePendingRanges();
            if (!isClientMode)
                SystemTable.updateToken(endpoint, token);
        }
        else if (STATE_LEAVING.equals(stateName))
        {
            Token token = getPartitioner().getTokenFactory().fromString(state.getValue());
            assert tokenMetadata_.getToken(endpoint).equals(token);
            tokenMetadata_.addLeavingEndPoint(endpoint);
            calculatePendingRanges();
        }
        else if (STATE_LEFT.equals(stateName))
        {
            // STATE_LEFT state is of form (REMOVE_TOKEN|LEFT_NORMALLY)<StateDelimiter><token>
            String stateValue = state.getValue();
            int index = stateValue.indexOf(StateDelimiter);
            assert (index != -1);
            String typeOfState = stateValue.substring(0, index);
            Token token = getPartitioner().getTokenFactory().fromString(stateValue.substring(index + 1));

            if (typeOfState.equals(LEFT_NORMALLY))
            {
                if (tokenMetadata_.isMember(endpoint))
                {
                    if (logger_.isDebugEnabled())
                        logger_.debug(endpoint + " state left, token " + token);
                    assert tokenMetadata_.getToken(endpoint).equals(token);
                    tokenMetadata_.removeEndpoint(endpoint);
                    calculatePendingRanges();
                }
            }
            else
            {
                assert (typeOfState.equals(REMOVE_TOKEN));
                InetAddress endPointThatLeft = tokenMetadata_.getEndPoint(token);
                if (logger_.isDebugEnabled())
                    logger_.debug("Token " + token + " removed manually (endpoint was " + ((endPointThatLeft == null) ? "unknown" : endPointThatLeft) + ")");
                if (endPointThatLeft != null)
                {
                    restoreReplicaCount(endPointThatLeft);
                    tokenMetadata_.removeEndpoint(endPointThatLeft);
                    calculatePendingRanges();
                }
            }
        }
    }

