        private Segment[] createSegments(String path, long length)
        {
            RandomAccessFile raf;
            try
            {
                raf = new RandomAccessFile(path, "r");
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }

            // if we're early finishing a range that doesn't span multiple segments, but the finished file now does,
            // we remove these from the end (we loop incase somehow this spans multiple segments, but that would
            // be a loco dataset
            while (length < boundaries.get(boundaries.size() - 1))
                boundaries.remove(boundaries.size() -1);

            // add a sentinel value == length
            List<Long> boundaries = new ArrayList<>(this.boundaries);
            if (length != boundaries.get(boundaries.size() - 1))
                boundaries.add(length);


            int segcount = boundaries.size() - 1;
            Segment[] segments = new Segment[segcount];

            try
            {
                for (int i = 0; i < segcount; i++)
                {
                    long start = boundaries.get(i);
                    long size = boundaries.get(i + 1) - start;
                    MappedByteBuffer segment = size <= MAX_SEGMENT_SIZE
                                               ? raf.getChannel().map(FileChannel.MapMode.READ_ONLY, start, size)
                                               : null;
                    segments[i] = new Segment(start, segment);
                }
            }
            catch (IOException e)
            {
                throw new FSReadError(e, path);
            }
            finally
            {
                FileUtils.closeQuietly(raf);
            }
            return segments;
        }

