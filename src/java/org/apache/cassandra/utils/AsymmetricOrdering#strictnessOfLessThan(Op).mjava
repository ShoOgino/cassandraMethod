    @Inline
    // this value, used as the right operand to a less than operator for the result
    // of a compare() makes its behaviour either strict (<) or not strict (<=).
    // a value of 1 is not strict, whereas 0 is strict
    private static int strictnessOfLessThan(Op op)
    {
        switch (op)
        {
            case FLOOR: case HIGHER:

            // { a[lb] <= v ^ a[ub] > v }
            return 1;

            // { a[m] >  v   ==>   a[ub] >  v   ==>   a[lb] <= v ^ a[ub] > v }
            // { a[m] <= v   ==>   a[lb] <= v   ==>   a[lb] <= v ^ a[ub] > v }

            case CEIL: case LOWER:

            // { a[lb] < v ^ a[ub] >= v }

            return 0;

            // { a[m] >= v   ==>   a[ub] >= v   ==>   a[lb] < v ^ a[ub] >= v }
            // { a[m] <  v   ==>   a[lb] <  v   ==>   a[lb] < v ^ a[ub] >= v }
        }

        throw new IllegalStateException();
    }

