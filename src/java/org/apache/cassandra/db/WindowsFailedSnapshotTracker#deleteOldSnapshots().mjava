    public static void deleteOldSnapshots()
    {
        if (new File(TODELETEFILE).exists())
        {
            try
            {
                try (BufferedReader reader = new BufferedReader(new FileReader(TODELETEFILE)))
                {
                    String snapshotDirectory;
                    while ((snapshotDirectory = reader.readLine()) != null)
                    {
                        File f = new File(snapshotDirectory);

                        // Skip folders that aren't a subset of temp or a data folder. We don't want people to accidentally
                        // delete something important by virtue of adding something invalid to the .toDelete file.
                        boolean validFolder = FileUtils.isSubDirectory(new File(System.getenv("TEMP")), f);
                        for (String s : DatabaseDescriptor.getAllDataFileLocations())
                            validFolder |= FileUtils.isSubDirectory(new File(s), f);

                        if (!validFolder)
                        {
                            logger.warn("Skipping invalid directory found in .toDelete: {}. Only %TEMP% or data file subdirectories are valid.", f);
                            continue;
                        }

                        // Could be a non-existent directory if deletion worked on previous JVM shutdown.
                        if (f.exists())
                        {
                            logger.warn("Discovered obsolete snapshot. Deleting directory [{}]", snapshotDirectory);
                            FileUtils.deleteRecursive(new File(snapshotDirectory));
                        }
                    }
                }

                // Only delete the old .toDelete file if we succeed in deleting all our known bad snapshots.
                Files.delete(Paths.get(TODELETEFILE));
            }
            catch (IOException e)
            {
                logger.warn("Failed to open {}. Obsolete snapshots from previous runs will not be deleted.", TODELETEFILE);
                logger.warn("Exception: " + e);
            }
        }

        try
        {
            _failedSnapshotFile = new PrintWriter(new FileWriter(TODELETEFILE, true));
        }
        catch (IOException e)
        {
            throw new RuntimeException(String.format("Failed to create failed snapshot tracking file [%s]. Aborting", TODELETEFILE));
        }
    }

