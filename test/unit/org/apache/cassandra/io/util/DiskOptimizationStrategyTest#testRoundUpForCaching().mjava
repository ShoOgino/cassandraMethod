    @Test
    public void testRoundUpForCaching()
    {
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(-1, true));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(0, true));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(1, true));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4095, true));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4096, true));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(4097, true));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(4098, true));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(8192, true));
        assertEquals(16384, DiskOptimizationStrategy.roundForCaching(8193, true));
        assertEquals(16384, DiskOptimizationStrategy.roundForCaching(12288, true));
        assertEquals(16384, DiskOptimizationStrategy.roundForCaching(16384, true));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(65536, true));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(65537, true));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(131072, true));

        for (int cs = 4096; cs < 65536; cs <<= 1) // 4096, 8192, 12288, ..., 65536
        {
            for (int i = (cs - 4095); i <= cs; i++) // 1 -> 4096, 4097 -> 8192, ...
            {
                assertEquals(cs, DiskOptimizationStrategy.roundForCaching(i, true));
            }
        }
    }

