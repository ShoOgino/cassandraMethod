        public PartitionUpdate deserialize(DataInputPlus in, int version, SerializationHelper.Flag flag, DecoratedKey key) throws IOException
        {
            if (version < MessagingService.VERSION_30)
            {
                assert key != null;

                // This is only used in mutation, and mutation have never allowed "null" column families
                boolean present = in.readBoolean();
                assert present;

                CFMetaData metadata = CFMetaData.serializer.deserialize(in, version);
                LegacyLayout.LegacyDeletionInfo info = LegacyLayout.LegacyDeletionInfo.serializer.deserialize(metadata, in, version);
                int size = in.readInt();
                Iterator<LegacyLayout.LegacyCell> cells = LegacyLayout.deserializeCells(metadata, in, flag, size);
                SerializationHelper helper = new SerializationHelper(version, flag);
                try (UnfilteredRowIterator iterator = LegacyLayout.onWireCellstoUnfilteredRowIterator(metadata, key, info, cells, false, helper))
                {
                    return UnfilteredRowIterators.toUpdate(iterator);
                }
            }

            assert key == null; // key is only there for the old format

            UnfilteredRowIteratorSerializer.Header h = UnfilteredRowIteratorSerializer.serializer.deserializeHeader(in, version, flag);
            if (h.isEmpty)
                return emptyUpdate(h.metadata, h.key);

            assert !h.isReversed;
            assert h.rowEstimate >= 0;
            PartitionUpdate upd = new PartitionUpdate(h.metadata,
                                                      h.key,
                                                      new DeletionInfo(h.partitionDeletion),
                                                      new RowDataBlock(h.sHeader.columns().regulars, h.rowEstimate, false, h.metadata.isCounter()),
                                                      h.sHeader.columns(),
                                                      h.rowEstimate);

            upd.staticRow = h.staticRow;

            RangeTombstoneMarker.Writer markerWriter = upd.markerWriter(false);
            UnfilteredRowIteratorSerializer.serializer.deserialize(in, new SerializationHelper(version, flag), h.sHeader, upd.writer(), markerWriter);

            // Mark sorted after we're read it all since that's what we use in the writer() method to detect bad uses
            upd.isSorted = true;

            return upd;
        }

