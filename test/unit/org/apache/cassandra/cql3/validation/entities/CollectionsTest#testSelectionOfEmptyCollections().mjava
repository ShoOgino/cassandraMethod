    @Test
    public void testSelectionOfEmptyCollections() throws Throwable
    {
        createTable("CREATE TABLE %s (k int PRIMARY KEY, m frozen<map<text, int>>, s frozen<set<int>>)");

        execute("INSERT INTO %s(k) VALUES (0)");
        execute("INSERT INTO %s(k, m, s) VALUES (1, {}, {})");
        execute("INSERT INTO %s(k, m, s) VALUES (2, ?, ?)", map(), set());
        execute("INSERT INTO %s(k, m, s) VALUES (3, {'2':2}, {2})");

        beforeAndAfterFlush(() ->
        {
            assertRows(execute("SELECT m, s FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 0"), row(null, null));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 1"), row(map(), set()));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 1"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 1"), row(map(), set()));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 1"), row(map(), set()));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 2"), row(map(), set()));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 2"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 2"), row(map(), set()));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 2"), row(map(), set()));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 3"), row(map("2", 2), set(2)));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 3"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 3"), row(map(), set()));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 3"), row(map(), set()));
        });

        createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, int>, s set<int>)");

        execute("INSERT INTO %s(k) VALUES (0)");
        execute("INSERT INTO %s(k, m, s) VALUES (1, {}, {})");
        execute("INSERT INTO %s(k, m, s) VALUES (2, ?, ?)", map(), set());
        execute("INSERT INTO %s(k, m, s) VALUES (3, {'2':2}, {2})");

        beforeAndAfterFlush(() ->
        {
            assertRows(execute("SELECT m, s FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 0"), row(null, null));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 0"), row(null, null));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 1"), row(null, null));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 1"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 1"), row(null, null));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 1"), row(null, null));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 2"), row(null, null));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 2"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 2"), row(null, null));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 2"), row(null, null));

            assertRows(execute("SELECT m, s FROM %s WHERE k = 3"), row(map("2", 2), set(2)));
            assertRows(execute("SELECT m['0'], s[0] FROM %s WHERE k = 3"), row(null, null));
            assertRows(execute("SELECT m['0'..'1'], s[0..1] FROM %s WHERE k = 3"), row(null, null));
            assertRows(execute("SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 3"), row(null, null));
        });
    }

