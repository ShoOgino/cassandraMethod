    public void read() throws IOException
    {
        logger.debug("Receiving stream");
        InetSocketAddress remoteAddress = (InetSocketAddress)socketChannel.socket().getRemoteSocketAddress();
        if (logger.isDebugEnabled())
          logger.debug("Creating file for " + pendingFile.getFilename());
        FileOutputStream fos = new FileOutputStream(pendingFile.getFilename(), true);
        FileChannel fc = fos.getChannel();

        long offset = 0;
        try
        {
            Pair<Long,Long> section;
            while ((section = pendingFile.currentSection()) != null)
            {
                long length = Math.min(FileStreamTask.CHUNK_SIZE, section.right - section.left);
                long bytesRead = fc.transferFrom(socketChannel, offset, length);
                // offset in the remote file
                pendingFile.update(section.left + bytesRead);
                // offset in the local file
                offset += bytesRead;
            }
        }
        catch (IOException ex)
        {
            logger.debug("Receiving stream: recovering from IO error");
            /* Ask the source node to re-stream this file. */
            streamStatus.setAction(FileStatus.Action.STREAM);
            handleFileStatus(remoteAddress.getAddress());
            /* Delete the orphaned file. */
            File file = new File(pendingFile.getFilename());
            file.delete();
            /* Reset our state. */
            pendingFile.update(0);
            throw ex;
        }
        finally
        {
            fc.close();
            StreamInManager.activeStreams.remove(remoteAddress.getAddress(), pendingFile);
        }

        if (logger.isDebugEnabled())
            logger.debug("Removing stream context " + pendingFile);
        streamStatus.setAction(FileStatus.Action.DELETE);
        handleFileStatus(remoteAddress.getAddress());
    }

