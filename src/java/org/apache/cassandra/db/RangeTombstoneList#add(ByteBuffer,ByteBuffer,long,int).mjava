    /**
     * Adds a new range tombstone.
     *
     * This method will be faster if the new tombstone sort after all the currently existing ones (this is a common use case), 
     * but it doesn't assume it.
     */
    public void add(ByteBuffer start, ByteBuffer end, long markedAt, int delTime)
    {
        if (isEmpty())
        {
            addInternal(0, start, end, markedAt, delTime);
            return;
        }

        int c = comparator.compare(starts[size-1], start);

        // Fast path if we add in sorted order
        if (c <= 0)
        {
            // Note that we may still overlap the last range
            insertFrom(size-1, start, end, markedAt, delTime);
        }
        else
        {
            int pos = Arrays.binarySearch(starts, 0, size, start, comparator);
            if (pos >= 0)
                insertFrom(pos, start, end, markedAt, delTime);
            else
                // Insertion point (-pos-1) is such start < start[-pos-1], so we should insert from the previous
                insertFrom(-pos-2, start, end, markedAt, delTime);
        }
    }

