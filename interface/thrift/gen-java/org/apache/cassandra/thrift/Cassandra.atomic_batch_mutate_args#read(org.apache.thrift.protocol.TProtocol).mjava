    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // MUTATION_MAP
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map147 = iprot.readMapBegin();
                this.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map147.size);
                for (int _i148 = 0; _i148 < _map147.size; ++_i148)
                {
                  ByteBuffer _key149; // required
                  Map<String,List<Mutation>> _val150; // required
                  _key149 = iprot.readBinary();
                  {
                    org.apache.thrift.protocol.TMap _map151 = iprot.readMapBegin();
                    _val150 = new HashMap<String,List<Mutation>>(2*_map151.size);
                    for (int _i152 = 0; _i152 < _map151.size; ++_i152)
                    {
                      String _key153; // required
                      List<Mutation> _val154; // required
                      _key153 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                        _val154 = new ArrayList<Mutation>(_list155.size);
                        for (int _i156 = 0; _i156 < _list155.size; ++_i156)
                        {
                          Mutation _elem157; // required
                          _elem157 = new Mutation();
                          _elem157.read(iprot);
                          _val154.add(_elem157);
                        }
                        iprot.readListEnd();
                      }
                      _val150.put(_key153, _val154);
                    }
                    iprot.readMapEnd();
                  }
                  this.mutation_map.put(_key149, _val150);
                }
                iprot.readMapEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

