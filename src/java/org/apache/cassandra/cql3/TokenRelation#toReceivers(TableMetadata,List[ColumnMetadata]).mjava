    /**
     * Returns the receivers for this relation.
     *
     * @param table the table meta data
     * @param columnDefs the column definitions
     * @return the receivers for the specified relation.
     * @throws InvalidRequestException if the relation is invalid
     */
    private static List<? extends ColumnSpecification> toReceivers(TableMetadata table,
                                                                   List<ColumnMetadata> columnDefs)
                                                                   throws InvalidRequestException
    {

        if (!columnDefs.equals(table.partitionKeyColumns()))
        {
            checkTrue(columnDefs.containsAll(table.partitionKeyColumns()),
                      "The token() function must be applied to all partition key components or none of them");

            checkContainsNoDuplicates(columnDefs, "The token() function contains duplicate partition key components");

            checkContainsOnly(columnDefs, table.partitionKeyColumns(), "The token() function must contains only partition key components");

            throw invalidRequest("The token function arguments must be in the partition key order: %s",
                                 Joiner.on(", ").join(ColumnMetadata.toIdentifiers(table.partitionKeyColumns())));
        }

        ColumnMetadata firstColumn = columnDefs.get(0);
        return Collections.singletonList(new ColumnSpecification(firstColumn.ksName,
                                                                 firstColumn.cfName,
                                                                 new ColumnIdentifier("partition key token", true),
                                                                 table.partitioner.getTokenValidator()));
    }

