    @Override
    public QueryResult executeWithPagingWithResult(String query, ConsistencyLevel consistencyLevelOrigin, int pageSize, Object... boundValues)
    {
        if (pageSize <= 0)
            throw new IllegalArgumentException("Page size should be strictly positive but was " + pageSize);

        return instance.sync(() -> {
            ClientState clientState = makeFakeClientState();
            ConsistencyLevel consistencyLevel = ConsistencyLevel.valueOf(consistencyLevelOrigin.name());
            CQLStatement prepared = QueryProcessor.getStatement(query, clientState);
            List<ByteBuffer> boundBBValues = new ArrayList<>();
            for (Object boundValue : boundValues)
            {
                boundBBValues.add(ByteBufferUtil.objectToBytes(boundValue));
            }

            prepared.validate(clientState);
            assert prepared instanceof SelectStatement : "Only SELECT statements can be executed with paging";

            SelectStatement selectStatement = (SelectStatement) prepared;

            QueryPager pager = selectStatement.getQuery(QueryOptions.create(toCassandraCL(consistencyLevel),
                                                                            boundBBValues,
                                                                            false,
                                                                            pageSize,
                                                                            null,
                                                                            null,
                                                                            ProtocolVersion.CURRENT,
                                                                            selectStatement.keyspace()),
                                                        FBUtilities.nowInSeconds())
                                              .getPager(null, ProtocolVersion.CURRENT);

            // Usually pager fetches a single page (see SelectStatement#execute). We need to iterate over all
            // of the results lazily.
            UntypedResultSet rs = UntypedResultSet.create(selectStatement, toCassandraCL(consistencyLevel), clientState, pager, pageSize);
            Iterator<Object[]> it = new Iterator<Object[]>() {
                Iterator<Object[]> iter = RowUtil.toObjects(rs);

                public boolean hasNext()
                {
                    // We have to make sure iterator is not running on main thread.
                    return instance.sync(() -> iter.hasNext()).call();
                }

                public Object[] next()
                {
                    return instance.sync(() -> iter.next()).call();
                }
            };
            return QueryResults.fromObjectArrayIterator(RowUtil.getColumnNames(rs.metadata()), it);
        }).call();
    }

