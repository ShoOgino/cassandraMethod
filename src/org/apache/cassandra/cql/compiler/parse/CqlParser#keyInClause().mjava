    // $ANTLR start keyInClause
    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:172:1: keyInClause : columnOrSuperColumnName K_IN '(' a+= stringVal ( ',' a+= stringVal )* ')' -> ^( A_KEY_IN_LIST columnOrSuperColumnName ( $a)+ ) ;
    public final keyInClause_return keyInClause() throws RecognitionException {
        keyInClause_return retval = new keyInClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token K_IN51=null;
        Token char_literal52=null;
        Token char_literal53=null;
        Token char_literal54=null;
        List list_a=null;
        columnOrSuperColumnName_return columnOrSuperColumnName50 = null;

        RuleReturnScope a = null;
        CommonTree K_IN51_tree=null;
        CommonTree char_literal52_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_K_IN=new RewriteRuleTokenStream(adaptor,"token K_IN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnOrSuperColumnName=new RewriteRuleSubtreeStream(adaptor,"rule columnOrSuperColumnName");
        RewriteRuleSubtreeStream stream_stringVal=new RewriteRuleSubtreeStream(adaptor,"rule stringVal");
        try {
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:173:5: ( columnOrSuperColumnName K_IN '(' a+= stringVal ( ',' a+= stringVal )* ')' -> ^( A_KEY_IN_LIST columnOrSuperColumnName ( $a)+ ) )
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:173:7: columnOrSuperColumnName K_IN '(' a+= stringVal ( ',' a+= stringVal )* ')'
            {
            pushFollow(FOLLOW_columnOrSuperColumnName_in_keyInClause687);
            columnOrSuperColumnName50=columnOrSuperColumnName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_columnOrSuperColumnName.add(columnOrSuperColumnName50.getTree());
            K_IN51=(Token)input.LT(1);
            match(input,K_IN,FOLLOW_K_IN_in_keyInClause689); if (failed) return retval;
            if ( backtracking==0 ) stream_K_IN.add(K_IN51);

            char_literal52=(Token)input.LT(1);
            match(input,48,FOLLOW_48_in_keyInClause691); if (failed) return retval;
            if ( backtracking==0 ) stream_48.add(char_literal52);

            pushFollow(FOLLOW_stringVal_in_keyInClause695);
            a=stringVal();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_stringVal.add(a.getTree());
            if (list_a==null) list_a=new ArrayList();
            list_a.add(a);

            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:173:53: ( ',' a+= stringVal )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==COMMA) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:173:54: ',' a+= stringVal
            	    {
            	    char_literal53=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_keyInClause698); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(char_literal53);

            	    pushFollow(FOLLOW_stringVal_in_keyInClause702);
            	    a=stringVal();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_stringVal.add(a.getTree());
            	    if (list_a==null) list_a=new ArrayList();
            	    list_a.add(a);


            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            char_literal54=(Token)input.LT(1);
            match(input,49,FOLLOW_49_in_keyInClause706); if (failed) return retval;
            if ( backtracking==0 ) stream_49.add(char_literal54);


            // AST REWRITE
            // elements: columnOrSuperColumnName, a
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: a
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"token a",list_a);
            root_0 = (CommonTree)adaptor.nil();
            // 174:6: -> ^( A_KEY_IN_LIST columnOrSuperColumnName ( $a)+ )
            {
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:174:9: ^( A_KEY_IN_LIST columnOrSuperColumnName ( $a)+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(A_KEY_IN_LIST, "A_KEY_IN_LIST"), root_1);

                adaptor.addChild(root_1, stream_columnOrSuperColumnName.next());
                if ( !(stream_a.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_a.next()).getTree());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyInClause

