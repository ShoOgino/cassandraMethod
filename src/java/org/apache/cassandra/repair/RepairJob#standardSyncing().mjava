    private AsyncFunction<List<TreeResponse>, List<SyncStat>> standardSyncing()
    {
        return trees ->
        {
            InetAddress local = FBUtilities.getLocalAddress();

            List<SyncTask> syncTasks = new ArrayList<>();
            // We need to difference all trees one against another
            for (int i = 0; i < trees.size() - 1; ++i)
            {
                TreeResponse r1 = trees.get(i);
                for (int j = i + 1; j < trees.size(); ++j)
                {
                    TreeResponse r2 = trees.get(j);
                    SyncTask task;
                    if (r1.endpoint.equals(local) || r2.endpoint.equals(local))
                    {
                        task = new LocalSyncTask(desc, r1, r2, isIncremental ? desc.parentSessionId : null, session.pullRepair, session.previewKind);
                    }
                    else
                    {
                        task = new RemoteSyncTask(desc, r1, r2, session.previewKind);
                        // RemoteSyncTask expects SyncComplete message sent back.
                        // Register task to RepairSession to receive response.
                        session.waitForSync(Pair.create(desc, new NodePair(r1.endpoint, r2.endpoint)), (RemoteSyncTask) task);
                    }
                    syncTasks.add(task);
                    taskExecutor.submit(task);
                }
            }
            return Futures.allAsList(syncTasks);
        };
    }

