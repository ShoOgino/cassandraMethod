    public String system_add_keyspace(KsDef ks_def) throws InvalidRequestException, TException
    {
        // IAuthenticator was devised prior to, and without thought for, dynamic keyspace creation. As
        // a result, we must choose between letting anyone/everyone create keyspaces (which they likely
        // won't even be able to use), or be honest and disallow it entirely if configured for auth.
        // See CASSANDRA-1271 for a proposed solution.
        if (!(DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator))
            throw new InvalidRequestException("Unable to create new keyspace while authentication is enabled.");

        if (StorageService.instance.getLiveNodes().size() < ks_def.replication_factor)
            throw new InvalidRequestException("Not enough live nodes to support this keyspace");
        
        //generate a meaningful error if the user setup keyspace and/or column definition incorrectly
        for (CfDef cf : ks_def.cf_defs) 
        {
            if (!cf.getKeyspace().equals(ks_def.getName()))
            {
                throw new InvalidRequestException("CsDef (" + cf.getName() +") had a keyspace definition that did not match KsDef");
            }
        }

        try
        {
            Collection<CFMetaData> cfDefs = new ArrayList<CFMetaData>(ks_def.cf_defs.size());
            for (CfDef cfDef : ks_def.cf_defs)
            {
                cfDefs.add(convertToCFMetaData(cfDef));
            }
            
            KSMetaData ksm = new KSMetaData(
                    ks_def.name, 
                    (Class<? extends AbstractReplicationStrategy>)Class.forName(ks_def.strategy_class),
                    ks_def.strategy_options,
                    ks_def.replication_factor,
                    cfDefs.toArray(new CFMetaData[cfDefs.size()]));
            applyMigrationOnStage(new AddKeyspace(ksm));
            return DatabaseDescriptor.getDefsVersion().toString();
        }
        catch (ClassNotFoundException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
        catch (ConfigurationException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
        catch (IOException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
    }

