    @Test
    public void testTypeArg()
    {
        Arrays.asList("-t", "--type").forEach(arg -> {
            ToolResult tool = ToolRunner.invokeClass(StandaloneSSTableUtil.class,
                                                            arg,
                                                            "system_schema",
                                                            "tables");
            assertThat("Arg: [" + arg + "]", tool.getStdout(), CoreMatchers.containsStringIgnoringCase("usage:"));
            assertThat("Arg: [" + arg + "]", tool.getCleanedStderr(), CoreMatchers.containsStringIgnoringCase("Missing arguments"));
            assertEquals("Arg: [" + arg + "]", 1, tool.getExitCode());
            assertCorrectEnvPostTest();
        });
        
        //'-t wrong' renders 'all' file types
        Arrays.asList(Pair.of("-t", "all"),
                      Pair.of("-t", "tmp"),
                      Pair.of("-t", "final"),
                      Pair.of("-t", "wrong"),
                      Pair.of("--type", "all"),
                      Pair.of("--type", "tmp"),
                      Pair.of("--type", "final"),
                      Pair.of("--type", "wrong"))
              .forEach(arg -> {
                  ToolResult tool = ToolRunner.invokeClass(StandaloneSSTableUtil.class,
                                                             arg.getLeft(),
                                                             arg.getRight(),
                                                             "system_schema",
                                                             "tables");
                  Assertions.assertThat(tool.getStdout()).as("Arg: [%s]", arg).isEqualTo("Listing files...\n");
                  Assertions.assertThat(tool.getCleanedStderr()).as("Arg: [%s]", arg).isEmpty();
                  tool.assertOnExitCode();
                  assertCorrectEnvPostTest();
              });
    }

