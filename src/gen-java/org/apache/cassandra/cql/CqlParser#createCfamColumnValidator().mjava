    // $ANTLR start "createCfamColumnValidator"
    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cql/Cql.g:383:1: createCfamColumnValidator returns [String validator] : ( comparatorType | STRING_LITERAL );
    public final String createCfamColumnValidator() throws RecognitionException {
        String validator = null;

        Token STRING_LITERAL20=null;
        CqlParser.comparatorType_return comparatorType19 = null;


        try {
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cql/Cql.g:384:5: ( comparatorType | STRING_LITERAL )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=86 && LA40_0<=98)) ) {
                alt40=1;
            }
            else if ( (LA40_0==STRING_LITERAL) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cql/Cql.g:384:7: comparatorType
                    {
                    pushFollow(FOLLOW_comparatorType_in_createCfamColumnValidator1958);
                    comparatorType19=comparatorType();

                    state._fsp--;

                     validator = (comparatorType19!=null?input.toString(comparatorType19.start,comparatorType19.stop):null); 

                    }
                    break;
                case 2 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cql/Cql.g:385:7: STRING_LITERAL
                    {
                    STRING_LITERAL20=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_createCfamColumnValidator1968); 
                     validator = (STRING_LITERAL20!=null?STRING_LITERAL20.getText():null); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return validator;
    }
    // $ANTLR end "createCfamColumnValidator"

