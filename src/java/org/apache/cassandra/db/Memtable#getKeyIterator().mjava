    public Iterator<String> getKeyIterator()
    {
        // even though we are using NBHM, it is okay to use size() twice here, since size() will never decrease
        // w/in a single memtable's lifetime
        if (columnFamilies_.size() == 0)
        {
            // cannot create a PQ of size zero (wtf?)
            return Arrays.asList(new String[0]).iterator();
        }
        PriorityQueue<String> pq = new PriorityQueue<String>(columnFamilies_.size(), StorageService.getPartitioner().getDecoratedKeyComparator());
        pq.addAll(columnFamilies_.keySet());
        return new DestructivePQIterator<String>(pq);
    }

