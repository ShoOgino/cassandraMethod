    @BMRules(rules = { @BMRule(name = "Throw exception anticompaction",
                               targetClass = "Range$OrderedRangeContainmentChecker",
                               targetMethod = "test",
                               action = "throw new org.apache.cassandra.db.compaction.CompactionInterruptedException(null);")} )
    @Test
    public void testExceptionAnticompaction() throws InterruptedException
    {
        cfs.disableAutoCompaction();
        cfs2.disableAutoCompaction();
        ExecutorService es = Executors.newFixedThreadPool(1);
        makeSSTables(4, cfs, 5);
        makeSSTables(4, cfs2, 5);
        List<Range<Token>> ranges = new ArrayList<>();

        for (SSTableReader sstable : cfs.getLiveSSTables())
        {
            ranges.add(new Range<>(sstable.first.getToken(), sstable.last.getToken()));
        }
        UUID prsid = prepareSession();
        try
        {
            PendingAntiCompaction pac = new PendingAntiCompaction(prsid, Lists.newArrayList(cfs, cfs2), atEndpoint(ranges, NO_RANGES), es, () -> false);
            pac.run().get();
            fail("PAC should throw exception when anticompaction throws exception!");
        }
        catch (ExecutionException e)
        {
            assertTrue(e.getCause() instanceof CompactionInterruptedException);
        }
        // Note that since we fail the PAC immediately when any of the anticompactions fail we need to wait for the other
        // AC to finish as well before asserting that we have nothing compacting.
        CompactionManager.instance.waitForCessation(Lists.newArrayList(cfs, cfs2), (sstable) -> true);
        // and make sure nothing is marked compacting
        assertTrue(cfs.getTracker().getCompacting().isEmpty());
        assertTrue(cfs2.getTracker().getCompacting().isEmpty());
        assertEquals(4, cfs.getLiveSSTables().size());
        assertEquals(4, cfs2.getLiveSSTables().size());
    }

