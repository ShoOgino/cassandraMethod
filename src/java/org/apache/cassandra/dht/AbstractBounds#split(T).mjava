    /**
     * Given token T and AbstractBounds ?L,R], returns Pair(?L,T], ]T,R])
     * (where ? means that the same type of Bounds is returned -- Range or Bounds -- as the original.)
     * The original AbstractBounds must contain the token T.
     * If the split would cause one of the left or right side to be empty, it will be null in the result pair.
     */
    public Pair<AbstractBounds<T>,AbstractBounds<T>> split(T pos)
    {
        assert left.equals(pos) || contains(pos);
        AbstractBounds<T> lb = createFrom(pos);
        // we contain this token, so only one of the left or right can be empty
        AbstractBounds<T> rb = lb != null && pos.equals(right) ? null : new Range<T>(pos, right);
        return new Pair<AbstractBounds<T>,AbstractBounds<T>>(lb, rb);
    }

