    /**
     * Handle node bootstrap
     *
     * @param endpoint bootstrapping node
     * @param pieces STATE_BOOTSTRAPPING,bootstrap token as string
     */
    private void handleStateBootstrap(InetAddress endpoint, String[] pieces)
    {
        assert pieces.length >= 2;

        // Parse versioned values according to end-point version:
        //   versions  < 1.2 .....: STATUS,TOKEN
        //   versions >= 1.2 .....: STATUS,HOST_ID,TOKEN,TOKEN,...
        int tokenPos;
        if (MessagingService.instance().getVersion(endpoint) >= MessagingService.VERSION_12)
        {
            assert pieces.length >= 3;
            tokenPos = 2;
        }
            else tokenPos = 1;

        Token token = getPartitioner().getTokenFactory().fromString(pieces[tokenPos]);

        if (logger.isDebugEnabled())
            logger.debug("Node " + endpoint + " state bootstrapping, token " + token);

        // if this node is present in token metadata, either we have missed intermediate states
        // or the node had crashed. Print warning if needed, clear obsolete stuff and
        // continue.
        if (tokenMetadata.isMember(endpoint))
        {
            // If isLeaving is false, we have missed both LEAVING and LEFT. However, if
            // isLeaving is true, we have only missed LEFT. Waiting time between completing
            // leave operation and rebootstrapping is relatively short, so the latter is quite
            // common (not enough time for gossip to spread). Therefore we report only the
            // former in the log.
            if (!tokenMetadata.isLeaving(endpoint))
                logger.info("Node " + endpoint + " state jump to bootstrap");
            tokenMetadata.removeEndpoint(endpoint);
        }

        tokenMetadata.addBootstrapToken(token, endpoint);
        calculatePendingRanges();

        if (MessagingService.instance().getVersion(endpoint) >= MessagingService.VERSION_12)
            tokenMetadata.updateHostId(UUID.fromString(pieces[1]), endpoint);
    }

