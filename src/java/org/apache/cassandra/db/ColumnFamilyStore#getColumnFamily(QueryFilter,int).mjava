    /**
     * get a list of columns starting from a given column, in a specified order.
     * only the latest version of a column is returned.
     * @return null if there is no data and no tombstones; otherwise a ColumnFamily
     */
    public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOException
    {
        assert columnFamily_.equals(filter.getColumnFamilyName());

        long start = System.currentTimeMillis();
        try
        {
            // if we are querying subcolumns of a supercolumn, fetch the supercolumn with NQF, then filter in-memory.
            if (filter.path.superColumnName != null)
            {
                QueryFilter nameFilter = new NamesQueryFilter(filter.key, new QueryPath(columnFamily_), filter.path.superColumnName);
                ColumnFamily cf = getColumnFamilyInternal(nameFilter, getDefaultGCBefore());
                if (cf == null || cf.getColumnCount() == 0)
                    return cf;

                assert cf.getSortedColumns().size() == 1;
                SuperColumn sc = (SuperColumn)cf.getSortedColumns().iterator().next();
                SuperColumn scFiltered = filter.filterSuperColumn(sc, gcBefore);
                ColumnFamily cfFiltered = cf.cloneMeShallow();
                cfFiltered.addColumn(scFiltered);
                return removeDeleted(cfFiltered, gcBefore);
            }

            return removeDeleted(getColumnFamilyInternal(filter, gcBefore), gcBefore);
        }
        finally
        {
            readStats_.add(System.currentTimeMillis() - start);
        }
    }

