    public Migration getMigration() throws InvalidRequestException, IOException
    {
        try
        {
            CFMetaData meta = validateColumnFamily(keyspace(), columnFamily());
            CfDef thriftDef = meta.toThrift();

            CFDefinition cfDef = meta.getCfDef();
            CFDefinition.Name name = this.oType == Type.OPTS ? null : cfDef.get(columnName);
            switch (oType)
            {
                case ADD:
                    if (cfDef.isCompact)
                        throw new InvalidRequestException("Cannot add new column to a compact CF");
                    if (name != null)
                    {
                        switch (name.kind)
                        {
                            case KEY_ALIAS:
                            case COLUMN_ALIAS:
                                throw new InvalidRequestException(String.format("Invalid column name %s because it conflicts with a PRIMARY KEY part", columnName));
                            case COLUMN_METADATA:
                                throw new InvalidRequestException(String.format("Invalid column name %s because it conflicts with an existing column", columnName));
                        }
                    }
                    thriftDef.column_metadata.add(new ColumnDefinition(columnName.key,
                                CFPropDefs.parseType(validator),
                                null,
                                null,
                                null).toThrift());
                    break;

                case ALTER:
                    if (name == null)
                        throw new InvalidRequestException(String.format("Column %s was not found in CF %s", columnName, columnFamily()));

                    switch (name.kind)
                    {
                        case KEY_ALIAS:
                        case COLUMN_ALIAS:
                            throw new InvalidRequestException(String.format("Cannot alter PRIMARY KEY part %s", columnName));
                        case VALUE_ALIAS:
                            thriftDef.default_validation_class = CFPropDefs.parseType(validator).toString();
                            break;
                        case COLUMN_METADATA:
                            ColumnDefinition column = meta.getColumnDefinition(columnName.key);
                            column.setValidator(CFPropDefs.parseType(validator));
                            thriftDef.column_metadata.add(column.toThrift());
                            break;
                    }
                    break;

                case DROP:
                    if (cfDef.isCompact)
                        throw new InvalidRequestException("Cannot drop columns from a compact CF");
                    if (name == null)
                        throw new InvalidRequestException(String.format("Column %s was not found in CF %s", columnName, columnFamily()));

                    switch (name.kind)
                    {
                        case KEY_ALIAS:
                        case COLUMN_ALIAS:
                            throw new InvalidRequestException(String.format("Cannot drop PRIMARY KEY part %s", columnName));
                        case COLUMN_METADATA:
                            ColumnDef toDelete = null;
                            for (ColumnDef columnDef : thriftDef.column_metadata)
                            {
                                if (columnDef.name.equals(columnName.key))
                                    toDelete = columnDef;
                            }
                            assert toDelete != null;
                            thriftDef.column_metadata.remove(toDelete);
                            break;
                    }
                    break;
                case OPTS:
                    if (cfProps == null)
                        throw new InvalidRequestException(String.format("ALTER COLUMNFAMILY WITH invoked, but no parameters found"));

                    cfProps.validate();
                    applyPropertiesToCfDef(thriftDef, cfProps);
                    break;
            }
            return new UpdateColumnFamily(thriftDef);
        }
        catch (ConfigurationException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.toString());
            ex.initCause(e);
            throw ex;
        }
    }

