    /**
     * Compresses the hashtable to the minimum prime size (as defined by
     * PrimeFinder) that will hold all of the elements currently in the table.
     * If you have done a lot of <tt>remove</tt> operations and plan to do a
     * lot of queries or insertions or iteration, it is a good idea to invoke
     * this method. Doing so will accomplish two things:
     * 
     * <ol>
     * <li> You'll free memory allocated to the table but no longer needed
     * because of the remove()s.</li>
     * 
     * <li> You'll get better query/insert/iterator performance because there
     * won't be any <tt>REMOVED</tt> slots to skip over when probing for
     * indices in the table.</li>
     * </ol>
     */
    public void compact()
    {
        // need at least one free spot for open addressing
        rehash(PrimeFinder.nextPrime((int) Math.ceil(size() / loadFactor_) + 1));
        computeMaxSize(capacity());
        
        // If auto-compaction is enabled, re-determine the compaction interval
        if (autoCompactionFactor_ != 0)
        {
            computeNextAutoCompactionAmount(size());
        }
    }

