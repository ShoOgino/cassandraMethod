    /**
     * internalOffer() is based on {@link java.util.concurrent.ConcurrentLinkedQueue#offer(Object)},
     * written by Doug Lea and Martin Buchholz with assistance from members of JCP JSR-166 Expert Group
     * and released to the public domain, as explained at http://creativecommons.org/publicdomain/zero/1.0/
     */
    private E internalOffer(E e)
    {
        if (null == e)
            throw new NullPointerException();

        final Node<E> node = new Node<>(e);

        for (Node<E> t = tail, p = t;;)
        {
            Node<E> q = p.next;
            if (q == null)
            {
                // p is last node
                if (p.casNext(null, node))
                {
                    // successful CAS is the linearization point for e to become an element of this queue and for node to become "live".
                    if (p != t) // hop two nodes at a time
                        casTail(t, node); // failure is ok
                    return p.item;
                }
                // lost CAS race to another thread; re-read next
            }
            else if (p == q)
            {
                /*
                 * We have fallen off list. If tail is unchanged, it will also be off-list, in which case we need to
                 * jump to head, from which all live nodes are always reachable. Else the new tail is a better bet.
                 */
                p = (t != (t = tail)) ? t : head;
            }
            else
            {
                // check for tail updates after two hops
                p = (p != t && t != (t = tail)) ? t : q;
            }
        }
    }

