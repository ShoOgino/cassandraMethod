        private static boolean collectionSatisfies(ColumnDefinition def, ColumnFamily data, Composite prefix, IndexExpression expr, ByteBuffer collectionElement)
        {
            assert def.type.isCollection();

            CollectionType type = (CollectionType)def.type;
            switch (type.kind)
            {
                case LIST:
                    assert collectionElement != null;
                    return type.valueComparator().compare(data.getColumn(data.getComparator().create(prefix, def.name, collectionElement)).value(), expr.value) == 0;
                case SET:
                    return data.getColumn(data.getComparator().create(prefix, def.name, expr.value)) != null;
                case MAP:
                    if (expr.operator == IndexExpression.Operator.CONTAINS_KEY)
                    {
                        return data.getColumn(data.getComparator().create(prefix, def.name, expr.value)) != null;
                    }
                    else
                    {
                        assert collectionElement != null;
                        return type.valueComparator().compare(data.getColumn(data.getComparator().create(prefix, def.name, collectionElement)).value(), expr.value) == 0;
                    }
            }
            throw new AssertionError();
        }

