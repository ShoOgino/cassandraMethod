    public static void logExceptionsAfterExecute(Runnable r, Throwable t)
    {
        // Check for exceptions wrapped by FutureTask.  We do this by calling get(), which will
        // cause it to throw any saved exception.
        //
        // Complicating things, calling get() on a ScheduledFutureTask will block until the task
        // is cancelled.  Hence, the extra isDone check beforehand.
        if ((r instanceof Future<?>) && ((Future<?>) r).isDone())
        {
            try
            {
                ((Future<?>) r).get();
            }
            catch (InterruptedException e)
            {
                throw new AssertionError(e);
            }
            catch (ExecutionException e)
            {
                if (Thread.getDefaultUncaughtExceptionHandler() == null)
                    logger.error("Error in ThreadPoolExecutor", e.getCause());
                else
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e.getCause());
            }
        }

        // exceptions for non-FutureTask runnables [i.e., added via execute() instead of submit()]
        if (t != null)
        {
            if (Thread.getDefaultUncaughtExceptionHandler() == null)
                logger.error("Error in ThreadPoolExecutor", t);
            else
                Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), t);
        }
    }

