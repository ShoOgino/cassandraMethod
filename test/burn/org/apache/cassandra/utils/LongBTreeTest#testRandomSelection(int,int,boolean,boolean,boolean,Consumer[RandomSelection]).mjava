    private void testRandomSelection(int perThreadTrees, int perTreeSelections, boolean narrow, boolean mixInNotPresentItems, boolean permitReversal, Consumer<RandomSelection> testRun) throws InterruptedException
    {
        int threads = Runtime.getRuntime().availableProcessors();
        final CountDownLatch latch = new CountDownLatch(threads);
        final AtomicLong errors = new AtomicLong();
        final AtomicLong count = new AtomicLong();
        final long totalCount = threads * perThreadTrees * perTreeSelections;
        for (int t = 0 ; t < threads ; t++)
        {
            Runnable runnable = () ->
            {
                try
                {
                    for (int i = 0 ; i < perThreadTrees ; i++)
                    {
                        // not easy to usefully log seed, as run tests in parallel; need to really pass through to exceptions
                        long seed = ThreadLocalRandom.current().nextLong();
                        Random random = new Random(seed);
                        RandomTree tree = randomTree(minTreeSize, maxTreeSize, random);
                        for (int j = 0 ; j < perTreeSelections ; j++)
                        {
                            testRun.accept(tree.select(narrow, mixInNotPresentItems, permitReversal));
                            count.incrementAndGet();
                        }
                    }
                }
                catch (Throwable t1)
                {
                    errors.incrementAndGet();
                    t1.printStackTrace();
                }
                latch.countDown();
            };
            MODIFY.execute(runnable);
        }
        while (latch.getCount() > 0)
        {
            for (int i = 0 ; i < 10L ; i++)
            {
                latch.await(1L, TimeUnit.SECONDS);
                Assert.assertEquals(0, errors.get());
            }
            log("%.1f%% complete %s", 100 * count.get() / (double) totalCount, errors.get() > 0 ? ("Errors: " + errors.get()) : "");
        }
    }

