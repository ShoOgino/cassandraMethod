    @Test
    public void testTimeHorizonStrategy() throws Exception
    {
        cs = newStrategy("TIMEHORIZON", 200);

        //Test that things can be pulled out of the queue if it is non-empty
        add(201);
        add(401);
        cs.coalesce(input, output, 128);
        assertEquals( 2, output.size());
        assertNull(parker.parks.poll());

        //Test that blocking on the queue results in everything drained
        clear();

        runBlocker(queueParked);
        add(601);
        add(801);
        release();
        assertEquals( 2, output.size());
        assertNull(parker.parks.poll());

        clear();

        //Test that out of order samples still flow
        runBlocker(queueParked);
        add(0);
        release();
        assertEquals( 1, output.size());
        assertNull(parker.parks.poll());

        clear();

        add(0);
        cs.coalesce(input, output, 128);
        assertEquals( 1, output.size());
        assertNull(parker.parks.poll());

        clear();

        //Test that too high an average doesn't coalesce
        for (long ii = 0; ii < 128; ii++)
            add(ii * 1000);
        cs.coalesce(input, output, 128);
        assertEquals(output.size(), 128);
        assertTrue(parker.parks.isEmpty());

        clear();

        runBlocker(queueParked);
        add(129 * 1000);
        release();
        assertTrue(parker.parks.isEmpty());

        clear();

        //Test that a low enough average coalesces
        cs = newStrategy("TIMEHORIZON", 200);
        primeTimeHorizonAverage(99);

        clear();

        runBlocker(queueParked);
        add(100000 * 99);
        queueRelease.release();
        parker.parked.acquire();
        add(100001 * 99);
        parker.permits.release();
        fut.get();
        assertEquals(2, output.size());
        assertEquals(toNanos(198), parker.parks.poll().longValue());

        clear();

        //Test far future
        add(Integer.MAX_VALUE);
        cs.coalesce(input, output, 128);
        assertEquals(1, output.size());
        assertTrue(parker.parks.isEmpty());

        clear();

        //Distant past
        add(0);
        cs.coalesce(input, output, 128);
        assertEquals(1, output.size());
        assertTrue(parker.parks.isEmpty());
    }

