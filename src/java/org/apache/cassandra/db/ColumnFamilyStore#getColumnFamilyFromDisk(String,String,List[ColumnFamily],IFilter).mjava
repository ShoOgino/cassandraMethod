    /**
     * Fetch from disk files and go in sorted order  to be efficient
     * This fn exits as soon as the required data is found.
     *
     * @param key
     * @param cf
     * @param columnFamilies
     * @param filter
     * @throws IOException
     */
    private void getColumnFamilyFromDisk(String key, String cf, List<ColumnFamily> columnFamilies, IFilter filter) throws IOException
    {
        lock_.readLock().lock();
        try
        {
            for (SSTable sstable : ssTables_.values())
            {
                /*
                 * Get the BloomFilter associated with this file. Check if the key
                 * is present in the BloomFilter. If not continue to the next file.
                */
                boolean bVal = sstable.isKeyPossible(key);
                if (!bVal)
                {
                    continue;
                }
                ColumnFamily columnFamily = null;
                try
                {
                    columnFamily = fetchColumnFamily(key, cf, filter, sstable);
                }
                catch (IOException e)
                {
                    throw new IOException("Error fetching " + key + ":" + cf + " from " + sstable, e);
                }
                if (columnFamily != null)
                {
                    columnFamilies.add(columnFamily);
                }
            }
        }
        finally
        {
            lock_.readLock().unlock();
        }
    }

