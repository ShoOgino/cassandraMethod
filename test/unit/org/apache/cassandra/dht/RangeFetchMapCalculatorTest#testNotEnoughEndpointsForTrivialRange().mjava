    @Test(expected = IllegalStateException.class)
    public void testNotEnoughEndpointsForTrivialRange() throws UnknownHostException
    {
        Multimap<Range<Token>, InetAddress> rangesWithSources = HashMultimap.create();
        // add non-trivial ranges
        addNonTrivialRangeAndSources(rangesWithSources, 1, 10, "127.0.0.3", "127.0.0.51");
        addNonTrivialRangeAndSources(rangesWithSources, 11, 20, "127.0.0.3", "127.0.0.55");
        addNonTrivialRangeAndSources(rangesWithSources, 21, 30, "127.0.0.2", "127.0.0.59");
        // and a trivial one:
        addTrivialRangeAndSources(rangesWithSources, 1, 10, "127.0.0.3");

        RangeStreamer.ISourceFilter filter = new RangeStreamer.ISourceFilter()
        {
            public boolean shouldInclude(InetAddress endpoint)
            {
                try
                {
                    if (endpoint.equals(InetAddress.getByName("127.0.0.3")))
                        return false;
                }
                catch (UnknownHostException e)
                {
                    throw new RuntimeException(e);
                }
                return true;
            }
        };
        RangeFetchMapCalculator calculator = new RangeFetchMapCalculator(rangesWithSources, Collections.singleton(filter), "Test");
        Multimap<InetAddress, Range<Token>> optMap = calculator.getRangeFetchMapForNonTrivialRanges();
        Multimap<InetAddress, Range<Token>> trivialMap = calculator.getRangeFetchMapForTrivialRanges(optMap);

    }

