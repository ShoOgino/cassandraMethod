    /**
     * Returns the result of merging this {@code Columns} object with the
     * provided one.
     *
     * @param other the other {@code Columns} to merge this object with.
     *
     * @return the result of merging/taking the union of {@code this} and
     * {@code other}. The returned object may be one of the operand and that
     * operand is a subset of the other operand.
     */
    public Columns mergeTo(Columns other)
    {
        if (this == other || other == NONE)
            return this;
        if (this == NONE)
            return other;

        int i = 0, j = 0;
        int size = 0;
        while (i < columns.length && j < other.columns.length)
        {
            ++size;
            int cmp = columns[i].compareTo(other.columns[j]);
            if (cmp == 0)
            {
                ++i;
                ++j;
            }
            else if (cmp < 0)
            {
                ++i;
            }
            else
            {
                ++j;
            }
        }

        // If every element was always counted on both array, we have the same
        // arrays for the first min elements
        if (i == size && j == size)
        {
            // We've exited because of either c1 or c2 (or both). The array that
            // made us stop is thus a subset of the 2nd one, return that array.
            return i == columns.length ? other : this;
        }

        size += i == columns.length ? other.columns.length - j : columns.length - i;
        ColumnDefinition[] result = new ColumnDefinition[size];
        i = 0;
        j = 0;
        for (int k = 0; k < size; k++)
        {
            int cmp = i >= columns.length ? 1
                    : (j >= other.columns.length ? -1 : columns[i].compareTo(other.columns[j]));
            if (cmp == 0)
            {
                result[k] = columns[i];
                ++i;
                ++j;
            }
            else if (cmp < 0)
            {
                result[k] = columns[i++];
            }
            else
            {
                result[k] = other.columns[j++];
            }
        }
        return new Columns(result, findFirstComplexIdx(result));
    }

