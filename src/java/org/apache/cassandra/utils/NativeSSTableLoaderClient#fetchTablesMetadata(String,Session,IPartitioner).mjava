    /*
     * The following is a slightly simplified but otherwise duplicated version of
     * SchemaKeyspace.createTableFromTableRowAndColumnRows().
     * It might be safer to have a simple wrapper of the driver ResultSet/Row implementing
     * UntypedResultSet/UntypedResultSet.Row and reuse the original method.
     *
     * Note: It is not safe for this class to use static methods from SchemaKeyspace (static final fields are ok)
     * as that triggers initialization of the class, which fails in client mode.
     */
    private static Map<String, CFMetaData> fetchTablesMetadata(String keyspace, Session session, IPartitioner partitioner)
    {
        Map<String, CFMetaData> tables = new HashMap<>();
        String query = String.format("SELECT * FROM %s.%s WHERE keyspace_name = ?", SchemaKeyspace.NAME, SchemaKeyspace.TABLES);

        for (Row row : session.execute(query, keyspace))
        {
            String name = row.getString("table_name");
            UUID id = row.getUUID("id");

            Set<CFMetaData.Flag> flags = row.isNull("flags")
                                       ? Collections.emptySet()
                                       : CFMetaData.flagsFromStrings(row.getSet("flags", String.class));

            boolean isSuper = flags.contains(CFMetaData.Flag.SUPER);
            boolean isCounter = flags.contains(CFMetaData.Flag.COUNTER);
            boolean isDense = flags.contains(CFMetaData.Flag.DENSE);
            boolean isCompound = flags.contains(CFMetaData.Flag.COMPOUND);
            boolean isMaterializedView = flags.contains(CFMetaData.Flag.VIEW);

            String columnsQuery = String.format("SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?",
                                                SchemaKeyspace.NAME,
                                                SchemaKeyspace.COLUMNS);

            List<ColumnDefinition> defs = new ArrayList<>();
            for (Row colRow : session.execute(columnsQuery, keyspace, name))
                defs.add(createDefinitionFromRow(colRow, keyspace, name));

            tables.put(name, CFMetaData.create(keyspace,
                                               name,
                                               id,
                                               isDense,
                                               isCompound,
                                               isSuper,
                                               isCounter,
                                               isMaterializedView,
                                               defs,
                                               partitioner));
        }

        return tables;
    }

