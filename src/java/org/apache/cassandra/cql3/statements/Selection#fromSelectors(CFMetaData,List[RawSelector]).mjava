    public static Selection fromSelectors(CFMetaData cfm, List<RawSelector> rawSelectors) throws InvalidRequestException
    {
        if (requiresProcessing(rawSelectors))
        {
            List<ColumnDefinition> defs = new ArrayList<ColumnDefinition>();
            SelectionColumnMapping columnMapping = SelectionColumnMapping.newMapping();
            List<Selector> selectors = new ArrayList<Selector>(rawSelectors.size());
            boolean collectTimestamps = false;
            boolean collectTTLs = false;
            for (RawSelector rawSelector : rawSelectors)
            {
                Selector selector = makeSelector(cfm, rawSelector, defs, columnMapping);
                selectors.add(selector);
                collectTimestamps |= selector.usesTimestamps();
                collectTTLs |= selector.usesTTLs();
            }
            return new SelectionWithProcessing(defs, columnMapping, selectors, collectTimestamps, collectTTLs);
        }
        else
        {
            List<ColumnDefinition> defs = new ArrayList<ColumnDefinition>(rawSelectors.size());
            SelectionColumnMapping columnMapping = SelectionColumnMapping.newMapping();
            for (RawSelector rawSelector : rawSelectors)
            {
                assert rawSelector.selectable instanceof ColumnIdentifier.Raw;
                ColumnIdentifier id = (ColumnIdentifier) rawSelector.selectable.prepare(cfm);
                ColumnDefinition def = cfm.getColumnDefinition(id);
                if (def == null)
                    throw new InvalidRequestException(String.format("Undefined name %s in selection clause", id));

                defs.add(def);
                columnMapping.addMapping(rawSelector.alias == null ? def : makeAliasSpec(cfm,
                                                                                         def.type,
                                                                                         rawSelector.alias),
                                         def);
            }
            return new SimpleSelection(defs, columnMapping);
        }
    }

