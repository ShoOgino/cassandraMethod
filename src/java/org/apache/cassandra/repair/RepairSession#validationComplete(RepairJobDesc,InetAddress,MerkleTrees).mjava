    /**
     * Receive merkle tree response or failed response from {@code endpoint} for current repair job.
     *
     * @param desc repair job description
     * @param endpoint endpoint that sent merkle tree
     * @param trees calculated merkle trees, or null if validation failed
     */
    public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees)
    {
        ValidationTask task = validating.remove(Pair.create(desc, endpoint));
        if (task == null)
        {
            assert terminated;
            return;
        }

        String message = String.format("Received merkle tree for %s from %s", desc.columnFamily, endpoint);
        logger.info("[repair #{}] {}", getId(), message);
        Tracing.traceRepair(message);
        task.treesReceived(trees);

        // Unregister from FailureDetector once we've completed synchronizing Merkle trees.
        // After this point, we rely on tcp_keepalive for individual sockets to notify us when a connection is down.
        // See CASSANDRA-3569
        if (validationRemaining.decrementAndGet() == 0)
        {
            FailureDetector.instance.unregisterFailureDetectionEventListener(this);
        }
    }

