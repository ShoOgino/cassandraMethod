    /**
     * Stream a file from source to destination. This is highly optimized
     * to not hold any of the contents of the file in memory.
     * @param header Header contains file to stream and other metadata.
     * @param to endpoint to which we need to stream the file.
    */

    public void stream(StreamHeader header, InetAddress to)
    {
        this.streamExecutorsLock.lock();
        try
        {
            if (!streamExecutors.containsKey(to))
            {
                // Using a core pool size of 0 is important. See documentation of streamExecutors.
                streamExecutors.put(to, new DebuggableThreadPoolExecutor(0, 1, 1, TimeUnit.SECONDS,
                        new LinkedBlockingQueue<Runnable>(),
                        new NamedThreadFactory("Streaming to " + to)));
            }
            DebuggableThreadPoolExecutor executor = streamExecutors.get(to);

            executor.execute(new FileStreamTask(header, to));
        }
        finally
        {
            this.streamExecutorsLock.unlock();
        }
    }

