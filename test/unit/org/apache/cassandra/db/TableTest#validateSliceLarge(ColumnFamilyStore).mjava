    private void validateSliceLarge(ColumnFamilyStore cfStore) throws IOException
    {
        DecoratedKey key = Util.dk("row3");
        ColumnFamily cf;
        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col1000".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER, false, 3);
        assertColumns(cf, "col1000", "col1001", "col1002");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1000".getBytes())).value().array()), "v1000");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1001".getBytes())).value().array()), "v1001");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1002".getBytes())).value().array()), "v1002");

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col1195".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER, false, 3);
        assertColumns(cf, "col1195", "col1196", "col1197");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1195".getBytes())).value().array()), "v1195");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1196".getBytes())).value().array()), "v1196");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1197".getBytes())).value().array()), "v1197");

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col1996".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER, true, 1000);
        IColumn[] columns = cf.getSortedColumns().toArray(new IColumn[0]);
        for (int i = 1000; i < 1996; i++)
        {
            String expectedName = "col" + i;
            IColumn column = columns[i - 1000];
            assert Arrays.equals(column.name().array(), expectedName.getBytes()) : cfStore.getComparator().getString(column.name()) + " is not " + expectedName;
            assert Arrays.equals(column.value().array(), ("v" + i).getBytes());
        }

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col1990".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER, false, 3);
        assertColumns(cf, "col1990", "col1991", "col1992");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1990".getBytes())).value().array()), "v1990");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1991".getBytes())).value().array()), "v1991");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1992".getBytes())).value().array()), "v1992");

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), FBUtilities.EMPTY_BYTE_BUFFER, FBUtilities.EMPTY_BYTE_BUFFER, true, 3);
        assertColumns(cf, "col1997", "col1998", "col1999");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1999".getBytes())).value().array()), "v1999");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1998".getBytes())).value().array()), "v1998");
        assertEquals(new String(cf.getColumn(ByteBuffer.wrap("col1997".getBytes())).value().array()), "v1997");

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col9000".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER, true, 3);
        assertColumns(cf, "col1997", "col1998", "col1999");

        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), ByteBuffer.wrap("col9000".getBytes()),FBUtilities.EMPTY_BYTE_BUFFER, false, 3);
        assertColumns(cf);
    }

