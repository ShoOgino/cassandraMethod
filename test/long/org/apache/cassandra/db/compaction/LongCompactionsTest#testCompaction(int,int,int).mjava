    protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception
    {
        CompactionManager.instance.disableAutoCompaction();

        Keyspace keyspace = Keyspace.open(KEYSPACE1);
        ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1");

        ArrayList<SSTableReader> sstables = new ArrayList<>();
        for (int k = 0; k < sstableCount; k++)
        {
            SortedMap<String, PartitionUpdate> rows = new TreeMap<>();
            for (int j = 0; j < partitionsPerSSTable; j++)
            {
                String key = String.valueOf(j);
                // last sstable has highest timestamps
                UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j))
                                                     .withTimestamp(k);
                for (int i = 0; i < rowsPerPartition; i++)
                    builder.newRow(String.valueOf(i)).add("val", String.valueOf(i));
                rows.put(key, builder.build());
            }
            Collection<SSTableReader> readers = SSTableUtils.prepare().write(rows);
            sstables.addAll(readers);
            store.addSSTables(readers);
        }

        // give garbage collection a bit of time to catch up
        Thread.sleep(1000);

        long start = System.nanoTime();
        final int gcBefore = (int) (System.currentTimeMillis() / 1000) - Schema.instance.getCFMetaData(KEYSPACE1, "Standard1").params.gcGraceSeconds;
        try (LifecycleTransaction txn = store.getTracker().tryModify(sstables, OperationType.COMPACTION))
        {
            assert txn != null : "Cannot markCompacting all sstables";
            new CompactionTask(store, txn, gcBefore).execute(null);
        }
        System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms",
                                         this.getClass().getName(),
                                         sstableCount,
                                         partitionsPerSSTable,
                                         rowsPerPartition,
                                         TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)));
    }

