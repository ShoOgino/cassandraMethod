    /*
     * Test for CASSANDRA-14096 size limiting. We:
     * 1. Limit the size of a repair session
     * 2. Submit a validation
     * 3. Check that the resulting tree is of limited depth
     */
    @Test
    public void testSizeLimiting() throws Exception
    {
        Keyspace ks = Keyspace.open(keyspace);
        ColumnFamilyStore cfs = ks.getColumnFamilyStore(columnFamily);
        cfs.clearUnsafe();

        DatabaseDescriptor.setRepairSessionSpaceInMegabytes(1);

        // disable compaction while flushing
        cfs.disableAutoCompaction();

        // 2 ** 14 rows would normally use 2^14 leaves, but with only 1 meg we should only use 2^12
        CompactionsTest.populate(keyspace, columnFamily, 0, 1 << 14, 0);

        cfs.forceBlockingFlush();
        assertEquals(1, cfs.getLiveSSTables().size());

        // wait enough to force single compaction
        TimeUnit.SECONDS.sleep(5);

        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();
        UUID repairSessionId = UUIDGen.getTimeUUID();
        final RepairJobDesc desc = new RepairJobDesc(repairSessionId, UUIDGen.getTimeUUID(), cfs.keyspace.getName(),
                                                     cfs.getTableName(), Collections.singletonList(new Range<>(sstable.first.getToken(),
                                                                                                               sstable.last.getToken())));

        ActiveRepairService.instance.registerParentRepairSession(repairSessionId, FBUtilities.getBroadcastAddressAndPort(),
                                                                 Collections.singletonList(cfs), desc.ranges, false, ActiveRepairService.UNREPAIRED_SSTABLE,
                                                                 false, PreviewKind.NONE);

        final CompletableFuture<MessageOut> outgoingMessageSink = registerOutgoingMessageSink();
        Validator validator = new Validator(desc, FBUtilities.getBroadcastAddressAndPort(), 0, true, false, PreviewKind.NONE);
        ValidationManager.instance.submitValidation(cfs, validator);

        MessageOut message = outgoingMessageSink.get(TEST_TIMEOUT, TimeUnit.SECONDS);
        MerkleTrees trees = ((ValidationComplete) message.payload).trees;

        Iterator<Map.Entry<Range<Token>, MerkleTree>> iterator = trees.iterator();
        int numTrees = 0;
        while (iterator.hasNext())
        {
            assertEquals(1 << 12, iterator.next().getValue().size(), 0.0);
            numTrees++;
        }
        assertEquals(1, numTrees);

        assertEquals(trees.rowCount(), 1 << 14);
    }

