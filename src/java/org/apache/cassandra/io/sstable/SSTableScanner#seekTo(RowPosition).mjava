    public void seekTo(RowPosition seekKey)
    {
        try
        {
            long indexPosition = sstable.getIndexScanPosition(seekKey);
            // -1 means the key is before everything in the sstable. So just start from the beginning.
            if (indexPosition == -1)
                indexPosition = 0;

            ifile.seek(indexPosition);

            while (!ifile.isEOF())
            {
                long startPosition = ifile.getFilePointer();
                DecoratedKey indexDecoratedKey = sstable.partitioner.decorateKey(ByteBufferUtil.readWithShortLength(ifile));
                int comparison = indexDecoratedKey.compareTo(seekKey);
                if (comparison >= 0)
                {
                    // Found, just read the dataPosition and seek into index and data files
                    long dataPosition = ifile.readLong();
                    ifile.seek(startPosition);
                    dfile.seek(dataPosition);
                    row = null;
                    return;
                }
                else
                {
                    RowIndexEntry.serializer.skip(ifile);
                }
            }
            exhausted = true;
        }
        catch (IOException e)
        {
            sstable.markSuspect();
            throw new CorruptSSTableException(e, ifile.getPath());
        }
    }

