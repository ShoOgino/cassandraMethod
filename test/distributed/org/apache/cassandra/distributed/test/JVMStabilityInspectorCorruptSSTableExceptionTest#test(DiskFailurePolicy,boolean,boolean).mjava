    private static void test(DiskFailurePolicy policy, boolean expectNativeTransportRunning, boolean expectGossiperEnabled) throws Exception
    {
        String table = policy.name();
        try (final Cluster cluster = init(getCluster(policy).start()))
        {
            IInvokableInstance node = cluster.get(1);
            boolean[] setup = node.callOnInstance(() -> {
                CassandraDaemon instanceForTesting = CassandraDaemon.getInstanceForTesting();
                instanceForTesting.completeSetup();
                StorageService.instance.registerDaemon(instanceForTesting);
                return new boolean[]{ StorageService.instance.isNativeTransportRunning(), Gossiper.instance.isEnabled() };
            });

            // make sure environment is setup propertly
            Assert.assertTrue("Native support is not running, test is not ready!", setup[0]);
            Assert.assertTrue("Gossiper is not running, test is not ready!", setup[1]);

            cluster.schemaChange("CREATE TABLE " + KEYSPACE + "." + table + " (id bigint PRIMARY KEY)");
            node.executeInternal("INSERT INTO " + KEYSPACE + "." + table + " (id) VALUES (?)", 0L);
            corruptTable(node, KEYSPACE, table);

            try
            {
                cluster.coordinator(1).execute("SELECT * FROM " + KEYSPACE + '.' + table + " WHERE id=?", ConsistencyLevel.ONE, 0L);
                Assert.fail("Select should fail as we corrupted SSTable on purpose.");
            }
            catch (final Exception ex)
            {
                // we expect that above query fails as we corrupted an sstable
            }

            waitForStop(!expectGossiperEnabled, node, new SerializableCallable<Boolean>()
            {
                public Boolean call()
                {
                    return Gossiper.instance.isEnabled();
                }
            });

            waitForStop(!expectNativeTransportRunning, node, new SerializableCallable<Boolean>()
            {
                public Boolean call()
                {
                    return StorageService.instance.isNativeTransportRunning();
                }
            });
        }
    }

