    /**
     * Returns a hash code value for this bit set. The hash code depends only on
     * which bits have been set within this <code>BitSet</code>. The
     * algorithm used to compute it may be described as follows.
     * <p>
     * Suppose the bits in the <code>BitSet</code> were to be stored in an
     * array of <code>long</code> integers called, say, <code>words</code>,
     * in such a manner that bit <code>k</code> is set in the
     * <code>BitSet</code> (for nonnegative values of <code>k</code>) if
     * and only if the expression
     * 
     * <pre>
     * ((k &gt;&gt; 6) &lt; words.length) &amp;&amp; ((words[k &gt;&gt; 6] &amp; (1L &lt;&lt; (bit &amp; 0x3F))) != 0)
     * </pre>
     * 
     * is true. Then the following definition of the <code>hashCode</code>
     * method would be a correct implementation of the actual algorithm:
     * 
     * <pre>
     * public int hashCode()
     * {
     *     long h = 1234;
     *     for (int i = words.length; --i &gt;= 0;)
     *     {
     *         h &circ;= words[i] * (i + 1);
     *     }
     *     return (int) ((h &gt;&gt; 32) &circ; h);
     * }
     * </pre>
     * 
     * Note that the hash code values change if the set of bits is altered.
     * <p>
     * Overrides the <code>hashCode</code> method of <code>Object</code>.
     * 
     * @return a hash code value for this bit set.
     */
    public int hashCode()
    {
        long h = 1234;
        for (int i = wordsInUse; --i >= 0;)
            h ^= words[i] * (i + 1);
        
        return (int) ((h >> 32) ^ h);
    }

