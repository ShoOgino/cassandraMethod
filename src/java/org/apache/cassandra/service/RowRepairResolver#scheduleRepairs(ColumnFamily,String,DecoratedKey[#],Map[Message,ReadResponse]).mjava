    /**
     * For each row version, compare with resolved (the superset of all row versions);
     * if it is missing anything, send a mutation to the endpoint it come from.
     */
    public static List<IAsyncResult> scheduleRepairs(ColumnFamily resolved, String table, DecoratedKey<?> key, Map<Message,ReadResponse> replies)
    {
        List<IAsyncResult> results = new ArrayList<IAsyncResult>(replies.size());

        for (Map.Entry<Message, ReadResponse> entry : replies.entrySet())
        {
            InetAddress from = entry.getKey().getFrom();
            ColumnFamily cf = entry.getValue().row().cf;
            ColumnFamily diffCf = ColumnFamily.diff(cf, resolved);
            if (diffCf == null) // no repair needs to happen
                continue;

            // create and send the row mutation message based on the diff
            RowMutation rowMutation = new RowMutation(table, key.key);
            rowMutation.add(diffCf);
            Message repairMessage;
            try
            {
                repairMessage = rowMutation.getMessage(Gossiper.instance.getVersion(from));
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
            results.add(MessagingService.instance().sendRR(repairMessage, from));
        }

        return results;
    }

