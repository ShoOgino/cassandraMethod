        // returns 0 if we are currently on the last row we are allocated to visit; 1 if it is after, -1 if it is before
        // this is defined by _limit_, which is wired up from expected (mean) row counts
        // the last row is where position == lastRow, except the last index is 1 less;
        // OR if that row does not exist, it is the last row prior to it
        private int compareToLastRow(int depth)
        {
            int prev = 0;
            for (int i = 0 ; i <= depth ; i++)
            {
                int p = currentRow[i], l = lastRow[i], r = clusteringComponents[i].size();
                if (prev < 0)
                {
                    // if we're behind our last position in theory, and have known more items to visit in practice
                    // we're definitely behind our last row
                    if (r > 1)
                        return -1;
                    // otherwise move forwards to see if we might have more to visit
                }
                else if (p > l)
                {
                    // prev must be == 0, so if p > l, we're after our last row
                    return 1;
                }
                else if (p == l)
                {
                    // if we're equal to our last row up to our current depth, then we need to loop and look forwards
                }
                else if (r == 1)
                {
                    // if this is our last item in practice, store if we're behind our theoretical position
                    // and move forwards; if every remaining practical item is 1, we're at the last row
                    // otherwise we're before it
                    prev = p - l;
                }
                else
                {
                    // p < l, and r > 1, so we're definitely not at the end
                    return -1;
                }
            }
            return 0;
        }

