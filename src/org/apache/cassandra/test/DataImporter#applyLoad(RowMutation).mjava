    /*
     * This function will apply the given task . It is based on a requests per
     * second member variable which can be set to teh required ammount , it will
     * generate only those many requests and if thos emany requests have already
     * been entered then it will sleep . This function assumes that there is no
     * waiting in any other part of the code so the requests are being generated
     * instantaniously .
     */
    public void applyLoad(RowMutation rm) throws IOException {
        try
        {
            long t = System.currentTimeMillis();
            counter_.incrementAndGet();
    		columnFamilyHack_++;
            EndPoint to = new EndPoint(7000);
            RowMutationMessage rmMsg = new RowMutationMessage(rm);           
            Message message = new Message(to, 
                    StorageService.mutationStage_,
                    StorageService.mutationVerbHandler_, 
                    new Object[]{ rmMsg }
            );                                                            
			MessagingService.getMessagingInstance().sendRR(message, to);
            Thread.sleep(1000/requestsPerSecond_, 1000%requestsPerSecond_);
            
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
    }

