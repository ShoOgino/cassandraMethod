    private void read(SSTableReader sstable, FileDataInput file, RowIndexEntry rowEntry)
            throws IOException
    {
        List<IndexHelper.IndexInfo> indexList;

        Descriptor.Version version = sstable.descriptor.version;
        cf = ColumnFamily.create(sstable.metadata);
        List<OnDiskAtom> result = new ArrayList<OnDiskAtom>(columns.size());

        if (version.hasPromotedRowTombstones && !rowEntry.columnsIndex().isEmpty())
        {
            // skip the row header entirely
            cf.delete(new DeletionInfo(rowEntry.deletionTime()));

            readIndexedColumns(sstable.metadata, file, columns, rowEntry.columnsIndex(), rowEntry.position, result);
            iter = result.iterator();
            return;
        }

        if (file == null)
            file = createFileDataInput(rowEntry.position);
        else
            file.seek(rowEntry.position);

        DecoratedKey keyInDisk = SSTableReader.decodeKey(sstable.partitioner,
                                                         sstable.descriptor,
                                                         ByteBufferUtil.readWithShortLength(file));
        assert keyInDisk.equals(key) : String.format("%s != %s in %s", keyInDisk, key, file.getPath());
        SSTableReader.readRowSize(file, sstable.descriptor);

        if (sstable.descriptor.version.hasPromotedIndexes)
        {
            indexList = rowEntry.columnsIndex();
            // we'll get row deletion time from the row header below
        }
        else
        {
            IndexHelper.skipSSTableBloomFilter(file, version);
            indexList = IndexHelper.deserializeIndex(file);
        }

        cf.delete(DeletionInfo.serializer().deserializeFromSSTable(file, sstable.descriptor.version));

        if (indexList.isEmpty())
        {
            readSimpleColumns(file, columns, result);
        }
        else
        {
            long basePosition = version.hasPromotedIndexes ? rowEntry.position : file.getFilePointer() + 4;
            readIndexedColumns(sstable.metadata, file, columns, indexList, basePosition, result);
        }

        // create an iterator view of the columns we read
        iter = result.iterator();
    }

