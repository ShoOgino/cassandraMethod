    /**
     * Constructs a new segment file.
     *
     * @param filePath  if not null, recycles the existing file by renaming it and truncating it to CommitLog.SEGMENT_SIZE.
     */
    CommitLogSegment(String filePath)
    {
        id = getNextId();
        descriptor = new CommitLogDescriptor(id);
        logFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName());

        try
        {
            if (filePath != null)
            {
                File oldFile = new File(filePath);

                if (oldFile.exists())
                {
                    logger.debug("Re-using discarded CommitLog segment for {} from {}", id, filePath);
                    if (!oldFile.renameTo(logFile))
                        throw new IOException("Rename from " + filePath + " to " + id + " failed");
                }
                else
                {
                    logger.debug("Creating new CommitLog segment: {}", logFile);
                }
            }

            // Extend or truncate the file size to the standard segment size as we may have restarted after a segment
            // size configuration change, leaving "incorrectly" sized segments on disk.
            // NOTE: while we're using RAF to easily adjust file size, we need to avoid using RAF
            // for grabbing the FileChannel due to FILE_SHARE_DELETE flag bug on windows.
            // See: https://bugs.openjdk.java.net/browse/JDK-6357433 and CASSANDRA-8308
            if (logFile.length() != DatabaseDescriptor.getCommitLogSegmentSize())
            {
                try (RandomAccessFile raf = new RandomAccessFile(logFile, "rw"))
                {
                    raf.setLength(DatabaseDescriptor.getCommitLogSegmentSize());
                }
                catch (IOException e)
                {
                    throw new FSWriteError(e, logFile);
                }
            }

            channel = FileChannel.open(logFile.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ);

            fd = CLibrary.getfd(channel);
            buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, DatabaseDescriptor.getCommitLogSegmentSize());

            CommitLogDescriptor.writeHeader(buffer, descriptor);

            // mark the initial sync marker as uninitialised
            buffer.putInt(CommitLogDescriptor.HEADER_SIZE, 0);
            buffer.putLong(CommitLogDescriptor.HEADER_SIZE + 4, 0);
            allocatePosition.set(CommitLogDescriptor.HEADER_SIZE + SYNC_MARKER_SIZE);
            lastSyncedOffset = CommitLogDescriptor.HEADER_SIZE;
        }
        catch (IOException e)
        {
            throw new FSWriteError(e, logFile);
        }
    }

