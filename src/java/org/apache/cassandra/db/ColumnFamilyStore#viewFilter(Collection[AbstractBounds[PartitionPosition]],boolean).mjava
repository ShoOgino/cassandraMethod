    /**
     * @return a ViewFragment containing the sstables and memtables that may need to be merged
     * for rows for all of @param rowBoundsCollection, inclusive, according to the interval tree.
     */
    public Function<View, List<SSTableReader>> viewFilter(final Collection<AbstractBounds<PartitionPosition>> rowBoundsCollection, final boolean includeRepaired)
    {
        return new Function<View, List<SSTableReader>>()
        {
            public List<SSTableReader> apply(View view)
            {
                Set<SSTableReader> sstables = Sets.newHashSet();
                for (AbstractBounds<PartitionPosition> rowBounds : rowBoundsCollection)
                {
                    for (SSTableReader sstable : view.sstablesInBounds(rowBounds))
                    {
                        if (includeRepaired || !sstable.isRepaired())
                            sstables.add(sstable);
                    }
                }

                logger.debug("ViewFilter for {}/{} sstables", sstables.size(), getSSTables().size());
                return ImmutableList.copyOf(sstables);
            }
        };
    }

