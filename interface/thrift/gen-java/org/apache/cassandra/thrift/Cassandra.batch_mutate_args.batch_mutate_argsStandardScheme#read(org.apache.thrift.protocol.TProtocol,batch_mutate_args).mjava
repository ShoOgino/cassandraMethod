      public void read(org.apache.thrift.protocol.TProtocol iprot, batch_mutate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MUTATION_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map266 = iprot.readMapBegin();
                  struct.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map266.size);
                  for (int _i267 = 0; _i267 < _map266.size; ++_i267)
                  {
                    ByteBuffer _key268; // required
                    Map<String,List<Mutation>> _val269; // required
                    _key268 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TMap _map270 = iprot.readMapBegin();
                      _val269 = new HashMap<String,List<Mutation>>(2*_map270.size);
                      for (int _i271 = 0; _i271 < _map270.size; ++_i271)
                      {
                        String _key272; // required
                        List<Mutation> _val273; // required
                        _key272 = iprot.readString();
                        {
                          org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                          _val273 = new ArrayList<Mutation>(_list274.size);
                          for (int _i275 = 0; _i275 < _list274.size; ++_i275)
                          {
                            Mutation _elem276; // required
                            _elem276 = new Mutation();
                            _elem276.read(iprot);
                            _val273.add(_elem276);
                          }
                          iprot.readListEnd();
                        }
                        _val269.put(_key272, _val273);
                      }
                      iprot.readMapEnd();
                    }
                    struct.mutation_map.put(_key268, _val269);
                  }
                  iprot.readMapEnd();
                }
                struct.setMutation_mapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONSISTENCY_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                struct.setConsistency_levelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

