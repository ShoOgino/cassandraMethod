    @Test
    public void testIndexUpdate() throws IOException
    {
        Keyspace keyspace = Keyspace.open(KEYSPACE2);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_INDEX1);
        CellName birthdate = cellname("birthdate");

        // create a row and update the birthdate value, test that the index query fetches the new version
        Mutation rm;
        rm = new Mutation(KEYSPACE2, ByteBufferUtil.bytes("k1"));
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 1);
        rm.apply();
        rm = new Mutation(KEYSPACE2, ByteBufferUtil.bytes("k1"));
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(2L), 2);
        rm.apply();

        IndexExpression expr = new IndexExpression(ByteBufferUtil.bytes("birthdate"), IndexExpression.Operator.EQ, ByteBufferUtil.bytes(1L));
        List<IndexExpression> clause = Arrays.asList(expr);
        IDiskAtomFilter filter = new IdentityQueryFilter();
        Range<RowPosition> range = Util.range("", "");
        List<Row> rows = cfs.search(range, clause, filter, 100);
        assert rows.size() == 0;

        expr = new IndexExpression(ByteBufferUtil.bytes("birthdate"), IndexExpression.Operator.EQ, ByteBufferUtil.bytes(2L));
        clause = Arrays.asList(expr);
        rows = keyspace.getColumnFamilyStore(CF_INDEX1).search(range, clause, filter, 100);
        String key = ByteBufferUtil.string(rows.get(0).key.getKey());
        assert "k1".equals( key );

        // update the birthdate value with an OLDER timestamp, and test that the index ignores this
        rm = new Mutation(KEYSPACE2, ByteBufferUtil.bytes("k1"));
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(3L), 0);
        rm.apply();

        rows = keyspace.getColumnFamilyStore(CF_INDEX1).search(range, clause, filter, 100);
        key = ByteBufferUtil.string(rows.get(0).key.getKey());
        assert "k1".equals( key );

    }

