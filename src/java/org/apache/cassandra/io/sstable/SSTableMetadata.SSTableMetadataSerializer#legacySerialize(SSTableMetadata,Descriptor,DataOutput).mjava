        /**
         * Used to serialize to an old version - needed to be able to update sstable level without a full compaction.
         *
         * @deprecated will be removed when it is assumed that the minimum upgrade-from-version is the version that this
         * patch made it into
         *
         * @param sstableStats
         * @param legacyDesc
         * @param out
         * @throws IOException
         */
        @Deprecated
        public void legacySerialize(SSTableMetadata sstableStats, Descriptor legacyDesc, DataOutput out) throws IOException
        {
            EstimatedHistogram.serializer.serialize(sstableStats.estimatedRowSize, out);
            EstimatedHistogram.serializer.serialize(sstableStats.estimatedColumnCount, out);
            ReplayPosition.serializer.serialize(sstableStats.replayPosition, out);
            out.writeLong(sstableStats.minTimestamp);
            out.writeLong(sstableStats.maxTimestamp);
            if (legacyDesc.version.tracksMaxLocalDeletionTime)
                out.writeInt(sstableStats.maxLocalDeletionTime);
            if (legacyDesc.version.hasBloomFilterFPChance)
                out.writeDouble(sstableStats.bloomFilterFPChance);
            out.writeDouble(sstableStats.compressionRatio);
            out.writeUTF(sstableStats.partitioner);
            out.writeInt(sstableStats.ancestors.size());
            for (Integer g : sstableStats.ancestors)
                out.writeInt(g);
            StreamingHistogram.serializer.serialize(sstableStats.estimatedTombstoneDropTime, out);
            out.writeInt(sstableStats.sstableLevel);
            if (legacyDesc.version.tracksMaxMinColumnNames)
                serializeMinMaxColumnNames(sstableStats.minColumnNames, sstableStats.maxColumnNames, out);
        }

