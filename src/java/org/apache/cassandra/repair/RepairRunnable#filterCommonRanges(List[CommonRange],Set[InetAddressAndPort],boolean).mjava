    /**
     * removes dead nodes from common ranges, and exludes ranges left without any participants
     */
    @VisibleForTesting
    static List<CommonRange> filterCommonRanges(List<CommonRange> commonRanges, Set<InetAddressAndPort> liveEndpoints, boolean force)
    {
        if (!force)
        {
            return commonRanges;
        }
        else
        {
            List<CommonRange> filtered = new ArrayList<>(commonRanges.size());

            for (CommonRange commonRange: commonRanges)
            {
                Set<InetAddressAndPort> endpoints = ImmutableSet.copyOf(Iterables.filter(commonRange.endpoints, liveEndpoints::contains));

                // this node is implicitly a participant in this repair, so a single endpoint is ok here
                if (!endpoints.isEmpty())
                {
                    filtered.add(new CommonRange(endpoints, commonRange.ranges));
                }
            }
            Preconditions.checkState(!filtered.isEmpty(), "Not enough live endpoints for a repair");
            return filtered;
        }
    }

