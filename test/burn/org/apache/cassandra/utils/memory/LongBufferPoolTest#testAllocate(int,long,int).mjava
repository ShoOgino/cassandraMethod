    public void testAllocate(int threadCount, long duration, int poolSize) throws InterruptedException, ExecutionException
    {
        System.out.println(String.format("%s - testing %d threads for %dm",
                                         DATE_FORMAT.format(new Date()),
                                         threadCount,
                                         TimeUnit.NANOSECONDS.toMinutes(duration)));
        long prevPoolSize = BufferPool.MEMORY_USAGE_THRESHOLD;
        logger.info("Overriding configured BufferPool.MEMORY_USAGE_THRESHOLD={} and enabling BufferPool.DEBUG", poolSize);
        BufferPool.MEMORY_USAGE_THRESHOLD = poolSize;
        Debug debug = new Debug();
        BufferPool.debug(debug);

        TestEnvironment testEnv = new TestEnvironment(threadCount, duration, poolSize);

        startBurnerThreads(testEnv);

        for (int threadIdx = 0; threadIdx < threadCount; threadIdx++)
            testEnv.addCheckedFuture(startWorkerThread(testEnv, threadIdx));

        while (!testEnv.latch.await(10L, TimeUnit.SECONDS))
        {
            int stalledThreads = testEnv.countStalledThreads();
            int doneThreads = testEnv.countDoneThreads();

            if (doneThreads == 0) // If any threads have completed, they will stop making progress/recycling buffers.
            {                     // Assertions failures on the threads will be caught below.
                assert stalledThreads == 0;
                boolean allFreed = testEnv.burnFreed.getAndSet(false);
                for (AtomicBoolean freedMemory : testEnv.freedAllMemory)
                    allFreed = allFreed && freedMemory.getAndSet(false);
                if (allFreed)
                    debug.check();
                else
                    logger.info("All threads did not free all memory in this time slot - skipping buffer recycle check");
            }
        }

        for (SPSCQueue<BufferCheck> queue : testEnv.sharedRecycle)
        {
            BufferCheck check;
            while ( null != (check = queue.poll()) )
            {
                check.validate();
                BufferPool.put(check.buffer);
            }
        }

        assertEquals(0, testEnv.executorService.shutdownNow().size());

        logger.info("Reverting BufferPool.MEMORY_USAGE_THRESHOLD={}", prevPoolSize);
        BufferPool.MEMORY_USAGE_THRESHOLD = prevPoolSize;
        BufferPool.debug(null);

        testEnv.assertCheckedThreadsSucceeded();

        System.out.println(String.format("%s - finished.",
                                         DATE_FORMAT.format(new Date())));
    }

