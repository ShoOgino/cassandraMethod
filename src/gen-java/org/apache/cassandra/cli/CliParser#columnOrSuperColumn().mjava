    // $ANTLR start "columnOrSuperColumn"
    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:504:1: columnOrSuperColumn : ( Identifier | IntegerPositiveLiteral | IntegerNegativeLiteral | StringLiteral | functionCall ) ;
    public final CliParser.columnOrSuperColumn_return columnOrSuperColumn() throws RecognitionException {
        CliParser.columnOrSuperColumn_return retval = new CliParser.columnOrSuperColumn_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier268=null;
        Token IntegerPositiveLiteral269=null;
        Token IntegerNegativeLiteral270=null;
        Token StringLiteral271=null;
        CliParser.functionCall_return functionCall272 = null;


        CommonTree Identifier268_tree=null;
        CommonTree IntegerPositiveLiteral269_tree=null;
        CommonTree IntegerNegativeLiteral270_tree=null;
        CommonTree StringLiteral271_tree=null;

        try {
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:2: ( ( Identifier | IntegerPositiveLiteral | IntegerNegativeLiteral | StringLiteral | functionCall ) )
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:4: ( Identifier | IntegerPositiveLiteral | IntegerNegativeLiteral | StringLiteral | functionCall )
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:4: ( Identifier | IntegerPositiveLiteral | IntegerNegativeLiteral | StringLiteral | functionCall )
            int alt37=5;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA37_1 = input.LA(2);

                if ( (LA37_1==119) ) {
                    alt37=5;
                }
                else if ( ((LA37_1>=107 && LA37_1<=111)||LA37_1==115) ) {
                    alt37=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
                }
                break;
            case IntegerPositiveLiteral:
                {
                alt37=2;
                }
                break;
            case IntegerNegativeLiteral:
                {
                alt37=3;
                }
                break;
            case StringLiteral:
                {
                alt37=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:5: Identifier
                    {
                    Identifier268=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnOrSuperColumn3596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier268_tree = (CommonTree)adaptor.create(Identifier268);
                    adaptor.addChild(root_0, Identifier268_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:18: IntegerPositiveLiteral
                    {
                    IntegerPositiveLiteral269=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_columnOrSuperColumn3600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IntegerPositiveLiteral269_tree = (CommonTree)adaptor.create(IntegerPositiveLiteral269);
                    adaptor.addChild(root_0, IntegerPositiveLiteral269_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:43: IntegerNegativeLiteral
                    {
                    IntegerNegativeLiteral270=(Token)match(input,IntegerNegativeLiteral,FOLLOW_IntegerNegativeLiteral_in_columnOrSuperColumn3604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IntegerNegativeLiteral270_tree = (CommonTree)adaptor.create(IntegerNegativeLiteral270);
                    adaptor.addChild(root_0, IntegerNegativeLiteral270_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:68: StringLiteral
                    {
                    StringLiteral271=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnOrSuperColumn3608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    StringLiteral271_tree = (CommonTree)adaptor.create(StringLiteral271);
                    adaptor.addChild(root_0, StringLiteral271_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:505:84: functionCall
                    {
                    pushFollow(FOLLOW_functionCall_in_columnOrSuperColumn3612);
                    functionCall272=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall272.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnOrSuperColumn"

