    /**
     * Tests that droppable messages will be dropped after they expire, but not before.
     * 
     * @throws UnknownHostException
     */
    @Test
    public void testDroppable() throws UnknownHostException
    {
        OutboundTcpConnection otc = getOutboundTcpConnectionForLocalhost();
        long nanoTimeBeforeEnqueue = System.nanoTime();

        initialFill(otc, VERB_DROPPABLE);
        assertFalse("OutboundTcpConnection with droppable verbs should not expire immediately",
                otc.backlogContainsExpiredMessages(nanoTimeBeforeEnqueue));

        otc.expireMessages(nanoTimeBeforeEnqueue);
        assertFalse("OutboundTcpConnection with droppable verbs should not expire with enqueue-time expiration",
                otc.backlogContainsExpiredMessages(nanoTimeBeforeEnqueue));

        // Lets presume, expiration time have passed => At that time there shall be expired messages in the Queue
        long nanoTimeWhenExpired = expirationTimeNanos();
        assertTrue("OutboundTcpConnection with droppable verbs should have expired",
                otc.backlogContainsExpiredMessages(nanoTimeWhenExpired));

        // Using the same timestamp, lets expire them and check whether they have gone
        otc.expireMessages(nanoTimeWhenExpired);
        assertFalse("OutboundTcpConnection should not have expired entries",
                otc.backlogContainsExpiredMessages(nanoTimeWhenExpired));

        // Actually the previous test can be done in a harder way: As expireMessages() has run, we cannot have
        // ANY expired values, thus lets test also against nanoTimeBeforeEnqueue
        assertFalse("OutboundTcpConnection should not have any expired entries",
                otc.backlogContainsExpiredMessages(nanoTimeBeforeEnqueue));

    }

