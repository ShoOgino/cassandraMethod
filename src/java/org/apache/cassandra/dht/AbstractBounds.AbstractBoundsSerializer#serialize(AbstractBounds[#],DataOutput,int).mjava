        public void serialize(AbstractBounds<?> range, DataOutput out, int version) throws IOException
        {
            // Older version don't know how to handle abstract bounds of keys
            // However, the serialization has been designed so that token bounds are serialized the same way that before 1.1
            if (version < MessagingService.VERSION_11)
                range = range.toTokenBounds();

            /*
             * The first int tells us if it's a range or bounds (depending on the value) _and_ if it's tokens or keys (depending on the
             * sign). We use negative kind for keys so as to preserve the serialization of token from older version.
             */
            boolean isToken = range.left instanceof Token;
            int kind = range instanceof Range ? Type.RANGE.ordinal() : Type.BOUNDS.ordinal();
            if (!isToken)
                kind = -(kind+1);
            out.writeInt(kind);
            if (isToken)
            {
                Token.serializer().serialize((Token)range.left, out);
                Token.serializer().serialize((Token)range.right, out);
            }
            else
            {
                RowPosition.serializer().serialize((RowPosition)range.left, out);
                RowPosition.serializer().serialize((RowPosition)range.right, out);
            }
        }

