    /**
     * Locates the index of <tt>obj</tt>.
     * 
     * @param obj
     *            an <code>Object</code> value
     * @return the index of <tt>obj</tt> or -1 if it isn't in the set.
     */
    protected int index(Object obj)
    {        
        final Object[] set = set_;
        final int length = set.length;
        final int hash = obj.hashCode() & 0x7fffffff;
        int index = hash % length;
        Object cur = set[index];

        if (cur == FREE)
            return -1;

        // NOTE: here it has to be REMOVED or FULL (some user-given value)
        if (cur == REMOVED || cur.equals(obj))
        {
            // see Knuth, p. 529
            final int probe = 1 + (hash % (length - 2));

            while (cur != FREE&& (cur == REMOVED || !cur.equals(obj)))
            {
                index -= probe;
                if (index < 0)
                {
                    index += length;
                }
                cur = set[index];
            }            
        }

        return cur == FREE ? -1 : index;
    }

