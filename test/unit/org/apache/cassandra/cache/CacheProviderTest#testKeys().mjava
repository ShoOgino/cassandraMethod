    @Test
    public void testKeys()
    {
        TableId id1 = TableId.generate();
        byte[] b1 = {1, 2, 3, 4};
        RowCacheKey key1 = new RowCacheKey(id1, null, ByteBuffer.wrap(b1));
        TableId id2 = TableId.fromString(id1.toString());
        byte[] b2 = {1, 2, 3, 4};
        RowCacheKey key2 = new RowCacheKey(id2, null, ByteBuffer.wrap(b2));
        assertEquals(key1, key2);
        assertEquals(key1.hashCode(), key2.hashCode());

        TableMetadata tm = TableMetadata.builder("ks", "tab", id1)
                                        .addPartitionKeyColumn("pk", UTF8Type.instance)
                                        .build();

        assertTrue(key1.sameTable(tm));

        byte[] b3 = {1, 2, 3, 5};
        RowCacheKey key3 = new RowCacheKey(id1, null, ByteBuffer.wrap(b3));
        assertNotSame(key1, key3);
        assertNotSame(key1.hashCode(), key3.hashCode());

        // with index name

        key1 = new RowCacheKey(id1, "indexFoo", ByteBuffer.wrap(b1));
        assertNotSame(key1, key2);
        assertNotSame(key1.hashCode(), key2.hashCode());

        key2 = new RowCacheKey(id2, "indexFoo", ByteBuffer.wrap(b2));
        assertEquals(key1, key2);
        assertEquals(key1.hashCode(), key2.hashCode());

        tm = TableMetadata.builder("ks", "tab.indexFoo", id1)
                          .kind(TableMetadata.Kind.INDEX)
                          .addPartitionKeyColumn("pk", UTF8Type.instance)
                          .indexes(Indexes.of(IndexMetadata.fromSchemaMetadata("indexFoo", IndexMetadata.Kind.KEYS, Collections.emptyMap())))
                          .build();
        assertTrue(key1.sameTable(tm));

        key3 = new RowCacheKey(id1, "indexFoo", ByteBuffer.wrap(b3));
        assertNotSame(key1, key3);
        assertNotSame(key1.hashCode(), key3.hashCode());
    }

