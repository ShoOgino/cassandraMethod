        public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
        {
            Function fun = Functions.get(keyspace, name, terms, receiver.ksName, receiver.cfName);
            if (fun == null)
                throw new InvalidRequestException(String.format("Unknown function %s called", name));

            // Functions.get() will complain if no function "name" type check with the provided arguments.
            // We still have to validate that the return type matches however
            if (!receiver.type.isValueCompatibleWith(fun.returnType()))
                throw new InvalidRequestException(String.format("Type error: cannot assign result of function %s (type %s) to %s (type %s)",
                                                                fun.name(), fun.returnType().asCQL3Type(),
                                                                receiver.name, receiver.type.asCQL3Type()));

            List<Term> parameters = new ArrayList<Term>(terms.size());
            boolean allTerminal = true;
            for (int i = 0; i < terms.size(); i++)
            {
                Term t = terms.get(i).prepare(keyspace, Functions.makeArgSpec(receiver.ksName, receiver.cfName, fun, i));
                if (t instanceof NonTerminal)
                    allTerminal = false;
                parameters.add(t);
            }

            // If all parameters are terminal and the function is pure, we can
            // evaluate it now, otherwise we'd have to wait execution time
            return allTerminal && fun.isPure()
                ? makeTerminal(fun, execute(fun, parameters), QueryOptions.DEFAULT.getProtocolVersion())
                : new FunctionCall(fun, parameters);
        }

