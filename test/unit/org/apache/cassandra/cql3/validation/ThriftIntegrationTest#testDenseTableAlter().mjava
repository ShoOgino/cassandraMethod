    @Test
    public void testDenseTableAlter() throws Throwable
    {
        populateDenseTable();

        alterTable(String.format("ALTER TABLE %s.%s RENAME column1 TO renamed_column1", KEYSPACE, currentDenseTable()));
        alterTable(String.format("ALTER TABLE %s.%s RENAME column2 TO renamed_column2", KEYSPACE, currentDenseTable()));
        alterTable(String.format("ALTER TABLE %s.%s RENAME key TO renamed_key", KEYSPACE, currentDenseTable()));
        alterTable(String.format("ALTER TABLE %s.%s RENAME value TO renamed_value", KEYSPACE, currentDenseTable()));

        beforeAndAfterFlush(() -> {
            UntypedResultSet resultSet = execute(String.format("select * from %s.%s", KEYSPACE, currentDenseTable()));
            assertEquals("renamed_key", resultSet.metadata().get(0).name.toString());
            assertEquals("renamed_column1", resultSet.metadata().get(1).name.toString());
                                assertEquals("renamed_column2", resultSet.metadata().get(2).name.toString());
                                assertEquals("renamed_value", resultSet.metadata().get(3).name.toString());
            assertRows(resultSet,
                       row("key1", "val1", 1, "value1"),
                       row("key1", "val1", 2, "value2"),
                       row("key1", "val2", 4, "value4"),
                       row("key1", "val2", 5, "value5"),
                       row("key2", "val1", 1, "value1"),
                       row("key2", "val1", 2, "value2"),
                       row("key2", "val2", 4, "value4"),
                       row("key2", "val2", 5, "value5"));
        });
    }

