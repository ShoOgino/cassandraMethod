    /**
     * Serialize a row with already given column iterator
     *
     * @param columns columns of the row
     * @param isSuper true if wrapping Column Family is Super
     * @param out output stream
     * @return pair of (number of columns serialized, last column serialized)
     *
     * @throws IOException on any I/O error.
     */
    private static Pair<Integer, ByteBuffer> serializeRow(IColumnIterator columns, boolean isSuper, PrintStream out) throws IOException
    {
        ColumnFamily columnFamily = columns.getColumnFamily();
        CFMetaData cfMetaData = columnFamily.metadata();

        AbstractType comparator = columnFamily.getComparator();

        if (isSuper)
        {
            int n = 0;
            IColumn column = null;
            while (columns.hasNext())
            {
                column = columns.next();
                n++;

                out.print(asKey(comparator.getString(column.name())));
                out.print("{");
                out.print(asKey("deletedAt"));
                out.print(column.getMarkedForDeleteAt());
                out.print(", ");
                out.print(asKey("subColumns"));
                out.print("[");
                serializeColumns(column.getSubColumns().iterator(), out, columnFamily.getSubComparator(), cfMetaData);
                out.print("]");
                out.print("}");

                if (columns.hasNext())
                    out.print(", ");
            }

            return new Pair<Integer, ByteBuffer>(n, column == null ? null : column.name());
        }
        else
        {
            return serializeColumns(columns, out, comparator, cfMetaData);
        }
    }

