    /*
     * Update index i with new element, assuming that new element is contained in the element i,
     * i.e that:
     *   - starts[i] <= s
     *   - e <= end[i]
     */
    private void update(int i, ByteBuffer start, ByteBuffer end, long markedAt, int delTime)
    {
        /*
         * If the new markedAt is lower than the one of i, we can ignore the
         * new element, otherwise we split the current element.
         */
        if (markedAts[i] < markedAt)
        {
            if (comparator.compare(ends[i], end) != 0)
                addInternal(i+1, end, ends[i], markedAts[i], delTimes[i]);

            if (comparator.compare(starts[i], start) == 0)
            {
                markedAts[i] = markedAt;
                delTimes[i] = delTime;
                ends[i] = end;
            }
            else
            {
                addInternal(i+1, start, end, markedAt, delTime);
                ends[i] = start;
            }
        }
    }

