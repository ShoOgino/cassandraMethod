        public boolean isAssignableTo(ColumnSpecification receiver)
        {
            CQL3Type receiverType = receiver.type.asCQL3Type();
            if (receiverType.isCollection())
                return false;

            if (!(receiverType instanceof CQL3Type.Native))
                // Skip type validation for custom types. May or may not be a good idea
                return true;

            CQL3Type.Native nt = (CQL3Type.Native)receiverType;
            switch (type)
            {
                case STRING:
                    switch (nt)
                    {
                        case ASCII:
                        case TEXT:
                        case INET:
                        case VARCHAR:
                        case TIMESTAMP:
                            return true;
                        case BLOB:
                            // Blobs should now be inputed as hexadecimal constants. However, to allow people to upgrade, we still allow
                            // blob-as-strings, even though it is deprecated (see #5198).
                            if (!stringAsBlobWarningLogged)
                            {
                                stringAsBlobWarningLogged = true;
                                logger.warn("Inputing CLQ3 blobs as strings (like {} = '{}') is now deprecated and will be removed in a future version. "
                                          + "You should convert client code to use a blob constant ({} = {}) instead (see http://cassandra.apache.org/doc/cql3/CQL.html "
                                          + "changelog section for more info).",
                                          new Object[]{receiver, text, receiver, "0x" + text});
                            }
                            return true;
                    }
                    return false;
                case INTEGER:
                    switch (nt)
                    {
                        case BIGINT:
                        case COUNTER:
                        case DECIMAL:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case TIMESTAMP:
                        case VARINT:
                            return true;
                    }
                    return false;
                case UUID:
                    switch (nt)
                    {
                        case UUID:
                        case TIMEUUID:
                            return true;
                    }
                    return false;
                case FLOAT:
                    switch (nt)
                    {
                        case DECIMAL:
                        case DOUBLE:
                        case FLOAT:
                            return true;
                    }
                    return false;
                case BOOLEAN:
                    switch (nt)
                    {
                        case BOOLEAN:
                            return true;
                    }
                    return false;
                case HEX:
                    switch (nt)
                    {
                        case BLOB:
                            return true;
                    }
                    return false;
            }
            return false;
        }

