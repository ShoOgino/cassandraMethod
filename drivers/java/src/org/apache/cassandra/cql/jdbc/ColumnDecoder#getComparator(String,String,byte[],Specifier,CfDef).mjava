    // same as above, but can get column-specific validators.
    AbstractType getComparator(String keyspace, String columnFamily, byte[] column, Specifier specifier, CfDef def)
    {
        // check cache first.
        String key = String.format(MapFormatString,
                                   keyspace,
                                   columnFamily,
                                   specifier.name(),
                                   FBUtilities.bytesToHex(column == null ? new byte[]{ } : column));
        AbstractType comparator = comparators.get(key);

        // make and put in cache.
        if (comparator == null)
        {
            if (def == null)
                def = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
            if (def == null)
                // no point in proceeding. these values are bad.
                return null;
            try
            {
                switch (specifier)
                {
                    case KeyValidator:
                        comparator = FBUtilities.getComparator(def.getKey_validation_class());
                        break;
                    case ColumnSpecific:
                        // if we get here this means there is no column-specific validator, so fall through to the default.
                    case Validator:
                        comparator = FBUtilities.getComparator(def.getDefault_validation_class());
                        break;
                    case Comparator:
                    default:
                        comparator = FBUtilities.getComparator(def.getComparator_type());
                        break;
                }
                comparators.put(key, comparator);
            }
            catch (ConfigurationException ex)
            {
                throw new RuntimeException(ex);
            }
        }
        return comparator;
    }

