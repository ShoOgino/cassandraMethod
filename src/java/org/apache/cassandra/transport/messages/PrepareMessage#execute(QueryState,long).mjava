    public Message.Response execute(QueryState state, long queryStartNanoTime)
    {
        try
        {
            UUID tracingId = null;
            if (isTracingRequested())
            {
                tracingId = UUIDGen.getTimeUUID();
                state.prepareTracingSession(tracingId);
            }

            if (state.traceNextQuery())
            {
                state.createTracingSession(getCustomPayload());
                Tracing.instance.begin("Preparing CQL3 query", state.getClientAddress(), ImmutableMap.of("query", query));
            }

            Message.Response response = ClientState.getCQLQueryHandler().prepare(query,
                                                                                 state.getClientState().cloneWithKeyspaceIfSet(keyspace),
                                                                                 getCustomPayload());
            if (auditLogEnabled)
            {
                ParsedStatement.Prepared parsedStmt = QueryProcessor.parseStatement(query, state.getClientState());
                AuditLogEntry auditLogEntry = new AuditLogEntry.Builder(state.getClientState())
                                              .setOperation(query)
                                              .setType(AuditLogEntryType.PREPARE_STATEMENT)
                                              .setScope(parsedStmt.statement)
                                              .setKeyspace(parsedStmt.statement)
                                              .build();
                auditLogManager.log(auditLogEntry);
            }

            if (tracingId != null)
                response.setTracingId(tracingId);

            return response;
        }
        catch (Exception e)
        {
            if (auditLogEnabled)
            {
                AuditLogEntry auditLogEntry = new AuditLogEntry.Builder(state.getClientState())
                                              .setOperation(query)
                                              .setKeyspace(keyspace)
                                              .setType(AuditLogEntryType.PREPARE_STATEMENT)
                                              .build();
                auditLogManager.log(auditLogEntry, e);
            }
            JVMStabilityInspector.inspectThrowable(e);
            return ErrorMessage.fromException(e);
        }
        finally
        {
            Tracing.instance.stopSession();
        }
    }

