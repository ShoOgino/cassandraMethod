    private UnfilteredPartitionIterator querySourceOnKey(int i, DecoratedKey key)
    {
        BTreeSet.Builder<Clustering> builder = rowsToFetch.get(i).get(key);
        assert builder != null; // We're calling this on the result of rowsToFetch.get(i).keySet()

        InetAddress source = sources[i];
        NavigableSet<Clustering> clusterings = builder.build();
        tableMetrics.replicaSideFilteringProtectionRequests.mark();
        if (logger.isTraceEnabled())
            logger.trace("Requesting rows {} in partition {} from {} for replica-side filtering protection",
                         clusterings, key, source);
        Tracing.trace("Requesting {} rows in partition {} from {} for replica-side filtering protection",
                      clusterings.size(), key, source);

        // build the read command taking into account that we could be requesting only in the static row
        DataLimits limits = clusterings.isEmpty() ? DataLimits.cqlLimits(1) : DataLimits.NONE;
        ClusteringIndexFilter filter = new ClusteringIndexNamesFilter(clusterings, command.isReversed());
        SinglePartitionReadCommand cmd = SinglePartitionReadCommand.create(command.metadata(),
                                                                           command.nowInSec(),
                                                                           command.columnFilter(),
                                                                           RowFilter.NONE,
                                                                           limits,
                                                                           key,
                                                                           filter);
        try
        {
            return executeReadCommand(cmd, source);
        }
        catch (ReadTimeoutException e)
        {
            int blockFor = consistency.blockFor(keyspace);
            throw new ReadTimeoutException(consistency, blockFor - 1, blockFor, true);
        }
        catch (UnavailableException e)
        {
            int blockFor = consistency.blockFor(keyspace);
            throw new UnavailableException(consistency, blockFor, blockFor - 1);
        }
    }

