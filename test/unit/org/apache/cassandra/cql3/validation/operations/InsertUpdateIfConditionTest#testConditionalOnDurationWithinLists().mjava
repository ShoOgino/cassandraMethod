    @Test
    public void testConditionalOnDurationWithinLists() throws Throwable
    {
        for (Boolean frozen : new Boolean[]{Boolean.FALSE, Boolean.TRUE})
        {
            String listType = String.format(frozen ? "frozen<%s>" : "%s", "list<duration>");

            createTable("CREATE TABLE %s (k int PRIMARY KEY, v int, l " + listType + " )");

            assertInvalidMessage("Slice conditions are not supported on collections containing durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l > [1s, 2s]");
            assertInvalidMessage("Slice conditions are not supported on collections containing durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l >= [1s, 2s]");
            assertInvalidMessage("Slice conditions are not supported on collections containing durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l <= [1s, 2s]");
            assertInvalidMessage("Slice conditions are not supported on collections containing durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l < [1s, 2s]");

            execute("INSERT INTO %s (k, v, l) VALUES (1, 1, [1s, 2s])");

            assertRows(execute("UPDATE %s SET v = 4 WHERE k = 1 IF l = [2s]"), row(false, list(Duration.from("1000ms"), Duration.from("2s"))));
            assertRows(execute("UPDATE %s SET v = 3 WHERE k = 1 IF l = [1s, 2s]"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("1000ms"), Duration.from("2s")), 3));

            assertRows(execute("UPDATE %s SET l = [10s] WHERE k = 1 IF l != [1s, 2s]"), row(false, list(Duration.from("1000ms"), Duration.from("2s"))));
            assertRows(execute("UPDATE %s SET v = 6 WHERE k = 1 IF l != [1s]"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("1000ms"), Duration.from("2s")), 6));

            assertRows(execute("UPDATE %s SET v = 5 WHERE k = 1 IF l IN ([1s], [1s, 5s])"), row(false, list(Duration.from("1000ms"), Duration.from("2s"))));
            assertRows(execute("UPDATE %s SET l = [5s, 10s] WHERE k = 1 IF l IN ([1s], [1s, 2s])"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("5s"), Duration.from("10s")), 6));

            assertInvalidMessage("Slice conditions ( > ) are not supported on durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l[0] > 1s");
            assertInvalidMessage("Slice conditions ( >= ) are not supported on durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l[0] >= 1s");
            assertInvalidMessage("Slice conditions ( <= ) are not supported on durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l[0] <= 1s");
            assertInvalidMessage("Slice conditions ( < ) are not supported on durations",
                                 "UPDATE %s SET v = 3 WHERE k = 0 IF l[0] < 1s");

            assertRows(execute("UPDATE %s SET v = 4 WHERE k = 1 IF l[0] = 2s"), row(false, list(Duration.from("5s"), Duration.from("10s"))));
            assertRows(execute("UPDATE %s SET v = 3 WHERE k = 1 IF l[0] = 5s"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("5s"), Duration.from("10s")), 3));

            assertRows(execute("UPDATE %s SET l = [10s] WHERE k = 1 IF l[1] != 10s"), row(false, list(Duration.from("5s"), Duration.from("10s"))));
            assertRows(execute("UPDATE %s SET v = 6 WHERE k = 1 IF l[1] != 1s"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("5s"), Duration.from("10s")), 6));

            assertRows(execute("UPDATE %s SET v = 5 WHERE k = 1 IF l[0] IN (2s, 10s)"), row(false, list(Duration.from("5s"), Duration.from("10s"))));
            assertRows(execute("UPDATE %s SET l = [6s, 12s] WHERE k = 1 IF l[0] IN (5s, 10s)"), row(true));

            assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, list(Duration.from("6s"), Duration.from("12s")), 6));
        }
    }

