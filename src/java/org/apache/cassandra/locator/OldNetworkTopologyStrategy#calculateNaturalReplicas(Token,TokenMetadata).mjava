    public EndpointsForRange calculateNaturalReplicas(Token token, TokenMetadata metadata)
    {
        ArrayList<Token> tokens = metadata.sortedTokens();
        if (tokens.isEmpty())
            return EndpointsForRange.empty(new Range<>(metadata.partitioner.getMinimumToken(), metadata.partitioner.getMinimumToken()));

        Iterator<Token> iter = TokenMetadata.ringIterator(tokens, token, false);
        Token primaryToken = iter.next();
        Token previousToken = metadata.getPredecessor(primaryToken);
        Range<Token> tokenRange = new Range<>(previousToken, primaryToken);

        EndpointsForRange.Builder replicas = EndpointsForRange.builder(tokenRange, rf.allReplicas);

        assert !rf.hasTransientReplicas() : "support transient replicas";
        replicas.add(new Replica(metadata.getEndpoint(primaryToken), previousToken, primaryToken, true));

        boolean bDataCenter = false;
        boolean bOtherRack = false;
        while (replicas.size() < rf.allReplicas && iter.hasNext())
        {
            // First try to find one in a different data center
            Token t = iter.next();
            if (!snitch.getDatacenter(metadata.getEndpoint(primaryToken)).equals(snitch.getDatacenter(metadata.getEndpoint(t))))
            {
                // If we have already found something in a diff datacenter no need to find another
                if (!bDataCenter)
                {
                    replicas.add(new Replica(metadata.getEndpoint(t), previousToken, primaryToken, true));
                    bDataCenter = true;
                }
                continue;
            }
            // Now  try to find one on a different rack
            if (!snitch.getRack(metadata.getEndpoint(primaryToken)).equals(snitch.getRack(metadata.getEndpoint(t))) &&
                snitch.getDatacenter(metadata.getEndpoint(primaryToken)).equals(snitch.getDatacenter(metadata.getEndpoint(t))))
            {
                // If we have already found something in a diff rack no need to find another
                if (!bOtherRack)
                {
                    replicas.add(new Replica(metadata.getEndpoint(t), previousToken, primaryToken, true));
                    bOtherRack = true;
                }
            }

        }

        // If we found N number of nodes we are good. This loop wil just exit. Otherwise just
        // loop through the list and add until we have N nodes.
        if (replicas.size() < rf.allReplicas)
        {
            iter = TokenMetadata.ringIterator(tokens, token, false);
            while (replicas.size() < rf.allReplicas && iter.hasNext())
            {
                Token t = iter.next();
                Replica replica = new Replica(metadata.getEndpoint(t), previousToken, primaryToken, true);
                if (!replicas.containsEndpoint(replica.endpoint()))
                    replicas.add(replica);
            }
        }

        return replicas.build();
    }

