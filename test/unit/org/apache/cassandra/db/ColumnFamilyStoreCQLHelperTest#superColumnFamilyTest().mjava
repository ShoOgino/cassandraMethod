    @Test
    public void superColumnFamilyTest() throws Throwable
    {
        final String KEYSPACE = "thrift_compact_table_with_supercolumns_test";
        final String TABLE = "test_table_1";

        TableMetadata.Builder table =
            TableMetadata.builder(KEYSPACE, TABLE)
                         .isSuper(true)
                         .addPartitionKeyColumn("pk", BytesType.instance)
                         .addClusteringColumn("c1", AsciiType.instance)
                         .addClusteringColumn("c2", AsciiType.instance)
                         .addRegularColumn("", MapType.getInstance(Int32Type.instance, AsciiType.instance, true));

        SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), table);

        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(TABLE);

        assertTrue(ColumnFamilyStoreCQLHelper.getTableMetadataAsCQL(cfs.metadata(), true).startsWith(
        "/*\n" +
        "Warning: Table " + KEYSPACE + "." + TABLE + " omitted because it has constructs not compatible with CQL (was created via legacy API).\n\n" +
        "Approximate structure, for reference:\n" +
        "(this should not be used to reproduce this schema)\n\n" +
        "CREATE TABLE IF NOT EXISTS " + KEYSPACE + "." + TABLE + " (\n" +
        "\tpk blob,\n" +
        "\tc1 ascii,\n" +
        "\tc2 ascii,\n" +
        "\t\"\" map<int, ascii>,\n" +
        "\tPRIMARY KEY (pk, c1, c2))\n" +
        "\tWITH ID = " + cfs.metadata.id + "\n" +
        "\tAND COMPACT STORAGE"));
    }

