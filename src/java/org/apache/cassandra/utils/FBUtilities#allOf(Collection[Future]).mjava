    /**
     * Returns a new {@link Future} wrapping the given list of futures and returning a list of their results.
     */
    public static Future<List> allOf(Collection<Future> futures)
    {
        if (futures.isEmpty())
            return CompletableFuture.completedFuture(null);

        return new Future<List>()
        {
            @Override
            @SuppressWarnings("unchecked")
            public List get() throws InterruptedException, ExecutionException
            {
                List result = new ArrayList<>(futures.size());
                for (Future current : futures)
                {
                    result.add(current.get());
                }
                return result;
            }

            @Override
            @SuppressWarnings("unchecked")
            public List get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
            {
                List result = new ArrayList<>(futures.size());
                long deadline = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, unit);
                for (Future current : futures)
                {
                    long remaining = deadline - System.nanoTime();
                    if (remaining <= 0)
                        throw new TimeoutException();

                    result.add(current.get(remaining, TimeUnit.NANOSECONDS));
                }
                return result;
            }

            @Override
            public boolean cancel(boolean mayInterruptIfRunning)
            {
                for (Future current : futures)
                {
                    if (!current.cancel(mayInterruptIfRunning))
                        return false;
                }
                return true;
            }

            @Override
            public boolean isCancelled()
            {
                for (Future current : futures)
                {
                    if (!current.isCancelled())
                        return false;
                }
                return true;
            }

            @Override
            public boolean isDone()
            {
                for (Future current : futures)
                {
                    if (!current.isDone())
                        return false;
                }
                return true;
            }
        };
    }

