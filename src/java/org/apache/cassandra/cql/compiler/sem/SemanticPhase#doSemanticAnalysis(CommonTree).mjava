    // Current code-gen also happens in this phase!
    public static Plan doSemanticAnalysis(CommonTree ast) throws SemanticException
    {
        Plan plan = null;

        if (logger_.isDebugEnabled())
            logger_.debug("AST: " + ast.toStringTree());

        switch (ast.getType())
        {
        case CqlParser.A_GET:
            plan = compileGet(ast);
            break;
        case CqlParser.A_SET:
            plan = compileSet(ast);
            break;
        case CqlParser.A_DELETE:
            compileDelete(ast);
            break;
        case CqlParser.A_SELECT:
            compileSelect(ast);
            break;
        case CqlParser.A_EXPLAIN_PLAN:
            // Case: EXPLAN PLAN <stmt>
            // first, generate a plan for <stmt>
            // and then, wrapper it with a special ExplainPlan plan
            // whose execution will result in an explain plan rather
            // than a normal execution of the statement.
            plan = doSemanticAnalysis((CommonTree)(ast.getChild(0)));
            plan = new ExplainPlan(plan);
            break;
        default:
            // Unhandled AST node. Raise an internal error. 
            throw new SemanticException(CompilerErrorMsg.INTERNAL_ERROR.getMsg(ast, "Unknown Node Type: " + ast.getType()));
        }
        return plan;
    }

