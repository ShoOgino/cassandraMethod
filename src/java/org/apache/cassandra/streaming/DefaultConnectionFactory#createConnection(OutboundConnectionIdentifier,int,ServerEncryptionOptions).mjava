    protected Channel createConnection(OutboundConnectionIdentifier connectionId, int protocolVersion, @Nullable ServerEncryptionOptions encryptionOptions) throws IOException
    {
        // this is the amount of data to allow in memory before netty sets the channel writablility flag to false
        int channelBufferSize = DEFAULT_CHANNEL_BUFFER_SIZE;
        WriteBufferWaterMark waterMark = new WriteBufferWaterMark(channelBufferSize >> 2, channelBufferSize);

        int sendBufferSize = DatabaseDescriptor.getInternodeSendBufferSize() > 0
                             ? DatabaseDescriptor.getInternodeSendBufferSize()
                             : OutboundConnectionParams.DEFAULT_SEND_BUFFER_SIZE;

        int tcpConnectTimeout = DatabaseDescriptor.getInternodeTcpConnectTimeoutInMS();
        int tcpUserTimeout = DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();

        OutboundConnectionParams params = OutboundConnectionParams.builder()
                                                                  .connectionId(connectionId)
                                                                  .encryptionOptions(encryptionOptions)
                                                                  .mode(NettyFactory.Mode.STREAMING)
                                                                  .protocolVersion(protocolVersion)
                                                                  .sendBufferSize(sendBufferSize)
                                                                  .tcpConnectTimeoutInMS(tcpConnectTimeout)
                                                                  .tcpUserTimeoutInMS(tcpUserTimeout)
                                                                  .waterMark(waterMark)
                                                                  .build();

        Bootstrap bootstrap = NettyFactory.instance.createOutboundBootstrap(params);

        int connectionAttemptCount = 0;
        long now = System.nanoTime();
        final long end = now + MAX_WAIT_TIME_NANOS;
        final Channel channel;
        while (true)
        {
            ChannelFuture channelFuture = bootstrap.connect();
            channelFuture.awaitUninterruptibly(end - now, TimeUnit.MILLISECONDS);
            if (channelFuture.isSuccess())
            {
                channel = channelFuture.channel();
                break;
            }

            connectionAttemptCount++;
            now = System.nanoTime();
            if (connectionAttemptCount == MAX_CONNECT_ATTEMPTS || end - now <= 0)
                throw new IOException("failed to connect to " + connectionId + " for streaming data", channelFuture.cause());

            long waitms = DatabaseDescriptor.getRpcTimeout() * (long)Math.pow(2, connectionAttemptCount);
            logger.warn("Failed attempt {} to connect to {}. Retrying in {} ms.", connectionAttemptCount, connectionId, waitms);
            Uninterruptibles.sleepUninterruptibly(waitms, TimeUnit.MILLISECONDS);
        }

        return channel;
    }

