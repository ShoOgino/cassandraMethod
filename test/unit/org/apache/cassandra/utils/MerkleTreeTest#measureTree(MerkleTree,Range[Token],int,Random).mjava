    private long measureTree(MerkleTree tree, Range<Token> fullRange, int depth, Random random)
    {
        tree = new MerkleTree(tree.partitioner(), fullRange, RECOMMENDED_DEPTH, (long) Math.pow(2, depth));
        // Initializes it as a fully balanced tree.
        tree.init();

        byte[] key = new byte[128];
        // Try to actually allocate some hashes. Note that this is not guaranteed to actually populate the tree,
        // but we re-use the source of randomness to try to make it reproducible.
        for (int i = 0; i < tree.maxsize() * 8; i++)
        {
            random.nextBytes(key);
            Token token = tree.partitioner().getToken(ByteBuffer.wrap(key));
            tree.get(token).addHash(new RowHash(token, new byte[32], 32));
        }

        tree.hash(fullRange);
        return ObjectSizes.measureDeep(tree);
    }

