                /**
                 * Update the tracker given the provided newly open tombstone. This return the Unfiltered corresponding to the opening
                 * of said tombstone: this can be a simple open mark, a boundary (if there was an open tombstone superseded by this new one)
                 * or even null (if the new tombstone start is supersedes by the currently open tombstone).
                 *
                 * Note that this method assume the added tombstone is not fully shadowed, i.e. that !isShadowed(tombstone). It also
                 * assumes no opened tombstone closes before that tombstone (so !hasClosingMarkerBefore(tombstone)).
                 */
                public Unfiltered openNew(LegacyLayout.LegacyRangeTombstone tombstone)
                {
                    if (openTombstones.isEmpty())
                    {
                        openTombstones.add(tombstone);
                        return new RangeTombstoneBoundMarker(tombstone.start.bound, tombstone.deletionTime);
                    }

                    // Add the new tombstone, and then check if it changes the currently open deletion or not.
                    // Note: we grab the first tombstone (which represents the currently open deletion time) before adding
                    // because add() can remove that first.
                    Iterator<LegacyLayout.LegacyRangeTombstone> iter = openTombstones.iterator();
                    LegacyLayout.LegacyRangeTombstone first = iter.next();

                    add(tombstone);

                    // If the newly opened tombstone superseds the currently open one, we have to produce a boundary to change
                    // the currently open deletion time, otherwise we have nothing to do.
                    return tombstone.deletionTime.supersedes(first.deletionTime)
                           ? RangeTombstoneBoundaryMarker.makeBoundary(false, tombstone.start.bound.invert(), tombstone.start.bound, first.deletionTime, tombstone.deletionTime)
                           : null;
                }

