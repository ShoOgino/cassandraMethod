    /**
     * For dc local consistency levels, noop mutations and responses from remote dcs should not affect effective blockFor
     */
    @Test
    public void remoteDCTest() throws Exception
    {
        Map<Replica, Mutation> repairs = new HashMap<>();
        repairs.put(replica1, mutation(cell1));

        Replica remote1 = ReplicaUtils.full(InetAddressAndPort.getByName("10.0.0.1"));
        Replica remote2 = ReplicaUtils.full(InetAddressAndPort.getByName("10.0.0.2"));
        repairs.put(remote1, mutation(cell1));

        EndpointsForRange participants = EndpointsForRange.of(replica1, replica2, remote1, remote2);
        ReplicaLayout.ForRange replicaLayout = new ReplicaLayout.ForRange(ks, ConsistencyLevel.LOCAL_QUORUM, ReplicaUtils.FULL_BOUNDS, participants, participants);
        InstrumentedReadRepairHandler handler = createRepairHandler(repairs, 2, replicaLayout);
        handler.sendInitialRepairs();
        Assert.assertEquals(2, handler.mutationsSent.size());
        Assert.assertTrue(handler.mutationsSent.containsKey(replica1.endpoint()));
        Assert.assertTrue(handler.mutationsSent.containsKey(remote1.endpoint()));

        Assert.assertEquals(1, handler.waitingOn());
        Assert.assertFalse(handler.awaitRepairs(0, TimeUnit.NANOSECONDS));

        handler.ack(remote1.endpoint());
        Assert.assertEquals(1, handler.waitingOn());
        Assert.assertFalse(handler.awaitRepairs(0, TimeUnit.NANOSECONDS));

        handler.ack(replica1.endpoint());
        Assert.assertEquals(0, handler.waitingOn());
        Assert.assertTrue(handler.awaitRepairs(0, TimeUnit.NANOSECONDS));
    }

