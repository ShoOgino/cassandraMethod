    /**
     * get a list of columns starting from a given column, in a specified order.
     * only the latest version of a column is returned.
     * @return null if there is no data and no tombstones; otherwise a ColumnFamily
     */
    public ColumnFamily getColumnFamily(QueryFilter filter) throws IOException
    {
        String[] values = RowMutation.getColumnAndColumnFamily(filter.columnFamilyColumn);

        // if we are querying subcolumns of a supercolumn, fetch the supercolumn with NQF, then filter in-memory.
        if (values.length > 1)
        {
            QueryFilter nameFilter = new NamesQueryFilter(filter.key, values[0], values[1]);
            ColumnFamily cf = getColumnFamily(nameFilter);
            if (cf != null)
            {
                for (IColumn column : cf.getAllColumns())
                {
                    filter.filterSuperColumn((SuperColumn) column);
                }
            }
            return removeDeleted(cf);
        }

        // we are querying top-level columns, do a merging fetch with indexes.
        sstableLock_.readLock().lock();
        List<ColumnIterator> iterators = new ArrayList<ColumnIterator>();
        try
        {
            final ColumnFamily returnCF;
            ColumnIterator iter;
        
            /* add the current memtable */
            memtableLock_.readLock().lock();
            try
            {
                iter = filter.getMemColumnIterator(memtable_);
                returnCF = iter.getColumnFamily();
            }
            finally
            {
                memtableLock_.readLock().unlock();            
            }        
            iterators.add(iter);

            /* add the memtables being flushed */
            List<Memtable> memtables = getUnflushedMemtables(filter.getColumnFamilyName());
            for (Memtable memtable:memtables)
            {
                iter = filter.getMemColumnIterator(memtable);
                returnCF.delete(iter.getColumnFamily());
                iterators.add(iter);
            }

            /* add the SSTables on disk */
            List<SSTableReader> sstables = new ArrayList<SSTableReader>(ssTables_.values());
            for (SSTableReader sstable : sstables)
            {
                iter = filter.getSSTableColumnIterator(sstable);
                if (iter.hasNext()) // initializes iter.CF
                {
                    returnCF.delete(iter.getColumnFamily());
                }
                iterators.add(iter);
            }

            Comparator<IColumn> comparator = filter.getColumnComparator();
            Iterator collated = IteratorUtils.collatedIterator(comparator, iterators);
            if (!collated.hasNext())
                return null;

            filter.collectColumns(returnCF, collated);

            return removeDeleted(returnCF);
        }
        finally
        {
            /* close all cursors */
            for (ColumnIterator ci : iterators)
            {
                try
                {
                    ci.close();
                }
                catch (Throwable th)
                {
                    logger_.error(th);
                }
            }

            sstableLock_.readLock().unlock();
        }
    }

