    public static Selection fromSelectors(CFDefinition cfDef, List<RawSelector> rawSelectors) throws InvalidRequestException
    {
        boolean needsProcessing = selectionsNeedProcessing(rawSelectors);

        if (needsProcessing)
        {
            List<CFDefinition.Name> names = new ArrayList<CFDefinition.Name>();
            SelectionColumnMapping columnMapping = SelectionColumnMapping.newMapping();
            List<Selector> selectors = new ArrayList<Selector>(rawSelectors.size());
            boolean collectTimestamps = false;
            boolean collectTTLs = false;
            for (RawSelector rawSelector : rawSelectors)
            {
                Selector selector = makeSelector(cfDef, rawSelector, names, columnMapping);
                selectors.add(selector);
                collectTimestamps |= selector.usesTimestamps();
                collectTTLs |= selector.usesTTLs();
            }
            return new SelectionWithProcessing(names, columnMapping, selectors, collectTimestamps, collectTTLs);
        }
        else
        {
            List<CFDefinition.Name> names = new ArrayList<CFDefinition.Name>(rawSelectors.size());
            SelectionColumnMapping columnMapping = SelectionColumnMapping.newMapping();
            for (RawSelector rawSelector : rawSelectors)
            {
                assert rawSelector.selectable instanceof ColumnIdentifier.Raw;
                ColumnIdentifier id = ((ColumnIdentifier.Raw)rawSelector.selectable).prepare(cfDef.cfm);
                CFDefinition.Name name = cfDef.get(id);
                if (name == null)
                    throw new InvalidRequestException(String.format("Undefined name %s in selection clause", id));
                names.add(name);
                columnMapping.addMapping(rawSelector.alias == null ? name : makeAliasSpec(cfDef,
                                                                                          name.type,
                                                                                          rawSelector.alias),
                                         name);
            }
            return new SimpleSelection(names, columnMapping);
        }
    }

