      public void read(org.apache.thrift.protocol.TProtocol iprot, describe_splits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CF_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cfName = iprot.readString();
                struct.setCfNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.start_token = iprot.readString();
                struct.setStart_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.end_token = iprot.readString();
                struct.setEnd_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KEYS_PER_SPLIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.keys_per_split = iprot.readI32();
                struct.setKeys_per_splitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetKeys_per_split()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'keys_per_split' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

