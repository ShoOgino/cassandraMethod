    /**
     * Format the given value as a valid CQL literal according to the CQL type handled by this codec.
     *
     * <p>Implementors should take care of quoting and escaping the resulting CQL literal where
     * applicable. Null values should be accepted; in most cases, implementations should return the
     * CQL keyword {@code "NULL"} for {@code null} inputs.
     *
     * <p>Implementing this method is not strictly mandatory. It is used:
     *
     * <ol>
     * <li>in the query builder, when values are inlined in the query string (see {@code
     * querybuilder.BuiltStatement} for a detailed explanation of when
     * this happens);
     * <li>in the {@code QueryLogger}, if parameter logging is enabled;
     * <li>to format the INITCOND in {@code AggregateMetadata#asCQLQuery(boolean)};
     * <li>in the {@code toString()} implementation of some objects ({@link UDTValue}, {@link
     * TupleValue}, and the internal representation of a {@code ROWS} response), which may
     * appear in driver logs.
     * </ol>
     * <p>
     * If you choose not to implement this method, you should not throw an exception but instead
     * return a constant string (for example "XxxCodec.format not implemented").
     *
     * @param value An instance of T; may be {@code null}.
     * @return CQL string
     * @throws InvalidTypeException if the given value does not have the expected type
     */
    public abstract String format(T value) throws InvalidTypeException;

