    private static void setEnv(Map<String, String> newenv) throws ReflectiveOperationException
    {
        try
        {
            Class<?> cls = Class.forName("java.lang.ProcessEnvironment");
            Field field = cls.getDeclaredField("theEnvironment");
            field.setAccessible(true);
            Map<String, String> envMap = (Map<String, String>) field.get(null);
            envMap.clear();
            envMap.putAll(newenv);
            field = cls.getDeclaredField("theCaseInsensitiveEnvironment");
            field.setAccessible(true);
            envMap = (Map<String, String>) field.get(null);
            envMap.clear();
            envMap.putAll(newenv);
        }
        catch (NoSuchFieldException ignore)
        {
            Class[] classes = Collections.class.getDeclaredClasses();
            Map<String, String> envMap = System.getenv();
            for(Class cl : classes) {
                if("java.util.Collections$UnmodifiableMap".equals(cl.getName()))
                {
                    Field field = cl.getDeclaredField("m");
                    field.setAccessible(true);
                    Object obj = field.get(envMap);
                    envMap = (Map<String, String>) obj;
                    envMap.clear();
                    envMap.putAll(newenv);
                }
            }
        }
    }

