    private Map<EndPoint, EndPoint> getHintedMapForEndpoints(EndPoint[] topN)
    {
        Set<EndPoint> usedEndpoints = new HashSet<EndPoint>();
        Map<EndPoint, EndPoint> map = new HashMap<EndPoint, EndPoint>();

        for (EndPoint ep : topN)
        {
            if (FailureDetector.instance().isAlive(ep))
            {
                map.put(ep, ep);
                usedEndpoints.add(ep);
            }
            else
            {
                // find another endpoint to store a hint on.  prefer endpoints that aren't already in use
                EndPoint hintLocation = null;
                Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
                List tokens = new ArrayList(tokenToEndPointMap.keySet());
                Collections.sort(tokens);
                Token token = tokenMetadata_.getToken(ep);
                int index = Collections.binarySearch(tokens, token);
                if (index < 0)
                {
                    index = (index + 1) * (-1);
                    if (index >= tokens.size()) // handle wrap
                        index = 0;
                }
                int totalNodes = tokens.size();
                int startIndex = (index + 1) % totalNodes;
                for (int i = startIndex, count = 1; count < totalNodes; ++count, i = (i + 1) % totalNodes)
                {
                    EndPoint tmpEndPoint = tokenToEndPointMap.get(tokens.get(i));
                    if (FailureDetector.instance().isAlive(tmpEndPoint) && !Arrays.asList(topN).contains(tmpEndPoint) && !usedEndpoints.contains(tmpEndPoint))
                    {
                        hintLocation = tmpEndPoint;
                        break;
                    }
                }
                // if all endpoints are already in use, might as well store it locally to save the network trip
                if (hintLocation == null)
                    hintLocation = StorageService.getLocalControlEndPoint();

                map.put(hintLocation, ep);
                usedEndpoints.add(hintLocation);
            }
        }
        return map;
    }

