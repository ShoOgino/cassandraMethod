    private List<ByteBuffer> getRequestedColumns(List<ByteBuffer> variables) throws InvalidRequestException
    {
        assert !isColumnRange();

        ColumnNameBuilder builder = cfDef.getColumnNameBuilder();
        for (Restriction r : columnRestrictions)
        {
            assert r != null && r.isEquality();
            if (r.eqValues.size() > 1)
            {
                // We have a IN. We only support this for the last column, so just create all columns and return.
                List<ByteBuffer> columns = new ArrayList<ByteBuffer>(r.eqValues.size());
                Iterator<Term> iter = r.eqValues.iterator();
                while (iter.hasNext())
                {
                    Term v = iter.next();
                    ColumnNameBuilder b = iter.hasNext() ? builder.copy() : builder;
                    ByteBuffer cname = b.add(v, Relation.Type.EQ, variables).build();
                    columns.add(cname);
                }
                return columns;
            }
            else
            {
                builder.add(r.eqValues.get(0), Relation.Type.EQ, variables);
            }
        }

        if (cfDef.isCompact)
        {
            return Collections.singletonList(builder.build());
        }
        else
        {
            // Adds all (requested) columns
            List<Pair<CFDefinition.Name, ColumnIdentifier>> selection = getExpandedSelection();
            List<ByteBuffer> columns = new ArrayList<ByteBuffer>(selection.size());
            Iterator<Pair<CFDefinition.Name, ColumnIdentifier>> iter = selection.iterator();
            while (iter.hasNext())
            {
                CFDefinition.Name name = iter.next().left;
                // Skip everything that is not a 'metadata' column
                if (name.kind != CFDefinition.Name.Kind.COLUMN_METADATA)
                    continue;
                ColumnNameBuilder b = iter.hasNext() ? builder.copy() : builder;
                ByteBuffer cname = b.add(name.name.key).build();
                columns.add(cname);
            }
            return columns;
        }
    }

