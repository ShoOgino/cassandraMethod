        void searchInternal(Interval<C, D> searchInterval, List<D> results)
        {
            if (contains(searchInterval, center))
            {
                // Adds every interval contained in this node to the result set then search left and right for further
                // overlapping intervals
                for (Interval<C, D> interval : intersectsLeft)
                    results.add(interval.data);

                if (left != null)
                    left.searchInternal(searchInterval, results);
                if (right != null)
                    right.searchInternal(searchInterval, results);
            }
            else if (comparePoints(center, searchInterval.min) < 0)
            {
                // Adds intervals i in intersects right as long as i.max >= searchInterval.min
                // then search right
                for (Interval<C, D> interval : intersectsRight)
                {
                    if (comparePoints(interval.max, searchInterval.min) >= 0)
                        results.add(interval.data);
                    else
                        break;
                }
                if (right != null)
                    right.searchInternal(searchInterval, results);
            }
            else
            {
                assert comparePoints(center, searchInterval.max) > 0;
                // Adds intervals i in intersects left as long as i.min >= searchInterval.max
                // then search left
                for (Interval<C, D> interval : intersectsLeft)
                {
                    if (comparePoints(interval.min, searchInterval.max) <= 0)
                        results.add(interval.data);
                    else
                        break;
                }
                if (left != null)
                    left.searchInternal(searchInterval, results);
            }
        }

