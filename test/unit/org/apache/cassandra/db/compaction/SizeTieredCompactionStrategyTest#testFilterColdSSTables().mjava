    @Test
    public void testFilterColdSSTables() throws Exception
    {
        String ksname = "Keyspace1";
        String cfname = "Standard1";
        Keyspace keyspace = Keyspace.open(ksname);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);
        cfs.truncateBlocking();
        cfs.disableAutoCompaction();

        ByteBuffer value = ByteBuffer.wrap(new byte[100]);

        // create 10 sstables
        int numSSTables = 10;
        for (int r = 0; r < numSSTables; r++)
        {
            DecoratedKey key = Util.dk(String.valueOf(r));
            Mutation rm = new Mutation(ksname, key.getKey());
            rm.add(cfname, Util.cellname("column"), value, 0);
            rm.apply();
            cfs.forceBlockingFlush();
        }
        cfs.forceBlockingFlush();

        List<SSTableReader> filtered;
        List<SSTableReader> sstrs = new ArrayList<>(cfs.getSSTables());

        for (SSTableReader sstr : sstrs)
            sstr.overrideReadMeter(null);
        filtered = filterColdSSTables(sstrs, 0.05, 0);
        assertEquals("when there are no read meters, no sstables should be filtered", sstrs.size(), filtered.size());

        for (SSTableReader sstr : sstrs)
            sstr.overrideReadMeter(new RestorableMeter(0.0, 0.0));
        filtered = filterColdSSTables(sstrs, 0.05, 0);
        assertEquals("when all read meters are zero, no sstables should be filtered", sstrs.size(), filtered.size());

        // leave all read rates at 0 besides one
        sstrs.get(0).overrideReadMeter(new RestorableMeter(1000.0, 1000.0));
        filtered = filterColdSSTables(sstrs, 0.05, 0);
        assertEquals("there should only be one hot sstable", 1, filtered.size());
        assertEquals(1000.0, filtered.get(0).getReadMeter().twoHourRate(), 0.5);

        // the total read rate is 100, and we'll set a threshold of 2.5%, so two of the sstables with read
        // rate 1.0 should be ignored, but not the third
        for (SSTableReader sstr : sstrs)
            sstr.overrideReadMeter(new RestorableMeter(0.0, 0.0));
        sstrs.get(0).overrideReadMeter(new RestorableMeter(97.0, 97.0));
        sstrs.get(1).overrideReadMeter(new RestorableMeter(1.0, 1.0));
        sstrs.get(2).overrideReadMeter(new RestorableMeter(1.0, 1.0));
        sstrs.get(3).overrideReadMeter(new RestorableMeter(1.0, 1.0));

        filtered = filterColdSSTables(sstrs, 0.025, 0);
        assertEquals(2, filtered.size());
        assertEquals(98.0, filtered.get(0).getReadMeter().twoHourRate() + filtered.get(1).getReadMeter().twoHourRate(), 0.5);

        // make sure a threshold of 0.0 doesn't result in any sstables being filtered
        for (SSTableReader sstr : sstrs)
            sstr.overrideReadMeter(new RestorableMeter(1.0, 1.0));
        filtered = filterColdSSTables(sstrs, 0.0, 0);
        assertEquals(sstrs.size(), filtered.size());

        // just for fun, set a threshold where all sstables are considered cold
        for (SSTableReader sstr : sstrs)
            sstr.overrideReadMeter(new RestorableMeter(1.0, 1.0));
        filtered = filterColdSSTables(sstrs, 1.0, 0);
        assertTrue(filtered.isEmpty());
    }

