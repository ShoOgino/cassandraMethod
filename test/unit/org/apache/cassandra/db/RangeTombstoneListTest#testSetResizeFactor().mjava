    @Test
    public void testSetResizeFactor()
    {
        double original = DatabaseDescriptor.getRangeTombstoneListGrowthFactor();
        final StorageService storageService = StorageService.instance;
        final Consumer<Throwable> expectIllegalStateExceptio = exception -> {
            assertSame(IllegalStateException.class, exception.getClass());
            assertEquals("Not updating range_tombstone_resize_factor as growth factor must be in the range [1.2, 5.0] inclusive" , exception.getMessage());
        };
        try
        {
            // prevent bad ones
            assertHasException(() -> storageService.setRangeTombstoneListResizeGrowthFactor(-1), expectIllegalStateExceptio);
            assertHasException(() -> storageService.setRangeTombstoneListResizeGrowthFactor(0), expectIllegalStateExceptio);
            assertHasException(() -> storageService.setRangeTombstoneListResizeGrowthFactor(1.1), expectIllegalStateExceptio);
            assertHasException(() -> storageService.setRangeTombstoneListResizeGrowthFactor(5.1), expectIllegalStateExceptio);

            // accept good ones
            storageService.setRangeTombstoneListResizeGrowthFactor(1.2);
            storageService.setRangeTombstoneListResizeGrowthFactor(2.0);
            storageService.setRangeTombstoneListResizeGrowthFactor(5.0);
        }
        finally
        {
            storageService.setRangeTombstoneListResizeGrowthFactor(original);
        }
    }

