    /*
     * Loop through all the disks to see which disk has the max free space
     * return the disk with max free space for compactions. If the size of the expected
     * compacted file is greater than the max disk space available return null, we cannot
     * do compaction in this case.
     *
     * Should only be called by Table.getDataFileLocation, which knows how to free up extra space under
     * some contitions to retry.  (Left public because some test methods cheat and call this directly.)
     *
     * @param table name of the table.
     * @param expectedCompactedSize expected file size in bytes.
     */
    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)
    {
        long maxFreeDisk = 0;
        int maxDiskIndex = 0;
        String dataFileDirectory = null;
        String[] dataDirectoryForTable = getAllDataFileLocationsForTable(table);

        for (int i = 0; i < dataDirectoryForTable.length; i++)
        {
            File f = new File(dataDirectoryForTable[i]);

            if (maxFreeDisk < f.getUsableSpace())
            {
                maxFreeDisk = f.getUsableSpace();
                maxDiskIndex = i;
            }
        }

        // Load factor of 0.9 we do not want to use the entire disk that is too risky.
        maxFreeDisk = (long) (0.9 * maxFreeDisk);
        logger.debug("expected data files size is {}; largest free partition has {} bytes usable",
                     expectedCompactedFileSize, maxFreeDisk);

        if (expectedCompactedFileSize < maxFreeDisk)
            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];

        return dataFileDirectory;
    }

