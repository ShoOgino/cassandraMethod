    @Override
    public String getString(ByteBuffer value)
    {
        StringBuilder sb = new StringBuilder();
        ByteBuffer input = value.duplicate();
        for (int i = 0; i < fieldTypes.size(); i++)
        {
            if (!input.hasRemaining())
                return sb.toString();

            if (i > 0)
                sb.append(":");

            AbstractType<?> type = fieldTypes.get(i);
            int size = input.getInt();
            assert size >= 0; // We don't support nulls yet, but we will likely do with #7206 and we'll need
                              // a way to represent it as a string (without it conflicting with a user value)
            ByteBuffer field = ByteBufferUtil.readBytes(input, size);
            // We use ':' as delimiter so escape it if it's in the generated string
            sb.append(field == null ? "null" : type.getString(value).replaceAll(":", "\\\\:"));
        }
        return sb.toString();
    }

