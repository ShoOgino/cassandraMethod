    /**
     * Compute a row mutation for a single key
     *
     * @return row mutation
     *
     * @throws InvalidRequestException on the wrong request
     */
    private IMutation mutationForKey(CFDefinition cfDef, ByteBuffer key, ColumnNameBuilder builder, UpdateParameters params, ConsistencyLevel cl, boolean isBatch)
    throws InvalidRequestException
    {
        validateKey(key);

        QueryProcessor.validateKey(key);
        ColumnFamily cf = ColumnFamily.create(Schema.instance.getCFMetaData(cfDef.cfm.ksName, cfDef.cfm.cfName));

        // Inserting the CQL row marker (see #4361)
        // We always need to insert a marker, because of the following situation:
        //   CREATE TABLE t ( k int PRIMARY KEY, c text );
        //   INSERT INTO t(k, c) VALUES (1, 1)
        //   DELETE c FROM t WHERE k = 1;
        //   SELECT * FROM t;
        // The last query should return one row (but with c == null). Adding
        // the marker with the insert make sure the semantic is correct (while making sure a
        // 'DELETE FROM t WHERE k = 1' does remove the row entirely)
        //
        // We never insert markers for Super CF as this would confuse the thrift side.
        if (cfDef.isComposite && !cfDef.isCompact && !cfDef.cfm.isSuper())
        {
            ByteBuffer name = builder.copy().add(ByteBufferUtil.EMPTY_BYTE_BUFFER).build();
            cf.addColumn(params.makeColumn(name, ByteBufferUtil.EMPTY_BYTE_BUFFER));
        }

        if (cfDef.isCompact)
        {
            if (builder.componentCount() == 0)
                throw new InvalidRequestException(String.format("Missing PRIMARY KEY part %s", cfDef.columns.values().iterator().next()));

            if (cfDef.value == null)
            {
                // compact + no compact value implies there is no column outside the PK. So no operation could
                // have passed through validation
                assert processedColumns.isEmpty();
                setToEmptyOperation.execute(key, cf, builder.copy(), params);
            }
            else
            {
                // compact means we don't have a row marker, so don't accept to set only the PK (Note: we
                // could accept it and use an empty value!?)
                if (processedColumns.isEmpty())
                    throw new InvalidRequestException(String.format("Missing mandatory column %s", cfDef.value));

                for (Operation op : processedColumns)
                    op.execute(key, cf, builder.copy(), params);
            }
        }
        else
        {
            for (Operation op : processedColumns)
                op.execute(key, cf, builder.copy(), params);
        }

        RowMutation rm;
        if (isBatch)
        {
            // we might group other mutations together with this one later, so make it mutable
            rm = new RowMutation(cfDef.cfm.ksName, key);
            rm.add(cf);
        }
        else
        {
            rm = new RowMutation(cfDef.cfm.ksName, key, cf);
        }
        return type == Type.COUNTER ? new CounterMutation(rm, cl) : rm;
    }

