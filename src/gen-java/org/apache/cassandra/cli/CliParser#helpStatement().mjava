    // $ANTLR start "helpStatement"
    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:175:1: helpStatement : ( HELP HELP -> ^( NODE_HELP NODE_HELP ) | HELP CONNECT -> ^( NODE_HELP NODE_CONNECT ) | HELP USE -> ^( NODE_HELP NODE_USE_TABLE ) | HELP DESCRIBE KEYSPACE -> ^( NODE_HELP NODE_DESCRIBE_TABLE ) | HELP DESCRIBE 'CLUSTER' -> ^( NODE_HELP NODE_DESCRIBE_CLUSTER ) | HELP EXIT -> ^( NODE_HELP NODE_EXIT ) | HELP QUIT -> ^( NODE_HELP NODE_EXIT ) | HELP SHOW 'CLUSTER NAME' -> ^( NODE_HELP NODE_SHOW_CLUSTER_NAME ) | HELP SHOW KEYSPACES -> ^( NODE_HELP NODE_SHOW_KEYSPACES ) | HELP SHOW API_VERSION -> ^( NODE_HELP NODE_SHOW_VERSION ) | HELP CREATE KEYSPACE -> ^( NODE_HELP NODE_ADD_KEYSPACE ) | HELP UPDATE KEYSPACE -> ^( NODE_HELP NODE_UPDATE_KEYSPACE ) | HELP CREATE COLUMN FAMILY -> ^( NODE_HELP NODE_ADD_COLUMN_FAMILY ) | HELP UPDATE COLUMN FAMILY -> ^( NODE_HELP NODE_UPDATE_COLUMN_FAMILY ) | HELP DROP KEYSPACE -> ^( NODE_HELP NODE_DEL_KEYSPACE ) | HELP DROP COLUMN FAMILY -> ^( NODE_HELP NODE_DEL_COLUMN_FAMILY ) | HELP DROP INDEX -> ^( NODE_HELP NODE_DROP_INDEX ) | HELP GET -> ^( NODE_HELP NODE_THRIFT_GET ) | HELP SET -> ^( NODE_HELP NODE_THRIFT_SET ) | HELP INCR -> ^( NODE_HELP NODE_THRIFT_INCR ) | HELP DECR -> ^( NODE_HELP NODE_THRIFT_DECR ) | HELP DEL -> ^( NODE_HELP NODE_THRIFT_DEL ) | HELP COUNT -> ^( NODE_HELP NODE_THRIFT_COUNT ) | HELP LIST -> ^( NODE_HELP NODE_LIST ) | HELP TRUNCATE -> ^( NODE_HELP NODE_TRUNCATE ) | HELP ASSUME -> ^( NODE_HELP NODE_ASSUME ) | HELP CONSISTENCYLEVEL -> ^( NODE_HELP NODE_CONSISTENCY_LEVEL ) | HELP -> ^( NODE_HELP ) | '?' -> ^( NODE_HELP ) );
    public final CliParser.helpStatement_return helpStatement() throws RecognitionException {
        CliParser.helpStatement_return retval = new CliParser.helpStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token HELP39=null;
        Token HELP40=null;
        Token HELP41=null;
        Token CONNECT42=null;
        Token HELP43=null;
        Token USE44=null;
        Token HELP45=null;
        Token DESCRIBE46=null;
        Token KEYSPACE47=null;
        Token HELP48=null;
        Token DESCRIBE49=null;
        Token string_literal50=null;
        Token HELP51=null;
        Token EXIT52=null;
        Token HELP53=null;
        Token QUIT54=null;
        Token HELP55=null;
        Token SHOW56=null;
        Token string_literal57=null;
        Token HELP58=null;
        Token SHOW59=null;
        Token KEYSPACES60=null;
        Token HELP61=null;
        Token SHOW62=null;
        Token API_VERSION63=null;
        Token HELP64=null;
        Token CREATE65=null;
        Token KEYSPACE66=null;
        Token HELP67=null;
        Token UPDATE68=null;
        Token KEYSPACE69=null;
        Token HELP70=null;
        Token CREATE71=null;
        Token COLUMN72=null;
        Token FAMILY73=null;
        Token HELP74=null;
        Token UPDATE75=null;
        Token COLUMN76=null;
        Token FAMILY77=null;
        Token HELP78=null;
        Token DROP79=null;
        Token KEYSPACE80=null;
        Token HELP81=null;
        Token DROP82=null;
        Token COLUMN83=null;
        Token FAMILY84=null;
        Token HELP85=null;
        Token DROP86=null;
        Token INDEX87=null;
        Token HELP88=null;
        Token GET89=null;
        Token HELP90=null;
        Token SET91=null;
        Token HELP92=null;
        Token INCR93=null;
        Token HELP94=null;
        Token DECR95=null;
        Token HELP96=null;
        Token DEL97=null;
        Token HELP98=null;
        Token COUNT99=null;
        Token HELP100=null;
        Token LIST101=null;
        Token HELP102=null;
        Token TRUNCATE103=null;
        Token HELP104=null;
        Token ASSUME105=null;
        Token HELP106=null;
        Token CONSISTENCYLEVEL107=null;
        Token HELP108=null;
        Token char_literal109=null;

        CommonTree HELP39_tree=null;
        CommonTree HELP40_tree=null;
        CommonTree HELP41_tree=null;
        CommonTree CONNECT42_tree=null;
        CommonTree HELP43_tree=null;
        CommonTree USE44_tree=null;
        CommonTree HELP45_tree=null;
        CommonTree DESCRIBE46_tree=null;
        CommonTree KEYSPACE47_tree=null;
        CommonTree HELP48_tree=null;
        CommonTree DESCRIBE49_tree=null;
        CommonTree string_literal50_tree=null;
        CommonTree HELP51_tree=null;
        CommonTree EXIT52_tree=null;
        CommonTree HELP53_tree=null;
        CommonTree QUIT54_tree=null;
        CommonTree HELP55_tree=null;
        CommonTree SHOW56_tree=null;
        CommonTree string_literal57_tree=null;
        CommonTree HELP58_tree=null;
        CommonTree SHOW59_tree=null;
        CommonTree KEYSPACES60_tree=null;
        CommonTree HELP61_tree=null;
        CommonTree SHOW62_tree=null;
        CommonTree API_VERSION63_tree=null;
        CommonTree HELP64_tree=null;
        CommonTree CREATE65_tree=null;
        CommonTree KEYSPACE66_tree=null;
        CommonTree HELP67_tree=null;
        CommonTree UPDATE68_tree=null;
        CommonTree KEYSPACE69_tree=null;
        CommonTree HELP70_tree=null;
        CommonTree CREATE71_tree=null;
        CommonTree COLUMN72_tree=null;
        CommonTree FAMILY73_tree=null;
        CommonTree HELP74_tree=null;
        CommonTree UPDATE75_tree=null;
        CommonTree COLUMN76_tree=null;
        CommonTree FAMILY77_tree=null;
        CommonTree HELP78_tree=null;
        CommonTree DROP79_tree=null;
        CommonTree KEYSPACE80_tree=null;
        CommonTree HELP81_tree=null;
        CommonTree DROP82_tree=null;
        CommonTree COLUMN83_tree=null;
        CommonTree FAMILY84_tree=null;
        CommonTree HELP85_tree=null;
        CommonTree DROP86_tree=null;
        CommonTree INDEX87_tree=null;
        CommonTree HELP88_tree=null;
        CommonTree GET89_tree=null;
        CommonTree HELP90_tree=null;
        CommonTree SET91_tree=null;
        CommonTree HELP92_tree=null;
        CommonTree INCR93_tree=null;
        CommonTree HELP94_tree=null;
        CommonTree DECR95_tree=null;
        CommonTree HELP96_tree=null;
        CommonTree DEL97_tree=null;
        CommonTree HELP98_tree=null;
        CommonTree COUNT99_tree=null;
        CommonTree HELP100_tree=null;
        CommonTree LIST101_tree=null;
        CommonTree HELP102_tree=null;
        CommonTree TRUNCATE103_tree=null;
        CommonTree HELP104_tree=null;
        CommonTree ASSUME105_tree=null;
        CommonTree HELP106_tree=null;
        CommonTree CONSISTENCYLEVEL107_tree=null;
        CommonTree HELP108_tree=null;
        CommonTree char_literal109_tree=null;
        RewriteRuleTokenStream stream_EXIT=new RewriteRuleTokenStream(adaptor,"token EXIT");
        RewriteRuleTokenStream stream_HELP=new RewriteRuleTokenStream(adaptor,"token HELP");
        RewriteRuleTokenStream stream_DEL=new RewriteRuleTokenStream(adaptor,"token DEL");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_KEYSPACES=new RewriteRuleTokenStream(adaptor,"token KEYSPACES");
        RewriteRuleTokenStream stream_API_VERSION=new RewriteRuleTokenStream(adaptor,"token API_VERSION");
        RewriteRuleTokenStream stream_CONSISTENCYLEVEL=new RewriteRuleTokenStream(adaptor,"token CONSISTENCYLEVEL");
        RewriteRuleTokenStream stream_LIST=new RewriteRuleTokenStream(adaptor,"token LIST");
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_QUIT=new RewriteRuleTokenStream(adaptor,"token QUIT");
        RewriteRuleTokenStream stream_KEYSPACE=new RewriteRuleTokenStream(adaptor,"token KEYSPACE");
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONNECT=new RewriteRuleTokenStream(adaptor,"token CONNECT");
        RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
        RewriteRuleTokenStream stream_INCR=new RewriteRuleTokenStream(adaptor,"token INCR");
        RewriteRuleTokenStream stream_ASSUME=new RewriteRuleTokenStream(adaptor,"token ASSUME");
        RewriteRuleTokenStream stream_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token TRUNCATE");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleTokenStream stream_COLUMN=new RewriteRuleTokenStream(adaptor,"token COLUMN");
        RewriteRuleTokenStream stream_FAMILY=new RewriteRuleTokenStream(adaptor,"token FAMILY");
        RewriteRuleTokenStream stream_DECR=new RewriteRuleTokenStream(adaptor,"token DECR");
        RewriteRuleTokenStream stream_GET=new RewriteRuleTokenStream(adaptor,"token GET");
        RewriteRuleTokenStream stream_USE=new RewriteRuleTokenStream(adaptor,"token USE");
        RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");

        try {
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:176:5: ( HELP HELP -> ^( NODE_HELP NODE_HELP ) | HELP CONNECT -> ^( NODE_HELP NODE_CONNECT ) | HELP USE -> ^( NODE_HELP NODE_USE_TABLE ) | HELP DESCRIBE KEYSPACE -> ^( NODE_HELP NODE_DESCRIBE_TABLE ) | HELP DESCRIBE 'CLUSTER' -> ^( NODE_HELP NODE_DESCRIBE_CLUSTER ) | HELP EXIT -> ^( NODE_HELP NODE_EXIT ) | HELP QUIT -> ^( NODE_HELP NODE_EXIT ) | HELP SHOW 'CLUSTER NAME' -> ^( NODE_HELP NODE_SHOW_CLUSTER_NAME ) | HELP SHOW KEYSPACES -> ^( NODE_HELP NODE_SHOW_KEYSPACES ) | HELP SHOW API_VERSION -> ^( NODE_HELP NODE_SHOW_VERSION ) | HELP CREATE KEYSPACE -> ^( NODE_HELP NODE_ADD_KEYSPACE ) | HELP UPDATE KEYSPACE -> ^( NODE_HELP NODE_UPDATE_KEYSPACE ) | HELP CREATE COLUMN FAMILY -> ^( NODE_HELP NODE_ADD_COLUMN_FAMILY ) | HELP UPDATE COLUMN FAMILY -> ^( NODE_HELP NODE_UPDATE_COLUMN_FAMILY ) | HELP DROP KEYSPACE -> ^( NODE_HELP NODE_DEL_KEYSPACE ) | HELP DROP COLUMN FAMILY -> ^( NODE_HELP NODE_DEL_COLUMN_FAMILY ) | HELP DROP INDEX -> ^( NODE_HELP NODE_DROP_INDEX ) | HELP GET -> ^( NODE_HELP NODE_THRIFT_GET ) | HELP SET -> ^( NODE_HELP NODE_THRIFT_SET ) | HELP INCR -> ^( NODE_HELP NODE_THRIFT_INCR ) | HELP DECR -> ^( NODE_HELP NODE_THRIFT_DECR ) | HELP DEL -> ^( NODE_HELP NODE_THRIFT_DEL ) | HELP COUNT -> ^( NODE_HELP NODE_THRIFT_COUNT ) | HELP LIST -> ^( NODE_HELP NODE_LIST ) | HELP TRUNCATE -> ^( NODE_HELP NODE_TRUNCATE ) | HELP ASSUME -> ^( NODE_HELP NODE_ASSUME ) | HELP CONSISTENCYLEVEL -> ^( NODE_HELP NODE_CONSISTENCY_LEVEL ) | HELP -> ^( NODE_HELP ) | '?' -> ^( NODE_HELP ) )
            int alt6=29;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:176:7: HELP HELP
                    {
                    HELP39=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP39);

                    HELP40=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP40);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 177:9: -> ^( NODE_HELP NODE_HELP )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:177:12: ^( NODE_HELP NODE_HELP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:178:7: HELP CONNECT
                    {
                    HELP41=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP41);

                    CONNECT42=(Token)match(input,CONNECT,FOLLOW_CONNECT_in_helpStatement770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONNECT.add(CONNECT42);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 179:9: -> ^( NODE_HELP NODE_CONNECT )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:179:12: ^( NODE_HELP NODE_CONNECT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_CONNECT, "NODE_CONNECT"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:180:7: HELP USE
                    {
                    HELP43=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP43);

                    USE44=(Token)match(input,USE,FOLLOW_USE_in_helpStatement797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_USE.add(USE44);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 181:9: -> ^( NODE_HELP NODE_USE_TABLE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:181:12: ^( NODE_HELP NODE_USE_TABLE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_USE_TABLE, "NODE_USE_TABLE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:182:7: HELP DESCRIBE KEYSPACE
                    {
                    HELP45=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP45);

                    DESCRIBE46=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_helpStatement824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE46);

                    KEYSPACE47=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_helpStatement826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KEYSPACE.add(KEYSPACE47);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 183:9: -> ^( NODE_HELP NODE_DESCRIBE_TABLE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:183:12: ^( NODE_HELP NODE_DESCRIBE_TABLE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_DESCRIBE_TABLE, "NODE_DESCRIBE_TABLE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:184:7: HELP DESCRIBE 'CLUSTER'
                    {
                    HELP48=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP48);

                    DESCRIBE49=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_helpStatement853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE49);

                    string_literal50=(Token)match(input,102,FOLLOW_102_in_helpStatement855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_102.add(string_literal50);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 185:9: -> ^( NODE_HELP NODE_DESCRIBE_CLUSTER )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:185:12: ^( NODE_HELP NODE_DESCRIBE_CLUSTER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_DESCRIBE_CLUSTER, "NODE_DESCRIBE_CLUSTER"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:186:7: HELP EXIT
                    {
                    HELP51=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP51);

                    EXIT52=(Token)match(input,EXIT,FOLLOW_EXIT_in_helpStatement881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXIT.add(EXIT52);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 187:9: -> ^( NODE_HELP NODE_EXIT )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:187:12: ^( NODE_HELP NODE_EXIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_EXIT, "NODE_EXIT"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:188:7: HELP QUIT
                    {
                    HELP53=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP53);

                    QUIT54=(Token)match(input,QUIT,FOLLOW_QUIT_in_helpStatement908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUIT.add(QUIT54);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 189:9: -> ^( NODE_HELP NODE_EXIT )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:189:12: ^( NODE_HELP NODE_EXIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_EXIT, "NODE_EXIT"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:190:7: HELP SHOW 'CLUSTER NAME'
                    {
                    HELP55=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP55);

                    SHOW56=(Token)match(input,SHOW,FOLLOW_SHOW_in_helpStatement935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHOW.add(SHOW56);

                    string_literal57=(Token)match(input,103,FOLLOW_103_in_helpStatement937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_103.add(string_literal57);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 191:9: -> ^( NODE_HELP NODE_SHOW_CLUSTER_NAME )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:191:12: ^( NODE_HELP NODE_SHOW_CLUSTER_NAME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_SHOW_CLUSTER_NAME, "NODE_SHOW_CLUSTER_NAME"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:192:7: HELP SHOW KEYSPACES
                    {
                    HELP58=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP58);

                    SHOW59=(Token)match(input,SHOW,FOLLOW_SHOW_in_helpStatement963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHOW.add(SHOW59);

                    KEYSPACES60=(Token)match(input,KEYSPACES,FOLLOW_KEYSPACES_in_helpStatement965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KEYSPACES.add(KEYSPACES60);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 193:9: -> ^( NODE_HELP NODE_SHOW_KEYSPACES )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:193:12: ^( NODE_HELP NODE_SHOW_KEYSPACES )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_SHOW_KEYSPACES, "NODE_SHOW_KEYSPACES"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:194:7: HELP SHOW API_VERSION
                    {
                    HELP61=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP61);

                    SHOW62=(Token)match(input,SHOW,FOLLOW_SHOW_in_helpStatement992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHOW.add(SHOW62);

                    API_VERSION63=(Token)match(input,API_VERSION,FOLLOW_API_VERSION_in_helpStatement994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_API_VERSION.add(API_VERSION63);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 195:9: -> ^( NODE_HELP NODE_SHOW_VERSION )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:195:12: ^( NODE_HELP NODE_SHOW_VERSION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_SHOW_VERSION, "NODE_SHOW_VERSION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:196:7: HELP CREATE KEYSPACE
                    {
                    HELP64=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP64);

                    CREATE65=(Token)match(input,CREATE,FOLLOW_CREATE_in_helpStatement1020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CREATE.add(CREATE65);

                    KEYSPACE66=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_helpStatement1022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KEYSPACE.add(KEYSPACE66);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 197:9: -> ^( NODE_HELP NODE_ADD_KEYSPACE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:197:12: ^( NODE_HELP NODE_ADD_KEYSPACE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_ADD_KEYSPACE, "NODE_ADD_KEYSPACE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:198:7: HELP UPDATE KEYSPACE
                    {
                    HELP67=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP67);

                    UPDATE68=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_helpStatement1049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE68);

                    KEYSPACE69=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_helpStatement1051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KEYSPACE.add(KEYSPACE69);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 199:9: -> ^( NODE_HELP NODE_UPDATE_KEYSPACE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:199:12: ^( NODE_HELP NODE_UPDATE_KEYSPACE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_UPDATE_KEYSPACE, "NODE_UPDATE_KEYSPACE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:200:7: HELP CREATE COLUMN FAMILY
                    {
                    HELP70=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP70);

                    CREATE71=(Token)match(input,CREATE,FOLLOW_CREATE_in_helpStatement1077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CREATE.add(CREATE71);

                    COLUMN72=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_helpStatement1079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLUMN.add(COLUMN72);

                    FAMILY73=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_helpStatement1081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY73);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 201:9: -> ^( NODE_HELP NODE_ADD_COLUMN_FAMILY )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:201:12: ^( NODE_HELP NODE_ADD_COLUMN_FAMILY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_ADD_COLUMN_FAMILY, "NODE_ADD_COLUMN_FAMILY"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:202:7: HELP UPDATE COLUMN FAMILY
                    {
                    HELP74=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP74);

                    UPDATE75=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_helpStatement1108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE75);

                    COLUMN76=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_helpStatement1110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLUMN.add(COLUMN76);

                    FAMILY77=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_helpStatement1112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY77);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 203:9: -> ^( NODE_HELP NODE_UPDATE_COLUMN_FAMILY )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:203:12: ^( NODE_HELP NODE_UPDATE_COLUMN_FAMILY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_UPDATE_COLUMN_FAMILY, "NODE_UPDATE_COLUMN_FAMILY"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:204:7: HELP DROP KEYSPACE
                    {
                    HELP78=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP78);

                    DROP79=(Token)match(input,DROP,FOLLOW_DROP_in_helpStatement1138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DROP.add(DROP79);

                    KEYSPACE80=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_helpStatement1140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KEYSPACE.add(KEYSPACE80);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 205:9: -> ^( NODE_HELP NODE_DEL_KEYSPACE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:205:12: ^( NODE_HELP NODE_DEL_KEYSPACE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_DEL_KEYSPACE, "NODE_DEL_KEYSPACE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:206:7: HELP DROP COLUMN FAMILY
                    {
                    HELP81=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP81);

                    DROP82=(Token)match(input,DROP,FOLLOW_DROP_in_helpStatement1167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DROP.add(DROP82);

                    COLUMN83=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_helpStatement1169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLUMN.add(COLUMN83);

                    FAMILY84=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_helpStatement1171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY84);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 207:9: -> ^( NODE_HELP NODE_DEL_COLUMN_FAMILY )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:207:12: ^( NODE_HELP NODE_DEL_COLUMN_FAMILY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_DEL_COLUMN_FAMILY, "NODE_DEL_COLUMN_FAMILY"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:208:7: HELP DROP INDEX
                    {
                    HELP85=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP85);

                    DROP86=(Token)match(input,DROP,FOLLOW_DROP_in_helpStatement1198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DROP.add(DROP86);

                    INDEX87=(Token)match(input,INDEX,FOLLOW_INDEX_in_helpStatement1200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INDEX.add(INDEX87);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 209:9: -> ^( NODE_HELP NODE_DROP_INDEX )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:209:12: ^( NODE_HELP NODE_DROP_INDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_DROP_INDEX, "NODE_DROP_INDEX"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 18 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:210:7: HELP GET
                    {
                    HELP88=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP88);

                    GET89=(Token)match(input,GET,FOLLOW_GET_in_helpStatement1226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GET.add(GET89);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 211:9: -> ^( NODE_HELP NODE_THRIFT_GET )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:211:12: ^( NODE_HELP NODE_THRIFT_GET )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_GET, "NODE_THRIFT_GET"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:212:7: HELP SET
                    {
                    HELP90=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP90);

                    SET91=(Token)match(input,SET,FOLLOW_SET_in_helpStatement1253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET91);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 213:9: -> ^( NODE_HELP NODE_THRIFT_SET )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:213:12: ^( NODE_HELP NODE_THRIFT_SET )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_SET, "NODE_THRIFT_SET"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 20 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:214:7: HELP INCR
                    {
                    HELP92=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP92);

                    INCR93=(Token)match(input,INCR,FOLLOW_INCR_in_helpStatement1280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INCR.add(INCR93);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 215:9: -> ^( NODE_HELP NODE_THRIFT_INCR )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:215:12: ^( NODE_HELP NODE_THRIFT_INCR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_INCR, "NODE_THRIFT_INCR"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:216:7: HELP DECR
                    {
                    HELP94=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP94);

                    DECR95=(Token)match(input,DECR,FOLLOW_DECR_in_helpStatement1306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECR.add(DECR95);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 217:9: -> ^( NODE_HELP NODE_THRIFT_DECR )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:217:12: ^( NODE_HELP NODE_THRIFT_DECR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_DECR, "NODE_THRIFT_DECR"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 22 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:218:7: HELP DEL
                    {
                    HELP96=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP96);

                    DEL97=(Token)match(input,DEL,FOLLOW_DEL_in_helpStatement1332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEL.add(DEL97);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 219:9: -> ^( NODE_HELP NODE_THRIFT_DEL )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:219:12: ^( NODE_HELP NODE_THRIFT_DEL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_DEL, "NODE_THRIFT_DEL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 23 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:220:7: HELP COUNT
                    {
                    HELP98=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP98);

                    COUNT99=(Token)match(input,COUNT,FOLLOW_COUNT_in_helpStatement1359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COUNT.add(COUNT99);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 221:9: -> ^( NODE_HELP NODE_THRIFT_COUNT )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:221:12: ^( NODE_HELP NODE_THRIFT_COUNT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_THRIFT_COUNT, "NODE_THRIFT_COUNT"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 24 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:222:7: HELP LIST
                    {
                    HELP100=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP100);

                    LIST101=(Token)match(input,LIST,FOLLOW_LIST_in_helpStatement1386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LIST.add(LIST101);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 223:9: -> ^( NODE_HELP NODE_LIST )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:223:12: ^( NODE_HELP NODE_LIST )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_LIST, "NODE_LIST"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 25 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:224:7: HELP TRUNCATE
                    {
                    HELP102=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP102);

                    TRUNCATE103=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_helpStatement1413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRUNCATE.add(TRUNCATE103);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 225:9: -> ^( NODE_HELP NODE_TRUNCATE )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:225:12: ^( NODE_HELP NODE_TRUNCATE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_TRUNCATE, "NODE_TRUNCATE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 26 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:226:7: HELP ASSUME
                    {
                    HELP104=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP104);

                    ASSUME105=(Token)match(input,ASSUME,FOLLOW_ASSUME_in_helpStatement1439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSUME.add(ASSUME105);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 227:9: -> ^( NODE_HELP NODE_ASSUME )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:227:12: ^( NODE_HELP NODE_ASSUME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_ASSUME, "NODE_ASSUME"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 27 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:228:7: HELP CONSISTENCYLEVEL
                    {
                    HELP106=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP106);

                    CONSISTENCYLEVEL107=(Token)match(input,CONSISTENCYLEVEL,FOLLOW_CONSISTENCYLEVEL_in_helpStatement1465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSISTENCYLEVEL.add(CONSISTENCYLEVEL107);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 229:9: -> ^( NODE_HELP NODE_CONSISTENCY_LEVEL )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:229:12: ^( NODE_HELP NODE_CONSISTENCY_LEVEL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NODE_CONSISTENCY_LEVEL, "NODE_CONSISTENCY_LEVEL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 28 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:230:7: HELP
                    {
                    HELP108=(Token)match(input,HELP,FOLLOW_HELP_in_helpStatement1489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HELP.add(HELP108);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 231:9: -> ^( NODE_HELP )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:231:12: ^( NODE_HELP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 29 :
                    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:232:7: '?'
                    {
                    char_literal109=(Token)match(input,104,FOLLOW_104_in_helpStatement1512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_104.add(char_literal109);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 233:9: -> ^( NODE_HELP )
                    {
                        // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:233:12: ^( NODE_HELP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_HELP, "NODE_HELP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "helpStatement"

