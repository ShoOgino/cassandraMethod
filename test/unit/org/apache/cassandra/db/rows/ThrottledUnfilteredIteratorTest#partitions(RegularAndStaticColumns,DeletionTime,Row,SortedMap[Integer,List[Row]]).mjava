    private static UnfilteredPartitionIterator partitions(RegularAndStaticColumns columns,
                                                          DeletionTime partitionDeletion,
                                                          Row staticRow,
                                                          SortedMap<Integer, List<Row>> partitions)
    {
        Iterator<Map.Entry<Integer, List<Row>>> partitionIt = partitions.entrySet().iterator();
        return new AbstractUnfilteredPartitionIterator() {
            public boolean hasNext()
            {
                return partitionIt.hasNext();
            }

            public UnfilteredRowIterator next()
            {
                Map.Entry<Integer, List<Row>> next = partitionIt.next();
                Iterator<Row> rowsIterator = next.getValue().iterator();
                return new AbstractUnfilteredRowIterator(metadata, dk(next.getKey()), partitionDeletion, columns, staticRow, false, EncodingStats.NO_STATS) {
                    protected Unfiltered computeNext()
                    {
                        return rowsIterator.hasNext() ? rowsIterator.next() : endOfData();
                    }
                };
            }

            public TableMetadata metadata()
            {
                return metadata;
            }
        };
    }

