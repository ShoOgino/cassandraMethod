    @Test
    public void testConcurrentAdjacentLeaveAndMove()
    {
        TokenMetadata tm = new TokenMetadata();
        AbstractReplicationStrategy strategy = simpleStrategy(tm, 3);

        Token newToken = token(0);
        Token token1 = token(-9);
        Token token2 = token(-5);
        Token token3 = token(-1);
        Token token4 = token(1);
        Token token5 = token(5);

        InetAddressAndPort node1 = peer(1);
        InetAddressAndPort node2 = peer(2);
        InetAddressAndPort node3 = peer(3);
        InetAddressAndPort node4 = peer(4);
        InetAddressAndPort node5 = peer(5);

        // setup initial ring
        addNode(tm, node1, token1);
        addNode(tm, node2, token2);
        addNode(tm, node3, token3);
        addNode(tm, node4, token4);
        addNode(tm, node5, token5);

        tm.addLeavingEndpoint(node5);
        tm.addMovingEndpoint(newToken, node3);

        tm.calculatePendingRanges(strategy, KEYSPACE);
        assertRangesAtEndpoint(RangesAtEndpoint.of(new Replica(node1, new Range<>(token2, token3), true)),
                               tm.getPendingRanges(KEYSPACE, node1));
        assertRangesAtEndpoint(RangesAtEndpoint.of(new Replica(node2, new Range<>(token3, token4), true)),
                               tm.getPendingRanges(KEYSPACE, node2));
        assertRangesAtEndpoint(RangesAtEndpoint.of(new Replica(node3, new Range<>(token3, newToken), true),
                                                   new Replica(node3, new Range<>(token4, token5), true)),
                               tm.getPendingRanges(KEYSPACE, node3));
        assertRangesAtEndpoint(RangesAtEndpoint.empty(node4), tm.getPendingRanges(KEYSPACE, node4));
        assertRangesAtEndpoint(RangesAtEndpoint.empty(node5), tm.getPendingRanges(KEYSPACE, node5));
    }

