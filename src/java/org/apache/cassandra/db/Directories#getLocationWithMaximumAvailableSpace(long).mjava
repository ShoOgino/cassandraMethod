    /*
     * Loop through all the disks to see which disk has the max free space
     * return the disk with max free space for compactions. If the size of the expected
     * compacted file is greater than the max disk space available return null, we cannot
     * do compaction in this case.
     */
    public File getLocationWithMaximumAvailableSpace(long estimatedSize)
    {
        long maxFreeDisk = 0;
        File maxLocation = null;

        for (File dir : sstableDirectories)
        {
            if (BlacklistedDirectories.isUnwritable(dir))
                continue;

            long usableSpace = dir.getUsableSpace();
            if (maxFreeDisk < usableSpace)
            {
                maxFreeDisk = usableSpace;
                maxLocation = dir;
            }
        }
        // Load factor of 0.9 we do not want to use the entire disk that is too risky.
        maxFreeDisk = (long) (0.9 * maxFreeDisk);
        logger.debug(String.format("expected data files size is %d; largest free partition (%s) has %d bytes free",
                                   estimatedSize, maxLocation, maxFreeDisk));

        return estimatedSize < maxFreeDisk ? maxLocation : null;
    }

