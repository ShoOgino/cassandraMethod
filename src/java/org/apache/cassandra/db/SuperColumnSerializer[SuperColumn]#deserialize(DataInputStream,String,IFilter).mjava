    /*
     * Deserialize a particular column since the name is in the form of
     * superColumn:column.
    */
    public IColumn deserialize(DataInputStream dis, String name, IFilter filter) throws IOException
    {
        assert dis.available() > 0;

        String[] names = RowMutation.getColumnAndColumnFamily(name);
        if ( names.length == 1 )
        {
            IColumn superColumn = defreezeSuperColumn(dis);
            if(name.equals(superColumn.name()))
            {
                /* read the number of columns stored */
                int size = dis.readInt();
                /* read the size of all columns */
                dis.readInt();
                IColumn column = null;
                for ( int i = 0; i < size; ++i )
                {
                    column = Column.serializer().deserialize(dis, filter);
                    if(column != null)
                    {
                        superColumn.addColumn(column);
                    }
                }
                return superColumn;
            }
            else
            {
                /* read the number of columns stored */
                dis.readInt();
                /* read the size of all columns to skip */
                int size = dis.readInt();
                dis.skip(size);
            	return null;
            }
        }

        SuperColumn superColumn = defreezeSuperColumn(dis);
        int size = dis.readInt();
        /* skip the size of the columns */
        dis.readInt();
        if ( size > 0 )
        {
            for ( int i = 0; i < size; ++i )
            {
                IColumn subColumn = Column.serializer().deserialize(dis, names[1], filter);
                if ( subColumn != null )
                {
                    superColumn.addColumn(subColumn);
                    break;
                }
            }
        }

        return superColumn;
    }

