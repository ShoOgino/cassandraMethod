    @Test  // A Bad init could leave an index only accepting writes
    public void testWriteOnlyIndex() throws Throwable
    {
        // On successful initialization both reads and writes go through
        String tableName = createTable("CREATE TABLE %s (pk int, ck int, value int, PRIMARY KEY (pk, ck))");
        String indexName = createIndex("CREATE CUSTOM INDEX ON %s (value) USING '" + WriteOnlyOnFailureIndex.class.getName() + "'");
        assertTrue(waitForIndex(keyspace(), tableName, indexName));
        execute("SELECT value FROM %s WHERE value = 1");
        execute("INSERT INTO %s (pk, ck, value) VALUES (?, ?, ?)", 1, 1, 1);
        WriteOnlyOnFailureIndex index = (WriteOnlyOnFailureIndex) getCurrentColumnFamilyStore().indexManager.getIndexByName(indexName);
        assertEquals(1, index.rowsInserted.size());

        // Upon rebuild, both reads and writes still go through
        getCurrentColumnFamilyStore().indexManager.rebuildIndexesBlocking(ImmutableSet.of(indexName));
        assertEquals(1, index.rowsInserted.size());
        execute("SELECT value FROM %s WHERE value = 1");
        execute("INSERT INTO %s (pk, ck, value) VALUES (?, ?, ?)", 2, 1, 1);
        assertEquals(2, index.rowsInserted.size());
        dropIndex(format("DROP INDEX %s.%s", KEYSPACE, indexName));

        // On bad initial build writes are forwarded to the index
        WriteOnlyOnFailureIndex.failInit = true;
        indexName = createIndex("CREATE CUSTOM INDEX ON %s (value) USING '" + WriteOnlyOnFailureIndex.class.getName() + "'");
        index = (WriteOnlyOnFailureIndex) getCurrentColumnFamilyStore().indexManager.getIndexByName(indexName);
        assertTrue(waitForIndexBuilds(keyspace(), indexName));
        execute("INSERT INTO %s (pk, ck, value) VALUES (?, ?, ?)", 1, 1, 1);
        assertEquals(1, index.rowsInserted.size());
        assertInvalidThrow(IndexNotAvailableException.class, "SELECT value FROM %s WHERE value = 1");

        // Upon recovery, we can query data again
        index.reset();
        getCurrentColumnFamilyStore().indexManager.rebuildIndexesBlocking(ImmutableSet.of(indexName));
        assertEquals(2, index.rowsInserted.size());
        execute("SELECT value FROM %s WHERE value = 1");
        execute("INSERT INTO %s (pk, ck, value) VALUES (?, ?, ?)", 2, 1, 1);
        assertEquals(3, index.rowsInserted.size());
        dropIndex(format("DROP INDEX %s.%s", KEYSPACE, indexName));
    }

