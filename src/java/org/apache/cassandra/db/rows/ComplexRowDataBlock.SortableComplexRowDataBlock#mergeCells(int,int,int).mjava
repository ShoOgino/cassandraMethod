        // Merge row i into j
        protected void mergeCells(int i, int j, int nowInSec)
        {
            assert i > j;
            if (i >= cells.size())
                return;

            ComplexCellBlock b1 = cells.get(i);
            if (b1 == null)
                return; // nothing to merge into j

            ComplexCellBlock b2 = cells.get(j);
            if (b2 == null)
            {
                cells.set(j, b1);
                return;
            }

            ComplexCellBlock merged = new ComplexCellBlock(columns(), 1, isCounter);

            int idxMerged = 0;
            int s = columns().complexColumnCount();
            for (int k = 0; k < s; k++)
            {
                ColumnDefinition column = columns().getComplex(k);
                Comparator<CellPath> comparator = column.cellPathComparator();

                merged.cellIdx[2 * k] = idxMerged;

                int idx1 = b1.cellIdx[2 * k];
                int end1 = b1.cellIdx[2 * k + 1];
                int idx2 = b2.cellIdx[2 * k];
                int end2 = b2.cellIdx[2 * k + 1];

                while (idx1 < end1 || idx2 < end2)
                {
                    int cmp = idx1 >= end1 ? 1
                            : (idx2 >= end2 ? -1
                            : comparator.compare(b1.complexPaths[idx1], b2.complexPaths[idx2]));

                    if (cmp == 0)
                        merge(b1, idx1++, b2, idx2++, merged, idxMerged++, nowInSec);
                    else if (cmp < 0)
                        copy(b1, idx1++, merged, idxMerged++);
                    else
                        copy(b2, idx2++, merged, idxMerged++);
                }

                merged.cellIdx[2 * k + 1] = idxMerged;
            }

            cells.set(j, merged);
        }

