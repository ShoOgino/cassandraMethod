    public SuperColumn get_super_column(String table, String key, SuperColumnPath super_column_path, int consistency_level)
    throws InvalidRequestException, NotFoundException
    {
        if (logger.isDebugEnabled())
            logger.debug("get_superColumn");
        ThriftValidation.validateSuperColumnPath(table, super_column_path);

        ColumnFamily cfamily = readColumnFamily(new SliceByNamesReadCommand(table, key, new QueryPath(super_column_path.column_family), Arrays.asList(super_column_path.super_column)), consistency_level);
        if (cfamily == null)
        {
            throw new NotFoundException();
        }
        Collection<IColumn> columns = cfamily.getSortedColumns();
        if (columns == null || columns.size() == 0)
        {
            throw new NotFoundException();
        }

        assert columns.size() == 1;
        IColumn column = columns.iterator().next();
        if (column.getSubColumns().size() == 0)
        {
            throw new NotFoundException();
        }

        return new SuperColumn(column.name(), thriftifyColumns(column.getSubColumns()));
    }

