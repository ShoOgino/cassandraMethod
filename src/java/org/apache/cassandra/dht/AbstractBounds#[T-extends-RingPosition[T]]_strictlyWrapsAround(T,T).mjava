    /**
     * Whether {@code left} and {@code right} forms a wrapping interval, that is if unwrapping wouldn't be a no-op.
     * <p>
     * Note that the semantic is slightly different from {@link Range#isWrapAround()} in the sense that if both
     * {@code right} are minimal (for the partitioner), this methods return false (doesn't wrap) while
     * {@link Range#isWrapAround()} returns true (does wrap). This is confusing and we should fix it by
     * refactoring/rewriting the whole AbstractBounds hierarchy with cleaner semantics, but we don't want to risk
     * breaking something by changing {@link Range#isWrapAround()} in the meantime.
     */
    public static <T extends RingPosition<T>> boolean strictlyWrapsAround(T left, T right)
    {
        return !(left.compareTo(right) <= 0 || right.isMinimum());
    }

