        boolean sync()
        {
            // always run once after shutdown signalled
            boolean shutdownRequested = shutdown;

            try
            {
                // sync and signal
                long pollStarted = clock.now();
                boolean flushToDisk = lastSyncedAt + syncIntervalNanos <= pollStarted || shutdownRequested || syncRequested;
                if (flushToDisk)
                {
                    // in this branch, we want to flush the commit log to disk
                    syncRequested = false;
                    commitLog.sync(true);
                    lastSyncedAt = pollStarted;
                    syncComplete.signalAll();
                    syncCount++;
                }
                else
                {
                    // in this branch, just update the commit log sync headers
                    commitLog.sync(false);
                }

                long now = clock.now();
                if (flushToDisk)
                    maybeLogFlushLag(pollStarted, now);

                if (shutdownRequested)
                    return false;

                long wakeUpAt = pollStarted + markerIntervalNanos;
                if (wakeUpAt > now)
                    LockSupport.parkNanos(wakeUpAt - now);
            }
            catch (Throwable t)
            {
                if (!CommitLog.handleCommitError("Failed to persist commits to disk", t))
                    return false;

                // sleep for full poll-interval after an error, so we don't spam the log file
                LockSupport.parkNanos(markerIntervalNanos);
            }

            return true;
        }

