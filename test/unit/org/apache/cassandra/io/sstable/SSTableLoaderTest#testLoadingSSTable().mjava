    @Test
    public void testLoadingSSTable() throws Exception
    {
        File tempdir = Files.createTempDir();
        File dataDir = new File(tempdir.getAbsolutePath() + File.separator + "Keyspace1" + File.separator + "Standard1");
        assert dataDir.mkdirs();
        CFMetaData cfmeta = Schema.instance.getCFMetaData("Keyspace1", "Standard1");
        SSTableSimpleUnsortedWriter writer = new SSTableSimpleUnsortedWriter(dataDir,
                                                                             cfmeta,
                                                                             StorageService.getPartitioner(),
                                                                             1);
        DecoratedKey key = Util.dk("key1");
        writer.newRow(key.key);
        writer.addColumn(ByteBufferUtil.bytes("col1"), ByteBufferUtil.bytes(100), 1);
        writer.close();

        SSTableLoader loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
        {
            @Override
            public void init(String keyspace)
            {
                try
                {
                    for (Range<Token> range : StorageService.instance.getLocalRanges("Keyspace1"))
                        addRangeForEndpoint(range, FBUtilities.getBroadcastAddress());
                    setPartitioner(StorageService.getPartitioner());
                } catch (ConfigurationException e)
                {
                    throw new RuntimeException(e);
                }
            }

            @Override
            public boolean validateColumnFamily(String keyspace, String cfName)
            {
                return true;
            }
        }, new OutputHandler.SystemOutput(false, false));

        loader.stream().get();

        List<Row> rows = Util.getRangeSlice(Table.open("Keyspace1").getColumnFamilyStore("Standard1"));
        assertEquals(1, rows.size());
        assertEquals(key, rows.get(0).key);
        assertEquals(ByteBufferUtil.bytes(100), rows.get(0).cf.getColumn(ByteBufferUtil.bytes("col1")).value());
    }

