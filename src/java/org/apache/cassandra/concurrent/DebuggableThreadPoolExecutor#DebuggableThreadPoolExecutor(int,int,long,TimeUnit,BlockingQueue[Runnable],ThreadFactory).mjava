    public DebuggableThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory)
    {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);

        if (maximumPoolSize > 1)
        {
            this.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        }
        else
        {
            // preserve task serialization.  this is more complicated than it needs to be,
            // since TPE rejects if queue.offer reports a full queue.
            // the easiest option (since most of TPE.execute deals with private members)
            // appears to be to wrap the given queue class with one whose offer
            // simply delegates to put().  this would be ugly, since it violates both
            // the spirit and letter of queue.offer, but effective.
            // so far, though, all our serialized executors use unbounded queues,
            // so actually implementing this has not been necessary.
            this.setRejectedExecutionHandler(new RejectedExecutionHandler()
            {
                public void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
                {
                    throw new AssertionError("Blocking serialized executor is not yet implemented");
                }
            });
        }
    }

