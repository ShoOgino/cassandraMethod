    /**
     * for each datacenter, send a message to one node to relay the write to other replicas
     */
    private static void sendMessages(String localDataCenter, Multimap<String, Pair<Message, InetAddress>> dcMessages)
    throws IOException
    {
        for (Map.Entry<String, Collection<Pair<Message, InetAddress>>> entry : dcMessages.asMap().entrySet())
        {
            String dataCenter = entry.getKey();

            // Grab a set of all the messages bound for this dataCenter and create an iterator over this set.
            Collection<Pair<Message, InetAddress>> messagesForDataCenter = entry.getValue();
            Iterator<Pair<Message, InetAddress>> iter = messagesForDataCenter.iterator();
            assert iter.hasNext();

            // First endpoint in list is the destination for this group
            Pair<Message, InetAddress> messageAndDestination = iter.next();

            Message primaryMessage = messageAndDestination.left;
            InetAddress target = messageAndDestination.right;

            // Add all the other destinations that are bound for the same dataCenter as a header in the primary message.
            while (iter.hasNext())
            {
                messageAndDestination = iter.next();
                assert messageAndDestination.left == primaryMessage;

                if (dataCenter.equals(localDataCenter))
                {
                    // direct write to local DC
                    assert primaryMessage.getHeader(RowMutation.FORWARD_HEADER) == null;
                    MessagingService.instance().sendOneWay(primaryMessage, target);
                }
                else
                {
                    // group all nodes in this DC as forward headers on the primary message
                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    DataOutputStream dos = new DataOutputStream(bos);

                    // append to older addresses
                    byte[] previousHints = primaryMessage.getHeader(RowMutation.FORWARD_HEADER);
                    if (previousHints != null)
                        dos.write(previousHints);

                    dos.write(messageAndDestination.right.getAddress());
                    primaryMessage.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
                }
            }

            MessagingService.instance().sendOneWay(primaryMessage, target);
        }
    }

