    /**
     * Store the column definitions in cds
     *
     * the ColumnDefinitions at position x will get stored by the appender at position x
     *
     * Calling this method indicates that we are starting a new result set from a query, it must be called before
     * calling storeRows.
     *
     */
    public void storeColumnDefinitions(FQLQuery query, List<ResultHandler.ComparableColumnDefinitions> cds)
    {
        finishedHosts.clear();
        if (queryStoreAppender != null)
        {
            BinLog.ReleaseableWriteMarshallable writeMarshallableQuery = query.toMarshallable();
            queryStoreAppender.writeDocument(writeMarshallableQuery);
            writeMarshallableQuery.release();
        }
        for (int i = 0; i < cds.size(); i++)
        {
            ResultHandler.ComparableColumnDefinitions cd = cds.get(i);
            appenders.get(i).writeDocument(wire ->
                                           {
                                               if (!cd.wasFailed())
                                               {
                                                   wire.write("type").text("column_definitions");
                                                   wire.write("column_count").int32(cd.size());
                                                   for (ResultHandler.ComparableDefinition d : cd.asList())
                                                   {
                                                       ValueOut vo = wire.write("column_definition");
                                                       vo.text(d.getName());
                                                       vo.text(d.getType());
                                                   }
                                               }
                                               else
                                               {
                                                   wire.write("type").text("query_failed");
                                               }
                                           });
        }
    }

