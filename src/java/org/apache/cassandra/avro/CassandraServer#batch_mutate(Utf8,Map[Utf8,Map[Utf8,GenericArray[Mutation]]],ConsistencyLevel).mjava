    public Void batch_mutate(Utf8 keyspace, Map<Utf8, Map<Utf8, GenericArray<Mutation>>> mutationMap, ConsistencyLevel consistencyLevel)
    throws AvroRemoteException, UnavailableException, TimedOutException
    {
        if (logger.isDebugEnabled())
            logger.debug("batch_mutate");
        
        String keyspaceString = keyspace.toString();
        
        List<RowMutation> rowMutations = new ArrayList<RowMutation>();
        for (Map.Entry<Utf8, Map<Utf8, GenericArray<Mutation>>> mutationEntry: mutationMap.entrySet())
        {
            String key = mutationEntry.getKey().toString();
            AvroValidation.validateKey(key);
            
            Map<Utf8, GenericArray<Mutation>> cfToMutations = mutationEntry.getValue();
            for (Map.Entry<Utf8, GenericArray<Mutation>> cfMutations : cfToMutations.entrySet())
            {
                String cfName = cfMutations.getKey().toString();
                
                for (Mutation mutation : cfMutations.getValue())
                    AvroValidation.validateMutation(keyspaceString, cfName, mutation);
            }
            rowMutations.add(getRowMutationFromMutations(keyspaceString, key, cfToMutations));
        }
        
        if (consistencyLevel == ConsistencyLevel.ZERO)
        {
            StorageProxy.mutate(rowMutations);
        }
        else
        {
            try
            {
                StorageProxy.mutateBlocking(rowMutations, thriftConsistencyLevel(consistencyLevel));
            }
            catch (TimeoutException te)
            {
                throw newTimedOutException();
            }
            // FIXME: StorageProxy.mutateBlocking throws Thrift's UnavailableException
            catch (org.apache.cassandra.thrift.UnavailableException ue)
            {
                throw newUnavailableException();
            }
        }
        
        return null;
    }

