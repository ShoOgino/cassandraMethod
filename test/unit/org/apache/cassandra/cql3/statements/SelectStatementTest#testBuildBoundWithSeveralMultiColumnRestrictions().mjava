    @Test
    public void testBuildBoundWithSeveralMultiColumnRestrictions() throws InvalidRequestException
    {
        ByteBuffer value1 = ByteBufferUtil.bytes(1);
        ByteBuffer value2 = ByteBufferUtil.bytes(2);
        ByteBuffer value3 = ByteBufferUtil.bytes(3);
        ByteBuffer value4 = ByteBufferUtil.bytes(4);
        ByteBuffer value5 = ByteBufferUtil.bytes(5);

        // (clustering_0, clustering_1) = (1, 2) AND (clustering_2, clustering_3) > (3, 4)
        MultiColumnRestriction.EQ multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value1, value2), false);
        MultiColumnRestriction.Slice multiSlice = new MultiColumnRestriction.Slice(false);
        multiSlice.setBound(Operator.GT, toMultiItemTerminal(value3, value4));

        Restriction[] restrictions = new Restriction[] { multiEq, multiEq, multiSlice, multiSlice};

        List<Composite> bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.END);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0),  value1, value2, EOC.END);

        // (clustering_0, clustering_1) = (1, 2) AND (clustering_2, clustering_3) IN ((3, 4), (4, 5))
        multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value1, value2), false);
        MultiColumnRestriction.IN multiIn =
                new MultiColumnRestriction.InWithValues(asList(toMultiItemTerminal(value3, value4),
                                                               toMultiItemTerminal(value4, value5)));

        restrictions = new Restriction[] { multiEq, multiEq, multiIn, multiIn};

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.START);
        assertComposite(bounds.get(1), value1, value2, value4, value5, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.END);
        assertComposite(bounds.get(1), value1, value2, value4, value5, EOC.END);

        // (clustering_0, clustering_1) = (1, 2) AND (clustering_2, clustering_3) IN ((3, 4), (4, 5))
        multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value1, value2), false);
        MultiColumnRestriction.EQ multiEq2 = new MultiColumnRestriction.EQ(toMultiItemTerminal(value3, value4), false);

        restrictions = new Restriction[] { multiEq, multiEq, multiEq2, multiEq2};

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.END);
    }

