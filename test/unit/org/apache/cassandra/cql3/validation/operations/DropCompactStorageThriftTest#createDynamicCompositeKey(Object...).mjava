    private static ByteBuffer createDynamicCompositeKey(Object... objects)
    {
        int length = 0;

        for (Object object : objects)
        {
            length += 2 * Short.BYTES +  Byte.BYTES;
            if (object instanceof String)
                length += ((String) object).length();
            else if (object instanceof UUID)
                length += 2 * Long.BYTES;
            else if (object instanceof ByteBuffer)
                length += ((ByteBuffer) object).remaining();
            else
                throw new MarshalException(object.getClass().getName() + " is not recognized as a valid type for this composite");
        }

        ByteBuffer out = ByteBuffer.allocate(length);

        for (Object object : objects)
        {
            if (object instanceof String)
            {
                String cast = (String) object;

                out.putShort((short) (0x8000 | 's'));
                out.putShort((short) cast.length());
                out.put(cast.getBytes());
                out.put((byte) 0);
            }
            else if (object instanceof UUID)
            {
                out.putShort((short) (0x8000 | 't'));
                out.putShort((short) 16);
                out.put(UUIDGen.decompose((UUID) object));
                out.put((byte) 0);
            }
            else if (object instanceof ByteBuffer)
            {
                ByteBuffer bytes = ((ByteBuffer) object).duplicate();
                out.putShort((short) (0x8000 | 'b'));
                out.putShort((short) bytes.remaining());
                out.put(bytes);
                out.put((byte) 0);
            }
            else
            {
                throw new MarshalException(object.getClass().getName() + " is not recognized as a valid type for this composite");
            }
        }

        return out;
    }

