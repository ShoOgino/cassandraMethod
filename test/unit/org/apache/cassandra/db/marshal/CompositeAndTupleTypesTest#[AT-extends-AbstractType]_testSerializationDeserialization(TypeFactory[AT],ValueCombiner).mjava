    public <AT extends AbstractType> void testSerializationDeserialization(TypeFactory<AT> typeFactory, ValueCombiner combiner)
    {
        for (int i=0; i<100; i++)
        {
            Random random = new Random(i);
            ValueGenerator[] generators = ValueGenerator.randomGenerators(random, 100);
            AT type = typeFactory.createType(ValueGenerator.toTypes(generators));

            for (int j=0; j<100; j++)
            {
                Object[] expected = createValues(generators, random);
                for (ValueAccessor<Object> srcAccessor : ACCESSORS)
                {
                    ByteBuffer[] srcBuffers = decompose(generators, expected);
                    Object[] srcValues = convert(srcBuffers, ByteBufferAccessor.instance, srcAccessor);
                    Object srcJoined = combiner.combine(srcAccessor, srcValues);
                    String srcString  = type.getString(srcJoined, srcAccessor);

                    for (ValueAccessor<Object> dstAccessor : ACCESSORS)
                    {
                        // convert data types and deserialize with
                        Object[] dstValues = convert(srcValues, srcAccessor, dstAccessor);
                        Object dstJoined = combiner.combine(dstAccessor, dstValues);
                        String dstString = type.getString(dstJoined, dstAccessor);

                        Object[] composed = compose(generators, dstValues, dstAccessor);
                        Assert.assertArrayEquals(expected, composed);
                        ValueAccessors.assertDataEquals(srcJoined, srcAccessor, dstJoined, dstAccessor);
                        Assert.assertEquals(srcString, dstString);
                    }
                }
            }
        }
    }

