    @Test
    public void testTypeLookup() // CASSANDRA-15965
    {
        List<Integer> ids = Arrays.stream(StreamMessage.Type.values())
                                  .mapToInt(t -> t.id)
                                  .boxed()
                                  .collect(Collectors.toList());

        for (int i: ids)
        {
            assertThat(StreamMessage.Type.lookupById(i), instanceOf(StreamMessage.Type.class));
        }

        int max = Collections.max(ids);
        int min = Collections.min(ids);
        int[] badTypes = {0,
                          -1,
                          min - 1, // right now this is redundant to zero
                          max + 1,
                          Integer.MAX_VALUE,
                          Integer.MIN_VALUE};

        for (int t: badTypes)
        {
            try
            {
                StreamMessage.Type.lookupById(t);
                fail("IllegalArgumentException was not thrown for " + t);
            }
            catch(IllegalArgumentException iae)
            {
            }
        }

    }

