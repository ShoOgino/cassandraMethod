    void validateCompatibility(TableMetadata other)
    {
        if (isIndex())
            return;

        if (!other.keyspace.equals(keyspace))
            except("Keyspace mismatch (found %s; expected %s)", other.keyspace, keyspace);

        if (!other.name.equals(name))
            except("Table mismatch (found %s; expected %s)", other.name, name);

        if (!other.id.equals(id))
            except("Table ID mismatch (found %s; expected %s)", other.id, id);

        if (!other.flags.equals(flags))
            except("Table type mismatch (found %s; expected %s)", other.flags, flags);

        if (other.partitionKeyColumns.size() != partitionKeyColumns.size())
            except("Partition keys of different length (found %s; expected %s)", other.partitionKeyColumns.size(), partitionKeyColumns.size());

        for (int i = 0; i < partitionKeyColumns.size(); i++)
            if (!other.partitionKeyColumns.get(i).type.isCompatibleWith(partitionKeyColumns.get(i).type))
                except("Partition key column mismatch (found %s; expected %s)", other.partitionKeyColumns.get(i).type, partitionKeyColumns.get(i).type);

        if (other.clusteringColumns.size() != clusteringColumns.size())
            except("Clustering columns of different length (found %s; expected %s)", other.clusteringColumns.size(), clusteringColumns.size());

        for (int i = 0; i < clusteringColumns.size(); i++)
            if (!other.clusteringColumns.get(i).type.isCompatibleWith(clusteringColumns.get(i).type))
                except("Clustering column mismatch (found %s; expected %s)", other.clusteringColumns.get(i).type, clusteringColumns.get(i).type);

        for (ColumnMetadata otherColumn : other.regularAndStaticColumns)
        {
            ColumnMetadata column = getColumn(otherColumn.name);
            if (column != null && !otherColumn.type.isCompatibleWith(column.type))
                except("Column mismatch (found %s; expected %s", otherColumn, column);
        }
    }

