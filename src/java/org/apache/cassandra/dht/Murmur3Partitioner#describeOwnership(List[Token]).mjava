    public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
    {
        Map<Token, Float> ownerships = new HashMap<Token, Float>();
        Iterator i = sortedTokens.iterator();

        // 0-case
        if (!i.hasNext())
            throw new RuntimeException("No nodes present in the cluster. How did you call this?");
        // 1-case
        if (sortedTokens.size() == 1)
            ownerships.put((Token) i.next(), new Float(1.0));
        // n-case
        else
        {
            final float ri = MAXIMUM;                                            //  (used for addition later)
            Token start = (Token) i.next(); Long ti = ((LongToken)start).token;  // The first token and its value
            Token t; Long tim1 = ti;                                             // The last token and its value (after loop)

            while (i.hasNext())
            {
                t = (Token) i.next(); ti = ((LongToken) t).token; // The next token and its value
                float age = ((ti - tim1 + ri) % ri) / ri;         // %age = ((T(i) - T(i-1) + R) % R) / R
                ownerships.put(t, age);                           // save (T(i) -> %age)
                tim1 = ti;                                        // -> advance loop
            }

            // The start token's range extends backward to the last token, which is why both were saved above.
            float x = ((((LongToken) start).token - ti + ri) % ri) / ri;
            ownerships.put(start, x);
        }

        return ownerships;
    }

