    private void testContainsWithoutAndMergeTo(Columns columns, List<ColumnDefinition> definitions)
    {
        // pick some arbitrary groupings of columns to remove at-once (to avoid factorial complexity)
        // whatever is left after each removal, we perform this logic on again, recursively
        List<List<ColumnDefinition>> removeGroups = shuffleAndGroup(Lists.newArrayList(definitions));
        for (List<ColumnDefinition> defs : removeGroups)
        {
            Columns subset = columns;
            for (ColumnDefinition def : defs)
                subset = subset.without(def);
            Assert.assertEquals(columns.columnCount() - defs.size(), subset.columnCount());
            List<ColumnDefinition> remainingDefs = Lists.newArrayList(columns);
            remainingDefs.removeAll(defs);

            // test contents after .without
            assertContents(subset, remainingDefs);

            // test .contains
            assertSubset(columns, subset);

            // test .mergeTo
            Columns otherSubset = columns;
            for (ColumnDefinition def : remainingDefs)
            {
                otherSubset = otherSubset.without(def);
                assertContents(otherSubset.mergeTo(subset), definitions);
            }

            testContainsWithoutAndMergeTo(subset, remainingDefs);
        }
    }

