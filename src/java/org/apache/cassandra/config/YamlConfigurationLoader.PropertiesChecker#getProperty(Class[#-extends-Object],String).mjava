        @Override
        public Property getProperty(Class<? extends Object> type, String name)
        {
            final Property result = super.getProperty(type, name);

            if (result instanceof MissingProperty)
            {
                missingProperties.add(result.getName());
            }

            return new Property(result.getName(), result.getType())
            {
                @Override
                public void set(Object object, Object value) throws Exception
                {
                    if (value == null && get(object) != null)
                    {
                        nullProperties.add(getName());
                    }
                    result.set(object, value);
                }

                @Override
                public Class<?>[] getActualTypeArguments()
                {
                    return result.getActualTypeArguments();
                }

                @Override
                public Object get(Object object)
                {
                    return result.get(object);
                }

                public List<Annotation> getAnnotations()
                {
                    return Collections.EMPTY_LIST;
                }

                public <A extends Annotation> A getAnnotation(Class<A> aClass)
                {
                    return null;
                }
            };
        }

