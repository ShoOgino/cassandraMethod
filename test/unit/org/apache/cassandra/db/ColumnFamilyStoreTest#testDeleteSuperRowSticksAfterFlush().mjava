    @Test
    public void testDeleteSuperRowSticksAfterFlush() throws Throwable
    {
        String tableName = "Keyspace1";
        String cfName= "Super1";
        ByteBuffer scfName = ByteBufferUtil.bytes("SuperDuper");
        Table table = Table.open(tableName);
        ColumnFamilyStore cfs = table.getColumnFamilyStore(cfName);
        DecoratedKey key = Util.dk("flush-resurrection");
        
        // create an isolated sstable.
        putColsSuper(cfs, key, scfName, 
                new Column(getBytes(1L), ByteBufferUtil.bytes("val1"), 1),
                new Column(getBytes(2L), ByteBufferUtil.bytes("val2"), 1),
                new Column(getBytes(3L), ByteBufferUtil.bytes("val3"), 1));
        cfs.forceBlockingFlush();
        
        // insert, don't flush.
        putColsSuper(cfs, key, scfName, 
                new Column(getBytes(4L), ByteBufferUtil.bytes("val4"), 1),
                new Column(getBytes(5L), ByteBufferUtil.bytes("val5"), 1),
                new Column(getBytes(6L), ByteBufferUtil.bytes("val6"), 1));
        
        // verify insert.
        final SlicePredicate sp = new SlicePredicate();
        sp.setSlice_range(new SliceRange());
        sp.getSlice_range().setCount(100);
        sp.getSlice_range().setStart(ArrayUtils.EMPTY_BYTE_ARRAY);
        sp.getSlice_range().setFinish(ArrayUtils.EMPTY_BYTE_ARRAY);
        
        assertRowAndColCount(1, 6, scfName, false, cfs.getRangeSlice(scfName, Util.range("f", "g"), 100, QueryFilter.getFilter(sp, cfs.getComparator())));
        
        // deeleet.
        RowMutation rm = new RowMutation(table.name, key.key);
        rm.delete(new QueryPath(cfName, scfName), 2);
        rm.apply();
        
        // verify delete.
        assertRowAndColCount(1, 0, scfName, false, cfs.getRangeSlice(scfName, Util.range("f", "g"), 100, QueryFilter.getFilter(sp, cfs.getComparator())));
        
        // flush
        cfs.forceBlockingFlush();
        
        // re-verify delete.
        assertRowAndColCount(1, 0, scfName, false, cfs.getRangeSlice(scfName, Util.range("f", "g"), 100, QueryFilter.getFilter(sp, cfs.getComparator())));
        
        // late insert.
        putColsSuper(cfs, key, scfName, 
                new Column(getBytes(4L), ByteBufferUtil.bytes("val4"), 1L),
                new Column(getBytes(7L), ByteBufferUtil.bytes("val7"), 1L));
        
        // re-verify delete.
        assertRowAndColCount(1, 0, scfName, false, cfs.getRangeSlice(scfName, Util.range("f", "g"), 100, QueryFilter.getFilter(sp, cfs.getComparator())));
        
        // make sure new writes are recognized.
        putColsSuper(cfs, key, scfName, 
                new Column(getBytes(3L), ByteBufferUtil.bytes("val3"), 3),
                new Column(getBytes(8L), ByteBufferUtil.bytes("val8"), 3),
                new Column(getBytes(9L), ByteBufferUtil.bytes("val9"), 3));
        assertRowAndColCount(1, 3, scfName, false, cfs.getRangeSlice(scfName, Util.range("f", "g"), 100, QueryFilter.getFilter(sp, cfs.getComparator())));
    }

