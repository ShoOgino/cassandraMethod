        boolean sync()
        {
            // always run once after shutdown signalled
            boolean shutdownRequested = shutdown;

            try
            {
                // sync and signal
                long pollStarted = clock.nanoTime();
                if (lastSyncedAt + syncIntervalNanos <= pollStarted || shutdownRequested || syncRequested)
                {
                    // in this branch, we want to flush the commit log to disk
                    commitLog.sync(true);
                    syncRequested = false;
                    lastSyncedAt = pollStarted;
                    syncComplete.signalAll();
                    syncCount++;
                }
                else
                {
                    // in this branch, just update the commit log sync headers
                    commitLog.sync(false);
                }

                // sleep any time we have left before the next one is due
                long now = clock.nanoTime();
                long wakeUpAt = pollStarted + markerIntervalNanos;
                if (wakeUpAt < now)
                {
                    // if we have lagged noticeably, update our lag counter
                    if (firstLagAt == 0)
                    {
                        firstLagAt = now;
                        totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0;
                    }
                    syncExceededIntervalBy += now - wakeUpAt;
                    lagCount++;
                }
                totalSyncDuration += now - pollStarted;

                if (firstLagAt > 0)
                {
                    //Only reset the lag tracking if it actually logged this time
                    boolean logged = NoSpamLogger.log(logger,
                                                      NoSpamLogger.Level.WARN,
                                                      5,
                                                      TimeUnit.MINUTES,
                                                      "Out of {} commit log syncs over the past {}s with average duration of {}ms, {} have exceeded the configured commit interval by an average of {}ms",
                                                      syncCount,
                                                      String.format("%.2f", (now - firstLagAt) * 1e-9d),
                                                      String.format("%.2f", totalSyncDuration * 1e-6d / syncCount),
                                                      lagCount,
                                                      String.format("%.2f", syncExceededIntervalBy * 1e-6d / lagCount));
                    if (logged)
                        firstLagAt = 0;
                }

                if (shutdownRequested)
                    return false;

                if (wakeUpAt > now)
                    LockSupport.parkNanos(wakeUpAt - now);
            }
            catch (Throwable t)
            {
                if (!CommitLog.handleCommitError("Failed to persist commits to disk", t))
                    return false;

                // sleep for full poll-interval after an error, so we don't spam the log file
                LockSupport.parkNanos(markerIntervalNanos);
            }

            return true;
        }

