    @Test
    public void testBestDisk() throws Throwable
    {
        createTable("create table %s (id int primary key, d int)");
        TokenMetadata tmd = StorageService.instance.getTokenMetadata();
        tmd.updateNormalTokens(BootStrapper.getRandomTokens(tmd, 1), InetAddressAndPort.getByName("127.0.0.1"));
        Directories dirs = new Directories(getCurrentColumnFamilyStore().metadata(), Lists.newArrayList(new Directories.DataDirectory(new File("/tmp/1")),
                                                                                                        new Directories.DataDirectory(new File("/tmp/2")),
                                                                                                        new Directories.DataDirectory(new File("/tmp/3"))));
        MockCFS mock = new MockCFS(getCurrentColumnFamilyStore(), dirs);

        int rows = 1000;
        Random rand = new Random();
        for (int i = 0; i < rows; i++)
            execute("insert into %s (id, d) values (?, ?)", rand.nextInt(), i);
        UntypedResultSet res = execute("SELECT token(id) as t FROM %s");
        long disk1 = 0, disk2 = 0, disk3 = 0;
        DiskBoundaries boundaries = mock.getDiskBoundaries();
        for (UntypedResultSet.Row r : res)
        {
            Token t = new Murmur3Partitioner.LongToken(r.getLong("t"));
            if (boundaries.positions.get(0).compareTo(t.minKeyBound()) > 0)
                disk1++;
            else if (boundaries.positions.get(1).compareTo(t.minKeyBound()) > 0)
                disk2++;
            else
                disk3++;
        }
        File expected;
        if (disk1 >= disk2 && disk1 >= disk3)
            expected = new File("/tmp/1");
        else if (disk2 >= disk1 && disk2 >= disk3)
            expected = new File("/tmp/2");
        else
            expected = new File("/tmp/3");

        getCurrentColumnFamilyStore().forceBlockingFlush();
        SSTableReader sstable = getCurrentColumnFamilyStore().getLiveSSTables().iterator().next();
        File bestDisk = ColumnFamilyStore.findBestDiskAndInvalidateCaches(mock, sstable.descriptor, "/tmp/", false, true);
        assertTrue(expected + " : "+ bestDisk, bestDisk.toString().startsWith(expected.toString()));
    }

