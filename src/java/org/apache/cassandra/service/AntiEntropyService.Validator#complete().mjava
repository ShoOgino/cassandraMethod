        /**
         * Depending on the initiator for the validation, either registers
         * trees to be compared locally in AE_SERVICE_STAGE, or remotely.
         */
        public void complete()
        {
            assert ranges != null : "Validator was not prepared()";

            // finish validating remaining rows
            while (ranges.hasNext())
            {
                MerkleTree.TreeRange range = ranges.next();
                if (!ranges.hasNext() && !minrows.isEmpty() &&
                        range.contains(tree.partitioner().getMinimumToken()))
                {
                    // append rows with the minimum token into the last range
                    rows.addAll(minrows);
                    minrows.clear();
                }
                range.validate(rows);
                rows.clear();
            }
            assert rows.isEmpty() && minrows.isEmpty();

            StageManager.getStage(AE_SERVICE_STAGE).execute(this);
            logger.debug("Validated " + validated + " rows into AEService tree for " + cf);
        }

