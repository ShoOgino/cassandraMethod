    /**
     * Handle node move to normal state. That is, node is entering token ring and participating
     * in reads.
     *
     * @param endpoint node
     * @param pieces STATE_NORMAL,token[,other_state,token]
     */
    private void handleStateNormal(InetAddress endpoint, String[] pieces)
    {
        assert pieces.length >= 2;
        Token token = getPartitioner().getTokenFactory().fromString(pieces[1]);

        if (logger_.isDebugEnabled())
            logger_.debug("Node " + endpoint + " state normal, token " + token);

        if (tokenMetadata_.isMember(endpoint))
            logger_.info("Node " + endpoint + " state jump to normal");

        // we don't want to update if this node is responsible for the token and it has a later startup time than endpoint.
        InetAddress currentNode = tokenMetadata_.getEndpoint(token);
        if (currentNode == null || (FBUtilities.getLocalAddress().equals(currentNode) && Gossiper.instance.compareEndpointStartup(endpoint, currentNode) > 0))
            tokenMetadata_.updateNormalToken(token, endpoint);
        else
            logger_.info("Will not change my token ownership to " + endpoint);
        
        if (pieces.length > 2)
        {
            if (REMOVE_TOKEN.equals(pieces[2]))
            { 
                // remove token was called on a dead node.
                Token tokenThatLeft = getPartitioner().getTokenFactory().fromString(pieces[3]);
                InetAddress endpointThatLeft = tokenMetadata_.getEndpoint(tokenThatLeft);
                // let's make sure that we're not removing ourselves. This can happen when a node
                // enters ring as a replacement for a removed node. removeToken for the old node is
                // still in gossip, so we will see it.
                if (FBUtilities.getLocalAddress().equals(endpointThatLeft))
                {
                    logger_.info("Received removeToken gossip about myself. Is this node a replacement for a removed one?");
                    return;
                }
                logger_.debug("Token " + tokenThatLeft + " removed manually (endpoint was " + ((endpointThatLeft == null) ? "unknown" : endpointThatLeft) + ")");
                if (endpointThatLeft != null)
                {
                    removeEndpointLocally(endpointThatLeft);
                }
                tokenMetadata_.removeBootstrapToken(tokenThatLeft);
            }
        }
        
        calculatePendingRanges();
        if (!isClientMode)
            SystemTable.updateToken(endpoint, token);
    }

