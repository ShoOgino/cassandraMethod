    /*
     * This version is used by the external clients to put data into
     * the memtable. This version will respect the threshold and flush
     * the memtable to disk when the size exceeds the threshold.
    */
    void put(String key, ColumnFamily columnFamily, final CommitLog.CommitLogContext cLogCtx) throws IOException
    {
        if (isThresholdViolated(key) )
        {
            lock_.lock();
            try
            {
                final ColumnFamilyStore cfStore = Table.open(table_).getColumnFamilyStore(cfName_);
                if (!isFrozen_)
                {
                    isFrozen_ = true;
                    cfStore.switchMemtable(key, columnFamily, cLogCtx);
                    executor_.flushWhenTerminated(cLogCtx);
                    executor_.shutdown();
                }
                else
                {
                    // retry the put on the new memtable
                    cfStore.apply(key, columnFamily, cLogCtx);
                }
            }
            finally
            {
                lock_.unlock();
            }
        }
        else
        {
        	Runnable putter = new Putter(key, columnFamily);
        	executor_.submit(putter);
        }
    }

