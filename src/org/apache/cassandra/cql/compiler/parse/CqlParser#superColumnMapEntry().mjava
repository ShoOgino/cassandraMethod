    // $ANTLR start superColumnMapEntry
    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:224:1: superColumnMapEntry : superColumnKey ASSOC columnMapValue -> ^( A_SUPERCOLUMN_MAP_ENTRY superColumnKey columnMapValue ) ;
    public final superColumnMapEntry_return superColumnMapEntry() throws RecognitionException {
        superColumnMapEntry_return retval = new superColumnMapEntry_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSOC92=null;
        superColumnKey_return superColumnKey91 = null;

        columnMapValue_return columnMapValue93 = null;


        CommonTree ASSOC92_tree=null;
        RewriteRuleTokenStream stream_ASSOC=new RewriteRuleTokenStream(adaptor,"token ASSOC");
        RewriteRuleSubtreeStream stream_columnMapValue=new RewriteRuleSubtreeStream(adaptor,"rule columnMapValue");
        RewriteRuleSubtreeStream stream_superColumnKey=new RewriteRuleSubtreeStream(adaptor,"rule superColumnKey");
        try {
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:225:4: ( superColumnKey ASSOC columnMapValue -> ^( A_SUPERCOLUMN_MAP_ENTRY superColumnKey columnMapValue ) )
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:225:6: superColumnKey ASSOC columnMapValue
            {
            pushFollow(FOLLOW_superColumnKey_in_superColumnMapEntry1101);
            superColumnKey91=superColumnKey();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_superColumnKey.add(superColumnKey91.getTree());
            ASSOC92=(Token)input.LT(1);
            match(input,ASSOC,FOLLOW_ASSOC_in_superColumnMapEntry1103); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSOC.add(ASSOC92);

            pushFollow(FOLLOW_columnMapValue_in_superColumnMapEntry1105);
            columnMapValue93=columnMapValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_columnMapValue.add(columnMapValue93.getTree());

            // AST REWRITE
            // elements: columnMapValue, superColumnKey
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 225:42: -> ^( A_SUPERCOLUMN_MAP_ENTRY superColumnKey columnMapValue )
            {
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:225:45: ^( A_SUPERCOLUMN_MAP_ENTRY superColumnKey columnMapValue )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(A_SUPERCOLUMN_MAP_ENTRY, "A_SUPERCOLUMN_MAP_ENTRY"), root_1);

                adaptor.addChild(root_1, stream_superColumnKey.next());
                adaptor.addChild(root_1, stream_columnMapValue.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end superColumnMapEntry

