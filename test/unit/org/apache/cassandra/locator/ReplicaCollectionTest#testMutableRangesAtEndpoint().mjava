    @Test
    public void testMutableRangesAtEndpoint()
    {
        ImmutableList<Replica> canonical1 = RANGES_AT_ENDPOINT.subList(0, RANGES_AT_ENDPOINT.size());
        RangesAtEndpoint.Mutable test = new RangesAtEndpoint.Mutable(RANGES_AT_ENDPOINT.get(0).endpoint(), canonical1.size());
        test.addAll(canonical1, Conflict.NONE);
        try
        {   // incorrect range
            test.addAll(canonical1, Conflict.NONE);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        test.addAll(canonical1, Conflict.DUPLICATE); // we ignore exact duplicates
        try
        {   // invalid endpoint; always error
            test.add(fullReplica(EP2, BROADCAST_RANGE), Conflict.ALL);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        try
        {   // conflict on isFull/isTransient
            test.add(fullReplica(EP1, R3), Conflict.DUPLICATE);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        test.add(fullReplica(EP1, R3), Conflict.ALL);

        new RangesAtEndpointTestCase(test, canonical1).testAll();

        RangesAtEndpoint view = test.asImmutableView();
        RangesAtEndpoint snapshot = view.subList(0, view.size());

        ImmutableList<Replica> canonical2 = RANGES_AT_ENDPOINT;
        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);
        new TestCase<>(snapshot, canonical1).testAll();
        new TestCase<>(view, canonical2).testAll();
        new TestCase<>(test, canonical2).testAll();
    }

