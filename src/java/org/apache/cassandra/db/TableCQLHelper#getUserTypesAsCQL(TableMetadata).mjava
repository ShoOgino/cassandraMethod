    /**
     * Build a CQL String representation of User Types used in the given Table.
     *
     * Type order is ensured as types are built incrementally: from the innermost (most nested)
     * to the outermost.
     */
    @VisibleForTesting
    public static List<String> getUserTypesAsCQL(TableMetadata metadata)
    {
        List<AbstractType> types = new ArrayList<>();
        Set<AbstractType> typeSet = new HashSet<>();
        for (ColumnMetadata cd: Iterables.concat(metadata.partitionKeyColumns(), metadata.clusteringColumns(), metadata.regularAndStaticColumns()))
        {
            AbstractType type = cd.type;
            if (type.isUDT())
                resolveUserType((UserType) type, typeSet, types);
        }

        List<String> typeStrings = new ArrayList<>(types.size());
        for (AbstractType type: types)
            typeStrings.add(toCQL((UserType) type));
        return typeStrings;
    }

