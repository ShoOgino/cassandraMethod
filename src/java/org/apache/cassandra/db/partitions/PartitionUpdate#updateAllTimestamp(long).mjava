    /**
     * Modify this update to set every timestamp for live data to {@code newTimestamp} and
     * every deletion timestamp to {@code newTimestamp - 1}.
     *
     * There is no reason to use that expect on the Paxos code path, where we need ensure that
     * anything inserted use the ballot timestamp (to respect the order of update decided by
     * the Paxos algorithm). We use {@code newTimestamp - 1} for deletions because tombstones
     * always win on timestamp equality and we don't want to delete our own insertions
     * (typically, when we overwrite a collection, we first set a complex deletion to delete the
     * previous collection before adding new elements. If we were to set that complex deletion
     * to the same timestamp that the new elements, it would delete those elements). And since
     * tombstones always wins on timestamp equality, using -1 guarantees our deletion will still
     * delete anything from a previous update.
     */
    public void updateAllTimestamp(long newTimestamp)
    {
        // We know we won't be updating that update again after this call, and doing is post built is potentially
        // slightly more efficient (things are more "compact"). So force a build if it hasn't happened yet.
        maybeBuild();

        deletionInfo.updateAllTimestamp(newTimestamp - 1);

        if (!staticRow.isEmpty())
            staticRow = staticRow.updateAllTimestamp(newTimestamp);

        for (int i = 0; i < rows.size(); i++)
            rows.set(i, rows.get(i).updateAllTimestamp(newTimestamp));
    }

