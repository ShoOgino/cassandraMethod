    @Test
    public void neighbourDown()
    {
        String table = tableName("neighbourdown");
        assertTimeoutPreemptively(Duration.ofMinutes(1), () -> {
            CLUSTER.schemaChange(format("CREATE TABLE %s.%s (key text, value text, PRIMARY KEY (key))", KEYSPACE, table));
            Future<Void> shutdownFuture = CLUSTER.get(2).shutdown();
            String downNodeAddress = CLUSTER.get(2).callOnInstance(() -> FBUtilities.getBroadcastAddressAndPort().toString());
            try
            {
                // wait for the node to stop
                shutdownFuture.get();
                // wait for the failure detector to detect this
                CLUSTER.get(1).runOnInstance(() -> {
                    InetAddressAndPort neighbor;
                    try
                    {
                        neighbor = InetAddressAndPort.getByName(downNodeAddress);
                    }
                    catch (UnknownHostException e)
                    {
                        throw new RuntimeException(e);
                    }
                    while (FailureDetector.instance.isAlive(neighbor))
                        Uninterruptibles.sleepUninterruptibly(500, TimeUnit.MILLISECONDS);
                });

                long repairExceptions = getRepairExceptions(CLUSTER, 1);
                NodeToolResult result = repair(1, KEYSPACE, table);
                result.asserts()
                      .failure()
                      .errorContains("Endpoint not alive");
                if (withNotifications)
                {
                    result.asserts()
                          .notificationContains(NodeToolResult.ProgressEventType.START, "Starting repair command")
                          .notificationContains(NodeToolResult.ProgressEventType.START, "repairing keyspace " + KEYSPACE + " with repair options")
                          .notificationContains(NodeToolResult.ProgressEventType.ERROR, "Endpoint not alive")
                          .notificationContains(NodeToolResult.ProgressEventType.COMPLETE, "finished with error");
                }

                Assert.assertEquals(repairExceptions + 1, getRepairExceptions(CLUSTER, 1));
            }
            finally
            {
                CLUSTER.get(2).startup();
            }

            // make sure to call outside of the try/finally so the node is up so we can actually query
            if (repairType != RepairType.PREVIEW)
            {
                assertParentRepairFailedWithMessageContains(CLUSTER, KEYSPACE, table, "Endpoint not alive");
            }
            else
            {
                assertParentRepairNotExist(CLUSTER, KEYSPACE, table);
            }
        });
    }

