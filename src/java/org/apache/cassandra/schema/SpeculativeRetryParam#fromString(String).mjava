    public static SpeculativeRetryParam fromString(String value)
    {
        String upperCaseValue = value.toUpperCase(Locale.ENGLISH);
        if (upperCaseValue.endsWith("MS"))
        {
            try
            {
                return custom(Double.parseDouble(value.substring(0, value.length() - "ms".length())));
            }
            catch (IllegalArgumentException e)
            {
                throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
            }
        }

        if (upperCaseValue.endsWith(Kind.PERCENTILE.toString()) ||
            upperCaseValue.endsWith("P"))
        {
            int suffixLength = upperCaseValue.endsWith("P") ? 1 : Kind.PERCENTILE.toString().length();
            double threshold;
            try
            {
                threshold = Double.parseDouble(value.substring(0, value.length() - suffixLength));
            }
            catch (IllegalArgumentException e)
            {
                throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
            }

            if (threshold >= 0.0 && threshold <= 100.0)
                return percentile(threshold);

            throw new ConfigurationException(format("Invalid value %s for PERCENTILE option '%s': must be between 0.0 and 100.0",
                                                    value,
                                                    TableParams.Option.SPECULATIVE_RETRY));
        }

        if (upperCaseValue.equals(Kind.NONE.toString()))
            return NONE;

        if (upperCaseValue.equals(Kind.ALWAYS.toString()))
            return ALWAYS;

        throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
    }

