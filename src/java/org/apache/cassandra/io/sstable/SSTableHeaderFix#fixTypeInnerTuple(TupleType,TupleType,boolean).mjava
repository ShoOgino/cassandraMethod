    private AbstractType<?> fixTypeInnerTuple(TupleType cHeader, TupleType cSchema, boolean droppedColumnMode)
    {
        if (cHeader.size() != cSchema.size())
            // different number of components - bummer...
            return null;
        List<AbstractType<?>> cHeaderFixed = new ArrayList<>(cHeader.size());
        boolean anyChanged = false;
        for (int i = 0; i < cHeader.size(); i++)
        {
            AbstractType<?> cHeaderComp = cHeader.type(i);
            AbstractType<?> cHeaderCompFixed = fixTypeInner(cHeaderComp, cSchema.type(i), droppedColumnMode);
            if (cHeaderCompFixed == null)
                // incompatible, bummer...
                return null;
            cHeaderFixed.add(cHeaderCompFixed);
            anyChanged |= cHeaderComp != cHeaderCompFixed;
        }
        if (anyChanged || cSchema.isMultiCell() != cHeader.isMultiCell())
            // TODO this should create a non-frozen tuple type for the sake of handling a dropped, non-frozen UDT
            return new TupleType(cHeaderFixed);
        return cHeader;
    }

