    synchronized AbstractCompactionTask getNextBackgroundTask(int gcBefore)
    {
        if (strategies.isEmpty())
            return null;

        Map<UUID, Integer> numTasks = new HashMap<>(strategies.size());
        ArrayList<UUID> sessions = new ArrayList<>(strategies.size());
        for (Map.Entry<UUID, AbstractCompactionStrategy> entry : strategies.entrySet())
        {
            if (canCleanup(entry.getKey()))
            {
                continue;
            }
            numTasks.put(entry.getKey(), getEstimatedRemainingTasks(entry.getKey(), entry.getValue()));
            sessions.add(entry.getKey());
        }

        if (sessions.isEmpty())
            return null;

        // we want the session with the most compactions at the head of the list
        sessions.sort((o1, o2) -> numTasks.get(o2) - numTasks.get(o1));

        UUID sessionID = sessions.get(0);
        return get(sessionID).getNextBackgroundTask(gcBefore);
    }

