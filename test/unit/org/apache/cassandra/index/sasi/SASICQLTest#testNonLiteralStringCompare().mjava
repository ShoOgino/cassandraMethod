    /**
     * Tests query condition '>' on string columns with is_literal=false.
     */
    @Test
    public void testNonLiteralStringCompare() throws Throwable
    {
        for (String mode : new String[]{ "PREFIX", "CONTAINS", "SPARSE"})
        {
            for (boolean forceFlush : new boolean[]{ false, true })
            {
                try
                {
                    createTable("CREATE TABLE %s (pk int primary key, v text);");
                    createIndex(String.format("CREATE CUSTOM INDEX ON %%s (v) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = {'is_literal': 'false', 'mode': '%s'};", mode));

                    execute("INSERT INTO %s (pk, v) VALUES (?, ?);", 0, "a");
                    execute("INSERT INTO %s (pk, v) VALUES (?, ?);", 1, "abc");
                    execute("INSERT INTO %s (pk, v) VALUES (?, ?);", 2, "ac");

                    flush(forceFlush);

                    Session session = sessionNet();
                    SimpleStatement stmt = new SimpleStatement("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE v = 'ab'");
                    stmt.setFetchSize(5);
                    List<Row> rs = session.execute(stmt).all();
                    Assert.assertEquals(0, rs.size());

                    try
                        {
                        sessionNet();
                        stmt = new SimpleStatement("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE v > 'ab'");
                        stmt.setFetchSize(5);
                        rs = session.execute(stmt).all();
                        Assert.assertFalse("CONTAINS mode on non-literal string type should not support RANGE operators", "CONTAINS".equals(mode));
                        Assert.assertEquals(2, rs.size());
                        Assert.assertEquals(1, rs.get(0).getInt("pk"));
                    }
                    catch (InvalidQueryException ex)
                    {
                        if (!"CONTAINS".equals(mode))
                            throw ex;
                    }
                }
                catch (Throwable th)
                {
                    throw new AssertionError(String.format("Failure with mode:%s and flush:%s ", mode, forceFlush), th);
                }

            }
        }
    }

