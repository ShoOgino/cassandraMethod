    @Test
    public void testForcedNormalRepairWithOneNodeDown() throws Exception
    {
        // The test uses its own keyspace with rf == 2
        String forceRepairKeyspace = "test_force_repair_keyspace";
        int rf = 2;
        cluster.schemaChange("CREATE KEYSPACE " + forceRepairKeyspace + " WITH replication = {'class': 'SimpleStrategy', 'replication_factor': " + rf + "};");

        try
        {
            shutDownNodesAndForceRepair(cluster, forceRepairKeyspace, 3); // shutdown node 3 after inserting
            DistributedRepairUtils.assertParentRepairSuccess(cluster, 1, forceRepairKeyspace, "test", row -> {
                Set<String> successfulRanges = row.getSet("successful_ranges");
                Set<String> requestedRanges = row.getSet("requested_ranges");
                Assert.assertNotNull("Found no successful ranges", successfulRanges);
                Assert.assertNotNull("Found no requested ranges", requestedRanges);
                Assert.assertEquals("Requested ranges count should equals to replication factor", rf, requestedRanges.size());
                Assert.assertTrue("Given clusterSize = 3, RF = 2 and 1 node down in the replica set, it should yield only 1 successful repaired range.",
                                  successfulRanges.size() == 1 && !successfulRanges.contains("")); // the successful ranges set should not only contain empty string
            });
        }
        finally
        {
            // bring the node 3 back up
            if (cluster.get(3).isShutdown())
                cluster.get(3).startup(cluster);
        }
    }

