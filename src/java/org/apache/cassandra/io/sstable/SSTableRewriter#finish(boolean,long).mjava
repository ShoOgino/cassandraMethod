    /**
     * Finishes the new file(s)
     *
     * Creates final files, adds the new files to the dataTracker (via replaceReader) but only marks the
     * old files as compacted if cleanupOldReaders is set to true. Otherwise it is up to the caller to do those gymnastics
     * (ie, call DataTracker#markCompactedSSTablesReplaced(..))
     *
     * @param cleanupOldReaders if we should replace the old files with the new ones
     * @param repairedAt the repair time, -1 if we should use the time we supplied when we created
     *                   the SSTableWriter (and called rewriter.switchWriter(..)), actual time if we want to override the
     *                   repair time.
     */
    public void finish(boolean cleanupOldReaders, long repairedAt)
    {
        if (writer.getFilePointer() > 0)
        {
            SSTableReader reader = repairedAt < 0 ? writer.closeAndOpenReader(maxAge) : writer.closeAndOpenReader(maxAge, repairedAt);
            finished.add(reader);
            replaceReader(currentlyOpenedEarly, reader, false);
            moveStarts(reader, Functions.constant(reader.last), false);
        }
        else
        {
            writer.abort(true);
        }
        // make real sstables of the written ones:
        for (Pair<SSTableWriter, SSTableReader> w : finishedWriters)
        {
            if (w.left.getFilePointer() > 0)
            {
                SSTableReader newReader = repairedAt < 0 ? w.left.closeAndOpenReader(maxAge) : w.left.closeAndOpenReader(maxAge, repairedAt);
                finished.add(newReader);
                // w.right is the tmplink-reader we added when switching writer, replace with the real sstable.
                replaceReader(w.right, newReader, false);
            }
            else
            {
                assert w.right == null;
                w.left.abort(true);
            }
        }
        if (!isOffline)
        {
            dataTracker.unmarkCompacting(finished);
            if (cleanupOldReaders)
                dataTracker.markCompactedSSTablesReplaced(rewriting, finished, rewriteType);
        }
        else if (cleanupOldReaders)
        {
            for (SSTableReader reader : rewriting)
            {
                reader.markObsolete();
                reader.releaseReference();
            }
        }
        isFinished = true;
    }

