    public String system_add_keyspace(KsDef ks_def) throws InvalidRequestException, TException
    {
        // IAuthenticator was devised prior to, and without thought for, dynamic keyspace creation. As
        // a result, we must choose between letting anyone/everyone create keyspaces (which they likely
        // won't even be able to use), or be honest and disallow it entirely if configured for auth.
        if (!(DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator))
            throw new InvalidRequestException("Unable to create new keyspace while authentication is enabled.");

        // if there is anything going on in the migration stage, fail.
        if (StageManager.getStage(StageManager.MIGRATION_STAGE).getQueue().size() > 0)
            throw new InvalidRequestException("This node appears to be handling gossiped migrations.");

        try
        {
            Collection<CFMetaData> cfDefs = new ArrayList<CFMetaData>(ks_def.cf_defs.size());
            for (CfDef cfDef : ks_def.cf_defs)
            {
                cfDefs.add(convertToCFMetaData(cfDef));
            }
            
            KSMetaData ksm = new KSMetaData(
                    ks_def.name, 
                    (Class<? extends AbstractReplicationStrategy>)Class.forName(ks_def.strategy_class), 
                    ks_def.replication_factor, 
                    cfDefs.toArray(new CFMetaData[cfDefs.size()]));
            AddKeyspace add = new AddKeyspace(ksm);
            add.apply();
            add.announce();
            return DatabaseDescriptor.getDefsVersion().toString();
        }
        catch (ClassNotFoundException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
        catch (ConfigurationException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
        catch (IOException e)
        {
            InvalidRequestException ex = new InvalidRequestException(e.getMessage());
            ex.initCause(e);
            throw ex;
        }
    }

