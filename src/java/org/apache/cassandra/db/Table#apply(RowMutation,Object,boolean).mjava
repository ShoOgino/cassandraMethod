    /**
     * This method adds the row to the Commit Log associated with this table.
     * Once this happens the data associated with the individual column families
     * is also written to the column family store's memtable.
    */
    public void apply(RowMutation mutation, Object serializedMutation, boolean writeCommitLog) throws IOException
    {
        HashMap<ColumnFamilyStore,Memtable> memtablesToFlush = new HashMap<ColumnFamilyStore, Memtable>(2);

        // write the mutation to the commitlog and memtables
        flusherLock.readLock().lock();
        try
        {
            if (writeCommitLog)
                CommitLog.instance().add(mutation, serializedMutation);
        
            DecoratedKey key = StorageService.getPartitioner().decorateKey(mutation.key());
            for (ColumnFamily cf : mutation.getColumnFamilies())
            {
                ColumnFamilyStore cfs = columnFamilyStores.get(cf.id());
                if (cfs == null)
                {
                    logger.error("Attempting to mutate non-existant column family " + cf.id());
                    continue;
                }

                SortedSet<byte[]> mutatedIndexedColumns = null;
                for (byte[] column : cfs.getIndexedColumns())
                {
                    if (cf.getColumnNames().contains(column))
                    {
                        if (mutatedIndexedColumns == null)
                            mutatedIndexedColumns = new TreeSet<byte[]>(FBUtilities.byteArrayComparator);
                        mutatedIndexedColumns.add(column);
                    }
                }

                if (mutatedIndexedColumns == null)
                {
                    // just update the actual value, no extra synchronization
                    applyCF(cfs, key, cf, memtablesToFlush);
                }
                else
                {
                    synchronized (indexLockFor(mutation.key()))
                    {
                        // read old indexed values
                        QueryFilter filter = QueryFilter.getNamesFilter(key, new QueryPath(cfs.getColumnFamilyName()), mutatedIndexedColumns);
                        ColumnFamily oldIndexedColumns = cfs.getColumnFamily(filter);

                        // ignore obsolete column updates
                        if (oldIndexedColumns != null)
                        {
                            for (IColumn oldColumn : oldIndexedColumns)
                            {
                                if (cfs.metadata.reconciler.reconcile((Column) oldColumn, (Column) cf.getColumn(oldColumn.name())).equals(oldColumn))
                                {
                                    cf.remove(oldColumn.name());
                                    mutatedIndexedColumns.remove(oldColumn.name());
                                    oldIndexedColumns.remove(oldColumn.name());
                                }
                            }
                        }

                        // apply the mutation
                        applyCF(cfs, key, cf, memtablesToFlush);

                        // add new index entries
                        for (byte[] columnName : mutatedIndexedColumns)
                        {
                            IColumn column = cf.getColumn(columnName);
                            DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
                            ColumnFamily cfi = cfs.newIndexedColumnFamily(columnName);
                            cfi.addColumn(new Column(mutation.key(), ArrayUtils.EMPTY_BYTE_ARRAY, column.clock()));
                            applyCF(cfs.getIndexedColumnFamilyStore(columnName), valueKey, cfi, memtablesToFlush);
                        }

                        // remove the old index entries
                        if (oldIndexedColumns != null)
                        {
                            int localDeletionTime = (int)(System.currentTimeMillis() / 1000);
                            for (Map.Entry<byte[], IColumn> entry : oldIndexedColumns.getColumnsMap().entrySet())
                            {
                                byte[] columnName = entry.getKey();
                                IColumn column = entry.getValue();
                                DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
                                ColumnFamily cfi = cfs.newIndexedColumnFamily(columnName);
                                cfi.deleteColumn(mutation.key(), localDeletionTime, column.clock());
                                applyCF(cfs.getIndexedColumnFamilyStore(columnName), valueKey, cfi, memtablesToFlush);
                            }
                        }
                    }
                }

                ColumnFamily cachedRow = cfs.getRawCachedRow(key);
                if (cachedRow != null)
                    cachedRow.addAll(cf);
            }
        }
        finally
        {
            flusherLock.readLock().unlock();
        }

        // flush memtables that got filled up.  usually mTF will be empty and this will be a no-op
        for (Map.Entry<ColumnFamilyStore, Memtable> entry : memtablesToFlush.entrySet())
            entry.getKey().maybeSwitchMemtable(entry.getValue(), writeCommitLog);
    }

