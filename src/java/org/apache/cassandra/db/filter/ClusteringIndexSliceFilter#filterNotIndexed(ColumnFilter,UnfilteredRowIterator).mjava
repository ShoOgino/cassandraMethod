    // Given another iterator, only return the rows that match this filter
    public UnfilteredRowIterator filterNotIndexed(final ColumnFilter columnFilter, UnfilteredRowIterator iterator)
    {
        final Slices.InOrderTester tester = slices.inOrderTester(reversed);

        // Note that we don't filter markers because that's a bit trickier (we don't know in advance until when
        // the range extend) and it's harmless to leave them.
        return new FilteringRowIterator(iterator)
        {
            @Override
            public FilteringRow makeRowFilter()
            {
                return FilteringRow.columnsFilteringRow(columnFilter);
            }

            @Override
            protected boolean includeRow(Row row)
            {
                return tester.includes(row.clustering());
            }

            @Override
            public boolean hasNext()
            {
                return !tester.isDone() && super.hasNext();
            }
        };
    }

