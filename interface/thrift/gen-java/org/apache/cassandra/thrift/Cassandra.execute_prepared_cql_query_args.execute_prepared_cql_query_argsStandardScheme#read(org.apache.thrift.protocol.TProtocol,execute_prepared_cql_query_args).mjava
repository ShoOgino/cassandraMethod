      public void read(org.apache.thrift.protocol.TProtocol iprot, execute_prepared_cql_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itemId = iprot.readI32();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list382 = iprot.readListBegin();
                  struct.values = new ArrayList<ByteBuffer>(_list382.size);
                  for (int _i383 = 0; _i383 < _list382.size; ++_i383)
                  {
                    ByteBuffer _elem384; // required
                    _elem384 = iprot.readBinary();
                    struct.values.add(_elem384);
                  }
                  iprot.readListEnd();
                }
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetItemId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

