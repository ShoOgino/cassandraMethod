    @Test
    public void testCleanup() throws Exception
    {
        Keyspace keyspace = Keyspace.open(KEYSPACE1);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);


        // insert data and verify we get it back w/ range query
        fillCF(cfs, "val", LOOPS);

        // record max timestamps of the sstables pre-cleanup
        List<Long> expectedMaxTimestamps = getMaxTimestampList(cfs);

        assertEquals(LOOPS, Util.getAll(Util.cmd(cfs).build()).size());

        // with two tokens RF=2/1 and the sstable not repaired this should do nothing
        CompactionManager.instance.performCleanup(cfs, 2);

        // ensure max timestamp of the sstables are retained post-cleanup
        assert expectedMaxTimestamps.equals(getMaxTimestampList(cfs));

        // check data is still there
        assertEquals(LOOPS, Util.getAll(Util.cmd(cfs).build()).size());

        //Get an exact count of how many partitions are in the fully replicated range and should
        //be retained
        int fullCount = 0;
        RangesAtEndpoint localRanges = StorageService.instance.getLocalReplicas(keyspace.getName()).filter(Replica::isFull);
        for (FilteredPartition partition : Util.getAll(Util.cmd(cfs).build()))
        {
            Token token = partition.partitionKey().getToken();
            for (Replica r : localRanges)
            {
                if (r.range().contains(token))
                    fullCount++;
            }
        }

        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();
        sstable.descriptor.getMetadataSerializer().mutateRepairMetadata(sstable.descriptor, 1, null, false);
        sstable.reloadSSTableMetadata();

        // This should remove approximately 50% of the data, specifically whatever was transiently replicated
        CompactionManager.instance.performCleanup(cfs, 2);

        // ensure max timestamp of the sstables are retained post-cleanup
        assert expectedMaxTimestamps.equals(getMaxTimestampList(cfs));

        // check less data is there, all transient data should be gone since the table was repaired
        assertEquals(fullCount, Util.getAll(Util.cmd(cfs).build()).size());
    }

