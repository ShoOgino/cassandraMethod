    public static void main(String[] args) throws Exception
    {
    	if(args.length < 2)
    	{
    		printUsage();
    		return;
    	}

    	int argc = 0;
    	try
    	{
    		/* set the token for a particular node in the Cassandra cluster */
	    	if(SET_TOKEN.equals(args[argc]))
	    	{
		    	String serverName = args[argc + 1];
		    	BigInteger token = new BigInteger(args[argc + 2]);
		    	//System.out.println("Calibrating " + serverName + " with token " + token);
		    	applyToken(serverName, token);
	    	}
	    	/* Print the hash of a given key */
	    	else if(HASH_KEY.equals(args[argc]))
	    	{
	    		System.out.println("Hash = [" + StorageService.hash(args[argc + 1]) + "]");
	    	}
	    	/* build indexes given the data file */
	    	else if(BUILD_INDEX.equals(args[argc]))
	    	{
	    		IndexBuilder.main(args);
	    	}
	    	/* test reads */
	    	else if(READ_TEST.equals(args[argc]))
	    	{
	    		System.out.println("Testing reads...");
	    		int numThreads = Integer.parseInt(args[argc + 1]);
				int rpsPerThread = Integer.parseInt(args[argc + 2]);
				String machinesToRead = args[argc + 3];
//				ReadTest.runReadTest(numThreads, rpsPerThread, machinesToRead);
	    	}
	    	/* test writes */
	    	else if(WRITE_TEST.equals(args[argc]))
	    	{
	    		System.out.println("Testing writes...");
	    		int numThreads = Integer.parseInt(args[argc + 1]);
				int rpsPerThread = Integer.parseInt(args[argc + 2]);
				String machinesToWrite = args[argc + 3];
//				WriteTest.runWriteTest(numThreads, rpsPerThread, machinesToWrite);
	    	}
    	} catch(Exception e)
    	{
    		System.err.println("Exception " + e.getMessage());
			e.printStackTrace(System.err);
    		printUsage();
    	}

    	System.exit(0);
    }

