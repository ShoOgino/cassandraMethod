    /**
     *
     * @param super_column
     * @param range: either a Bounds, which includes start key, or a Range, which does not.
     * @param keyMax maximum number of keys to process, regardless of startKey/finishKey
     * @param columnFilter description of the columns we're interested in for each row
     * @throws ExecutionException
     * @throws InterruptedException
     */
    public List<Row> getRangeSlice(byte[] super_column, final AbstractBounds range, int keyMax, IFilter columnFilter)
    throws ExecutionException, InterruptedException
    {
        List<Row> rows = new ArrayList<Row>();
        assert range instanceof Bounds
               || (!((Range)range).isWrapAround() || range.right.equals(StorageService.getPartitioner().getMinimumToken()))
               : range;
        getRangeRows(rows, super_column, range, keyMax, columnFilter);
        return rows;
    }

