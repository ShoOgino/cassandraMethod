    private void testDontPurgeAccidentally(String k, String cfname) throws InterruptedException
    {
        // This test catches the regression of CASSANDRA-2786
        Keyspace keyspace = Keyspace.open(KEYSPACE1);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);
        CFMetaData table = cfs.metadata;

        // disable compaction while flushing
        cfs.clearUnsafe();
        cfs.disableAutoCompaction();

        // Add test row
        DecoratedKey key = Util.dk(k);
        RowUpdateBuilder rowUpdateBuilder = new RowUpdateBuilder(table, 0, key);
        rowUpdateBuilder.clustering("c").add("val", "a");
        rowUpdateBuilder.build().applyUnsafe();

        cfs.forceBlockingFlush();

        Collection<SSTableReader> sstablesBefore = cfs.getLiveSSTables();

        ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, key).build());
        assertTrue(!partition.isEmpty());

        RowUpdateBuilder deleteRowBuilder = new RowUpdateBuilder(table, 2, key);
        deleteRowBuilder.clustering("c").delete("val");
        deleteRowBuilder.build().applyUnsafe();
        // Remove key

        partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, key).build());
        assertTrue(partition.iterator().next().cells().iterator().next().isTombstone());

        // Sleep one second so that the removal is indeed purgeable even with gcgrace == 0
        Thread.sleep(1000);

        cfs.forceBlockingFlush();

        Collection<SSTableReader> sstablesAfter = cfs.getLiveSSTables();
        Collection<SSTableReader> toCompact = new ArrayList<SSTableReader>();
        for (SSTableReader sstable : sstablesAfter)
            if (!sstablesBefore.contains(sstable))
                toCompact.add(sstable);

        Util.compact(cfs, toCompact);

        SSTableReader newSSTable = null;
        for (SSTableReader reader : cfs.getLiveSSTables())
        {
            assert !toCompact.contains(reader);
            if (!sstablesBefore.contains(reader))
                newSSTable = reader;
        }

        // We cannot read the data, since {@link ReadCommand#withoutPurgeableTombstones} will purge droppable tombstones
        // but we just want to check here that compaction did *NOT* drop the tombstone, so we read from the SSTable directly
        // instead
        ISSTableScanner scanner = newSSTable.getScanner();
        assertTrue(scanner.hasNext());
        UnfilteredRowIterator rowIt = scanner.next();
        assertTrue(rowIt.hasNext());
        Unfiltered unfiltered = rowIt.next();
        assertTrue(unfiltered.isRow());
        Row row = (Row)unfiltered;
        assertTrue(row.cells().iterator().next().isTombstone());
        assertFalse(rowIt.hasNext());
        assertFalse(scanner.hasNext());
    }

