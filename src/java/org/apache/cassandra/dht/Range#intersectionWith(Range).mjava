    public List<Range> intersectionWith(Range that)
    {
        boolean thiswraps = isWrapAround(left, right);
        boolean thatwraps = isWrapAround(that.left, that.right);
        if (thiswraps && thatwraps)
        {
            // there is always an intersection when both wrap
            return Arrays.asList(new Range((Token)ObjectUtils.max(this.left, that.left),
                                           (Token)ObjectUtils.min(this.right, that.right)));
        }
        if (!thiswraps && !thatwraps)
        {
            if (!(left.compareTo(that.right) < 0 && that.left.compareTo(right) < 0))
                return Collections.emptyList();
            return Arrays.asList(new Range((Token)ObjectUtils.max(this.left, that.left),
                                           (Token)ObjectUtils.min(this.right, that.right)));
        }
        if (thiswraps && !thatwraps)
            return intersectionOneWrapping(this, that);
        assert (!thiswraps && thatwraps);
        return intersectionOneWrapping(that, this);
    }

