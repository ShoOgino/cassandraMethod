        public Row merge(DeletionTime activeDeletion)
        {
            // If for this clustering we have only one row version and have no activeDeletion (i.e. nothing to filter out),
            // then we can just return that single row (we also should have no listener)
            if (rowsToMerge == 1 && activeDeletion.isLive() && listener == null)
            {
                for (int i = 0; i < rows.length; i++)
                    if (rows[i] != null)
                        return rows[i];
                throw new AssertionError();
            }

            Row.Writer writer = getWriter();
            Rows.writeClustering(clustering, writer);

            for (int i = 0; i < rows.length; i++)
            {
                if (rows[i] == null)
                    continue;

                rowInfo = rowInfo.mergeWith(rows[i].primaryKeyLivenessInfo());

                if (rows[i].deletion().supersedes(rowDeletion))
                    rowDeletion = rows[i].deletion();
            }

            if (rowDeletion.supersedes(activeDeletion))
                activeDeletion = rowDeletion;

            if (activeDeletion.deletes(rowInfo))
                rowInfo = LivenessInfo.NONE;

            writer.writePartitionKeyLivenessInfo(rowInfo);
            writer.writeRowDeletion(rowDeletion);

            for (int i = 0; i < columns.simpleColumnCount(); i++)
            {
                ColumnDefinition c = columns.getSimple(i);
                for (int j = 0; j < rows.length; j++)
                    cells[j] = rows[j] == null ? null : rows[j].getCell(c);

                reconcileCells(activeDeletion, writer);
            }

            complexReducer.activeDeletion = activeDeletion;
            complexReducer.writer = writer;
            for (int i = 0; i < columns.complexColumnCount(); i++)
            {
                ColumnDefinition c = columns.getComplex(i);

                DeletionTime maxComplexDeletion = DeletionTime.LIVE;
                for (int j = 0; j < rows.length; j++)
                {
                    if (rows[j] == null)
                        continue;

                    DeletionTime dt = rows[j].getDeletion(c);
                    if (complexDelTimes != null)
                        complexDelTimes[j] = dt;

                    if (dt.supersedes(maxComplexDeletion))
                        maxComplexDeletion = dt;
                }

                boolean overrideActive = maxComplexDeletion.supersedes(activeDeletion);
                maxComplexDeletion =  overrideActive ? maxComplexDeletion : DeletionTime.LIVE;
                writer.writeComplexDeletion(c, maxComplexDeletion);
                if (listener != null)
                    listener.onMergedComplexDeletion(c, maxComplexDeletion, complexDelTimes);

                mergeComplex(overrideActive ? maxComplexDeletion : activeDeletion, c);
            }
            writer.endOfRow();

            Row row = getRow();
            // Because shadowed cells are skipped, the row could be empty. In which case
            // we return null (we also don't want to signal anything in that case since that
            // means everything in the row was shadowed and the listener will have been signalled
            // for whatever shadows it).
            if (row.isEmpty())
                return null;

            maybeSignalEndOfRow();
            return row;
        }

