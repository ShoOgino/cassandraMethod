    @Test
    public void testOptimizedCreateStandardSyncTasks()
    {
        List<TreeResponse> treeResponses = Arrays.asList(treeResponse(addr1, range1, "one",   range2, "one"),
                                                         treeResponse(addr2, range1, "one",   range2, "two"),
                                                         treeResponse(addr3, range1, "three", range2, "two"));

        Map<SyncNodePair, SyncTask> tasks = toMap(RepairJob.createOptimisedSyncingSyncTasks(desc,
                                                                                            treeResponses,
                                                                                            addr4, // local
                                                                                            noTransient(),
                                                                                            addr -> "DC1",
                                                                                            false,
                                                                                            PreviewKind.ALL));

        for (SyncTask task : tasks.values())
            assertTrue(task instanceof AsymmetricRemoteSyncTask);

        assertEquals(Arrays.asList(range1), tasks.get(pair(addr1, addr3)).rangesToSync);
        // addr1 can get range2 from either addr2 or addr3 but not from both
        assertStreamRangeFromEither(tasks, Arrays.asList(range2),
                                    addr1, addr2, addr3);

        assertEquals(Arrays.asList(range1), tasks.get(pair(addr2, addr3)).rangesToSync);
        assertEquals(Arrays.asList(range2), tasks.get(pair(addr2, addr1)).rangesToSync);

        // addr3 can get range1 from either addr1 or addr2 but not from both
        assertStreamRangeFromEither(tasks, Arrays.asList(range1),
                                    addr3, addr2, addr1);
        assertEquals(Arrays.asList(range2), tasks.get(pair(addr3, addr1)).rangesToSync);
    }

