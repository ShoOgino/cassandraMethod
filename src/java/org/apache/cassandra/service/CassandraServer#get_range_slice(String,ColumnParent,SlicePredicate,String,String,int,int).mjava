    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int maxRows, int consistency_level)
            throws InvalidRequestException, UnavailableException, TException, TimedOutException
    {
        if (logger.isDebugEnabled())
            logger.debug("range_slice");
        if (predicate.getSlice_range() != null)
            ThriftValidation.validateRange(keyspace, column_parent, predicate.getSlice_range());
        else
            ThriftValidation.validateColumns(keyspace, column_parent, predicate.getColumn_names());
        if (!StorageService.getPartitioner().preservesOrder())
        {
            throw new InvalidRequestException("range queries may only be performed against an order-preserving partitioner");
        }
        if (maxRows <= 0)
        {
            throw new InvalidRequestException("maxRows must be positive");
        }

        List<Pair<String,Collection<IColumn>>> rows;
        try
        {
            DecoratedKey startKey = StorageService.getPartitioner().decorateKey(start_key);
            DecoratedKey finishKey = StorageService.getPartitioner().decorateKey(finish_key);
            rows = StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace, column_parent, predicate, startKey, finishKey, maxRows), consistency_level);
            assert rows != null;
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }

        List<KeySlice> keySlices = new ArrayList<KeySlice>(rows.size());
        for (Pair<String, Collection<IColumn>> row : rows)
        {
            Collection<IColumn> columns = row.right;
            List<ColumnOrSuperColumn> svcList = new ArrayList<ColumnOrSuperColumn>(columns.size());
            for (org.apache.cassandra.db.IColumn col : columns)
            {
                if (col instanceof org.apache.cassandra.db.Column)
                    svcList.add(new ColumnOrSuperColumn(new org.apache.cassandra.service.Column(col.name(), col.value(), col.timestamp()), null));
                else if (col instanceof org.apache.cassandra.db.SuperColumn)
                {
                    Collection<IColumn> subICols = col.getSubColumns();
                    List<org.apache.cassandra.service.Column> subCols = new ArrayList<org.apache.cassandra.service.Column>(subICols.size());
                    for (IColumn subCol : subICols)
                        subCols.add(new org.apache.cassandra.service.Column(subCol.name(), subCol.value(), subCol.timestamp()));
                    svcList.add(new ColumnOrSuperColumn(null, new org.apache.cassandra.service.SuperColumn(col.name(), subCols)));
                }
            }
            keySlices.add(new KeySlice(row.left, svcList));
        }

        return keySlices;
    }

