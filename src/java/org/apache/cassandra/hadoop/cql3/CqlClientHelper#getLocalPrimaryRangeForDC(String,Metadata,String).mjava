    public static Map<TokenRange, List<Host>> getLocalPrimaryRangeForDC(String keyspace, Metadata metadata, String targetDC)
    {
        Objects.requireNonNull(keyspace, "keyspace");
        Objects.requireNonNull(metadata, "metadata");
        Objects.requireNonNull(targetDC, "targetDC");

        // In 2.1 the logic was to have a set of nodes used as a seed, they were used to query
        // client.describe_local_ring(keyspace) -> List<TokenRange>; this should include all nodes in the local dc.
        // TokenRange contained the endpoints in order, so .endpoints.get(0) is the primary owner
        // Client does not have a similar API, instead it returns Set<Host>.  To replicate this we first need
        // to compute the primary owners, then add in the replicas

        List<Token> tokens = new ArrayList<>();
        Map<Token, Host> tokenToHost = new HashMap<>();
        for (Host host : metadata.getAllHosts())
        {
            if (!targetDC.equals(host.getDatacenter()))
                continue;

            for (Token token : host.getTokens())
            {
                Host previous = tokenToHost.putIfAbsent(token, host);
                if (previous != null)
                    throw new IllegalStateException("Two hosts share the same token; hosts " + host.getHostId() + ":"
                                                    + host.getTokens() + ", " + previous.getHostId() + ":" + previous.getTokens());
                tokens.add(token);
            }
        }
        Collections.sort(tokens);

        Map<TokenRange, List<Host>> rangeToReplicas = new HashMap<>();

        // The first token in the ring uses the last token as its 'start', handle this here to simplify the loop
        Token start = tokens.get(tokens.size() - 1);
        Token end = tokens.get(0);

        addRange(keyspace, metadata, tokenToHost, rangeToReplicas, start, end);
        for (int i = 1; i < tokens.size(); i++)
        {
            start = tokens.get(i - 1);
            end = tokens.get(i);

            addRange(keyspace, metadata, tokenToHost, rangeToReplicas, start, end);
        }

        return rangeToReplicas;
    }

