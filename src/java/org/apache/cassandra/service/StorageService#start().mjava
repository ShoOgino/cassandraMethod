    public void start() throws IOException
    {
        storageMetadata_ = SystemTable.initMetadata();
        isBootstrapMode = DatabaseDescriptor.isAutoBootstrap()
                          && !(DatabaseDescriptor.getSeeds().contains(FBUtilities.getLocalAddress()) || SystemTable.isBootstrapped());

        /* Listen for application messages */
        MessagingService.instance().listen(FBUtilities.getLocalAddress());
        /* Listen for control messages */
        MessagingService.instance().listenUDP(FBUtilities.getLocalAddress());

        SelectorManager.getSelectorManager().start();
        SelectorManager.getUdpSelectorManager().start();

        StorageLoadBalancer.instance().startBroadcasting();

        // have to start the gossip service before we can see any info on other nodes.  this is necessary
        // for bootstrap to get the load info it needs.
        // (we won't be part of the storage ring though until we add a nodeId to our state, below.)
        Gossiper.instance().register(this);
        Gossiper.instance().start(FBUtilities.getLocalAddress(), storageMetadata_.getGeneration());

        if (isBootstrapMode)
        {
            logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
            StorageLoadBalancer.instance().waitForLoadInfo();
            logger_.info("... got load info");
            setToken(BootStrapper.getBootstrapToken(tokenMetadata_, StorageLoadBalancer.instance().getLoadInfo()));
            Gossiper.instance().addApplicationState(StorageService.STATE_BOOTSTRAPPING, new ApplicationState(partitioner_.getTokenFactory().toString(getLocalToken())));
            new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update
        }
        else
        {
            SystemTable.setBootstrapped();
            Token token = storageMetadata_.getToken();
            setToken(token);
            Gossiper.instance().addApplicationState(StorageService.STATE_NORMAL, new ApplicationState(partitioner_.getTokenFactory().toString(token)));
        }

        assert tokenMetadata_.sortedTokens().size() > 0;
    }

