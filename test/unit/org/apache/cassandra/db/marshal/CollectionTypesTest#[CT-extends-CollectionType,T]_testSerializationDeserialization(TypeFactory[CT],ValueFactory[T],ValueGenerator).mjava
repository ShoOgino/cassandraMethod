    static <CT extends CollectionType, T> void testSerializationDeserialization(TypeFactory<CT> typeFactory, ValueFactory<T> valueFactory, ValueGenerator keyType)
    {
        for (ValueGenerator valueType : ValueGenerator.GENERATORS)
        {
            CT type = typeFactory.createType(keyType != null ? keyType.getType() : null, valueType.getType());
            CQL3Type.Collection cql3Type = new CQL3Type.Collection(type);

            for (int i=0; i<500; i++)
            {
                Random random = new Random(i);
                int size = random.nextInt(1000);
                T expected = valueFactory.createValue(keyType, valueType, size, random);

                for (ValueAccessor<Object> srcAccessor : ACCESSORS)
                {
                    ByteBuffer srcBuffer = type.decompose(expected);
                    Object srcBytes = srcAccessor.convert(srcBuffer, ByteBufferAccessor.instance);
                    String srcString = type.getString(srcBytes, srcAccessor);

                    for (ValueAccessor<Object> dstAccessor : ACCESSORS)
                    {
                        Object dstBytes = dstAccessor.convert(srcBytes, srcAccessor);
                        String dstString = type.getString(dstBytes, dstAccessor);
                        T composed = (T) type.compose(dstBytes, dstAccessor);
                        Assert.assertEquals(expected, composed);
                        ValueAccessors.assertDataEquals(srcBytes, srcAccessor, dstBytes, dstAccessor);
                        Assert.assertEquals(srcString, dstString);
                    }
                }
            }
        }
    }

