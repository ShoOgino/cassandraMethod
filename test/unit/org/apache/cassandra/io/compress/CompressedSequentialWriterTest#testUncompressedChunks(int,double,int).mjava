    private void testUncompressedChunks(int size, double ratio, int extra) throws IOException
    {
        // System.out.format("size %d ratio %f extra %d\n", size, ratio, extra);
        ByteBuffer b = ByteBuffer.allocate(size);
        ByteBufferUtil.writeZeroes(b, size);
        b.flip();

        File f = FileUtils.createTempFile("testUncompressedChunks", "1");
        String filename = f.getPath();
        MetadataCollector sstableMetadataCollector = new MetadataCollector(new ClusteringComparator(Collections.singletonList(BytesType.instance)));
        compressionParameters = new CompressionParams(MockCompressor.class.getTypeName(),
                                                      MockCompressor.paramsFor(ratio, extra),
                                                      DEFAULT_CHUNK_LENGTH, ratio);
        try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, f.getPath() + ".metadata",
                                                                                null, SequentialWriterOption.DEFAULT,
                                                                                compressionParameters,
                                                                                sstableMetadataCollector))
        {
            writer.write(b);
            writer.finish();
            b.flip();
        }

        assert f.exists();
        try (FileHandle.Builder builder = new FileHandle.Builder(filename).withCompressionMetadata(new CompressionMetadata(filename + ".metadata", f.length(), true));
             FileHandle fh = builder.complete();
             RandomAccessReader reader = fh.createReader())
        {
            assertEquals(size, reader.length());
            byte[] result = new byte[(int)reader.length()];

            reader.readFully(result);
            assert(reader.isEOF());

            assert Arrays.equals(b.array(), result);
        }
        finally
        {
            if (f.exists())
                f.delete();
            File metadata = new File(f + ".metadata");
            if (metadata.exists())
                metadata.delete();
        }

    }

