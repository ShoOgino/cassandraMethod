    @Test
    @BMRule(name = "Block AbstractCommitLogSegment segment flushing",
            targetClass = "AbstractCommitLogService$1",
            targetMethod = "run",
            targetLocation = "AT INVOKE org.apache.cassandra.db.commitlog.CommitLog.sync",
            action = "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerTest.allowSync.acquire()")
    public void testCompressedCommitLogBackpressure() throws Throwable
    {
        CommitLog.instance.resetUnsafe(true);
        ColumnFamilyStore cfs1 = Keyspace.open(KEYSPACE1).getColumnFamilyStore(STANDARD1);

        final Mutation m = new RowUpdateBuilder(cfs1.metadata, 0, "k")
                     .clustering("bytes")
                     .add("val", ByteBuffer.wrap(entropy))
                     .build();

        Thread dummyThread = new Thread( () ->
        {
            for (int i = 0; i < 20; i++)
                CommitLog.instance.add(m);
        });
        dummyThread.start();

        AbstractCommitLogSegmentManager clsm = CommitLog.instance.segmentManager;

        // Protect against delay, but still break out as fast as possible
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < 5000)
        {
            if (clsm.getActiveSegments().size() >= 3)
                break;
        }
        Thread.sleep(1000);

        // Should only be able to create 3 segments (not 7) because it blocks waiting for truncation that never comes.
        Assert.assertEquals(3, clsm.getActiveSegments().size());

        clsm.getActiveSegments().forEach(segment -> clsm.recycleSegment(segment));

        Util.spinAssertEquals(3, () -> clsm.getActiveSegments().size(), 5);
    }

