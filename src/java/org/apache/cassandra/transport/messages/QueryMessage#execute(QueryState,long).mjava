    public Message.Response execute(QueryState state, long queryStartNanoTime)
    {
        try
        {
            if (options.getPageSize() == 0)
                throw new ProtocolException("The page size cannot be 0");

            UUID tracingId = null;
            if (isTracingRequested())
            {
                tracingId = UUIDGen.getTimeUUID();
                state.prepareTracingSession(tracingId);
            }

            if (state.traceNextQuery())
            {
                state.createTracingSession(getCustomPayload());

                ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
                builder.put("query", query);
                if (options.getPageSize() > 0)
                    builder.put("page_size", Integer.toString(options.getPageSize()));
                if(options.getConsistency() != null)
                    builder.put("consistency_level", options.getConsistency().name());
                if(options.getSerialConsistency() != null)
                    builder.put("serial_consistency_level", options.getSerialConsistency().name());

                Tracing.instance.begin("Execute CQL3 query", state.getClientAddress(), builder.build());
            }

            long fqlTime = isLoggingEnabled ? System.currentTimeMillis() : 0;
            Message.Response response = ClientState.getCQLQueryHandler().process(query, state, options, getCustomPayload(), queryStartNanoTime);

            if (isLoggingEnabled)
            {
                ParsedStatement.Prepared parsedStatement = QueryProcessor.parseStatement(query, state.getClientState());
                AuditLogEntry auditEntry = new AuditLogEntry.Builder(state.getClientState())
                                           .setType(parsedStatement.statement.getAuditLogContext().auditLogEntryType)
                                           .setOperation(query)
                                           .setTimestamp(fqlTime)
                                           .setScope(parsedStatement.statement)
                                           .setKeyspace(state, parsedStatement.statement)
                                           .setOptions(options)
                                           .build();
                AuditLogManager.getInstance().log(auditEntry);

            }

            if (options.skipMetadata() && response instanceof ResultMessage.Rows)
                ((ResultMessage.Rows)response).result.metadata.setSkipMetadata();

            if (tracingId != null)
                response.setTracingId(tracingId);

            return response;
        }
        catch (Exception e)
        {
            if (auditLogEnabled)
            {
                AuditLogEntry auditLogEntry = new AuditLogEntry.Builder(state.getClientState())
                                              .setOperation(query)
                                              .setOptions(options)
                                              .build();
                auditLogManager.log(auditLogEntry, e);
            }
            JVMStabilityInspector.inspectThrowable(e);
            if (!((e instanceof RequestValidationException) || (e instanceof RequestExecutionException)))
                logger.error("Unexpected error during query", e);
            return ErrorMessage.fromException(e);
        }
        finally
        {
            Tracing.instance.stopSession();
        }
    }

