    /**
     * Convert statement into a list of mutations to apply on the server
     *
     * @param variables value for prepared statement markers
     * @param local if true, any requests (for collections) performed by getMutation should be done locally only.
     * @param cl the consistency to use for the potential reads involved in generating the mutations (for lists set/delete operations)
     * @param now the current timestamp in microseconds to use if no timestamp is user provided.
     *
     * @return list of the mutations
     * @throws InvalidRequestException on invalid requests
     */
    private Collection<? extends IMutation> getMutations(List<ByteBuffer> variables, boolean local, ConsistencyLevel cl, long now)
    throws RequestExecutionException, RequestValidationException
    {
        List<ByteBuffer> keys = buildPartitionKeyNames(variables);
        ColumnNameBuilder clusteringPrefix = createClusteringPrefixBuilder(variables);

        UpdateParameters params = makeUpdateParameters(keys, clusteringPrefix, variables, local, cl, now);

        Collection<IMutation> mutations = new ArrayList<IMutation>();
        for (ByteBuffer key: keys)
        {
            ColumnFamily cf = UnsortedColumns.factory.create(cfm);
            addUpdateForKey(cf, key, clusteringPrefix, params);
            RowMutation rm = new RowMutation(cfm.ksName, key, cf);
            mutations.add(isCounter() ? new CounterMutation(rm, cl) : rm);
        }
        return mutations;
    }

