    /**
     * Signal an error to this stream session: if it's an EOF exception, it tries to understand if the socket was closed
     * after completion or because the peer was down, otherwise sends a {@link SessionFailedMessage} and closes
     * the session as {@link State#FAILED}.
     */
    public synchronized Future onError(Throwable e)
    {
        boolean isEofException = e instanceof EOFException;
        if (isEofException)
        {
            if (state.finalState)
            {
                logger.debug("[Stream #{}] Socket closed after session completed with state {}", planId(), state);

                return null;
            }
            else
            {
                logger.error("[Stream #{}] Socket closed before session completion, peer {} is probably down.",
                             planId(),
                             peer.address.getHostAddress(),
                             e);

                return closeSession(State.FAILED);
            }
        }

        logError(e);
        // send session failure message
        if (messageSender.connected())
            messageSender.sendMessage(new SessionFailedMessage());
        // fail session
        return closeSession(State.FAILED);
    }

