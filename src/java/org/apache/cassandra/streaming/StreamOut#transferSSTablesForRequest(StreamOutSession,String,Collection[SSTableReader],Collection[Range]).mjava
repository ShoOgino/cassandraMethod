    /**
     * Transfers the first file for matching portions of a group of sstables and appends a list of other files
     * to the header for the requesting destination to take control of the rest of the transfers
     */
    private static void transferSSTablesForRequest(StreamOutSession session, String table, Collection<SSTableReader> sstables, Collection<Range> ranges) throws IOException
    {
        List<PendingFile> pending = createPendingFiles(sstables, ranges);
        if (pending.size() > 0)
        {
            StreamHeader header = new StreamHeader(session.getSessionId(), pending.get(0), pending, false);
            // In case this happens to be a re-request due to some error condition on the destination side
            if (session.getFiles().isEmpty())
                session.addFilesToStream(pending);

            logger.info("Streaming file {} to {}", header.getStreamFile(), session.getHost());
            MessagingService.instance.stream(header, session.getHost());
            session.removePending(header.getStreamFile());
        }
        else
        {
            FileStatus status = new FileStatus("", session.getSessionId());
            status.setAction(FileStatus.Action.EMPTY);
            Message message = status.makeStreamStatusMessage();
            message.setHeader(StreamOut.TABLE_NAME, table.getBytes());
            MessagingService.instance.sendOneWay(message, session.getHost());
        }
    }

