    private static Collection<Function> collectCandidates(String keyspace,
                                                          FunctionName name,
                                                          String receiverKs,
                                                          String receiverCf,
                                                          AbstractType<?> receiverType)
    {
        Collection<Function> candidates = new ArrayList<>();

        if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))
            candidates.add(new TokenFct(Schema.instance.getTableMetadata(receiverKs, receiverCf)));

        // The toJson() function can accept any type of argument, so instances of it are not pre-declared.  Instead,
        // we create new instances as needed while handling selectors (which is the only place that toJson() is supported,
        // due to needing to know the argument types in advance).
        if (name.equalsNativeFunction(ToJsonFct.NAME))
            throw new InvalidRequestException("toJson() may only be used within the selection clause of SELECT statements");

        // Similarly, we can only use fromJson when we know the receiver type (such as inserts)
        if (name.equalsNativeFunction(FromJsonFct.NAME))
        {
            if (receiverType == null)
                throw new InvalidRequestException("fromJson() cannot be used in the selection clause of a SELECT statement");
            candidates.add(FromJsonFct.getInstance(receiverType));
        }

        if (!name.hasKeyspace())
        {
            // function name not fully qualified
            // add 'SYSTEM' (native) candidates
            candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));
            // add 'current keyspace' candidates
            candidates.addAll(Schema.instance.getFunctions(new FunctionName(keyspace, name.name)));
        }
        else
        {
            // function name is fully qualified (keyspace + name)
            candidates.addAll(Schema.instance.getFunctions(name));
        }

        return candidates;
    }

