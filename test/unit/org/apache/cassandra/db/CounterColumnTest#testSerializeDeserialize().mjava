    @Test
    public void testSerializeDeserialize() throws IOException
    {
        Allocator allocator = HeapAllocator.instance;
        CounterContext.ContextState state = CounterContext.ContextState.allocate(4, 2, allocator);
        state.writeElement(NodeId.fromInt(1), 4L, 4L);
        state.writeElement(NodeId.fromInt(2), 4L, 4L, true);
        state.writeElement(NodeId.fromInt(3), 4L, 4L);
        state.writeElement(NodeId.fromInt(4), 4L, 4L, true);

        CounterColumn original = new CounterColumn(ByteBufferUtil.bytes("x"), state.context, 1L);
        DataOutputBuffer bufOut = new DataOutputBuffer();
        Column.serializer().serialize(original, bufOut);
        byte[] serialized = bufOut.getData();

        ByteArrayInputStream bufIn = new ByteArrayInputStream(serialized, 0, serialized.length);
        CounterColumn deserialized = (CounterColumn)Column.serializer().deserialize(new DataInputStream(bufIn));
        assert original.equals(deserialized);

        bufIn = new ByteArrayInputStream(serialized, 0, serialized.length);
        CounterColumn deserializedOnRemote = (CounterColumn)Column.serializer().deserialize(new DataInputStream(bufIn), IColumnSerializer.Flag.FROM_REMOTE);
        assert deserializedOnRemote.name().equals(original.name());
        assert deserializedOnRemote.total() == original.total();
        assert deserializedOnRemote.value().equals(cc.clearAllDelta(original.value()));
        assert deserializedOnRemote.timestamp() == deserialized.timestamp();
        assert deserializedOnRemote.timestampOfLastDelete() == deserialized.timestampOfLastDelete();
    }

