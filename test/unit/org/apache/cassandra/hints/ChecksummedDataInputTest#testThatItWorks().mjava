    @Test
    public void testThatItWorks() throws IOException
    {
        // fill a bytebuffer with some input
        DataOutputBuffer out = new DataOutputBuffer();
        out.write(127);
        out.write(new byte[]{ 0, 1, 2, 3, 4, 5, 6 });
        out.writeBoolean(false);
        out.writeByte(10);
        out.writeChar('t');
        out.writeDouble(3.3);
        out.writeFloat(2.2f);
        out.writeInt(42);
        out.writeLong(Long.MAX_VALUE);
        out.writeShort(Short.MIN_VALUE);
        out.writeUTF("utf");
        ByteBuffer buffer = out.buffer();

        // calculate resulting CRC
        CRC32 crc = new CRC32();
        FBUtilities.updateChecksum(crc, buffer);
        int expectedCRC = (int) crc.getValue();

        ChecksummedDataInput crcInput = ChecksummedDataInput.wrap(new DummyByteBufferDataInput(buffer.duplicate()));
        crcInput.limit(buffer.remaining());

        // assert that we read all the right values back
        assertEquals(127, crcInput.read());
        byte[] bytes = new byte[7];
        crcInput.readFully(bytes);
        assertTrue(Arrays.equals(new byte[]{ 0, 1, 2, 3, 4, 5, 6 }, bytes));
        assertEquals(false, crcInput.readBoolean());
        assertEquals(10, crcInput.readByte());
        assertEquals('t', crcInput.readChar());
        assertEquals(3.3, crcInput.readDouble());
        assertEquals(2.2f, crcInput.readFloat());
        assertEquals(42, crcInput.readInt());
        assertEquals(Long.MAX_VALUE, crcInput.readLong());
        assertEquals(Short.MIN_VALUE, crcInput.readShort());
        assertEquals("utf", crcInput.readUTF());

        // assert that the crc matches, and that we've read exactly as many bytes as expected
        assertEquals(0, crcInput.bytesRemaining());
        assertEquals(expectedCRC, crcInput.getCrc());
    }

