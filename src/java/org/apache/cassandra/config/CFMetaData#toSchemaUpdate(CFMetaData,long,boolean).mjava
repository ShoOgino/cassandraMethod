    /**
     * Create schema mutations to update this metadata to provided new state.
     *
     * @param newState The new metadata (for the same CF)
     * @param modificationTimestamp Timestamp to use for mutation
     * @param fromThrift whether the newState comes from thrift
     *
     * @return Difference between attributes in form of schema mutation
     */
    public RowMutation toSchemaUpdate(CFMetaData newState, long modificationTimestamp, boolean fromThrift)
    {
        RowMutation rm = new RowMutation(Keyspace.SYSTEM_KS, SystemKeyspace.getSchemaKSKey(ksName));

        newState.toSchemaNoColumnsNoTriggers(rm, modificationTimestamp);

        MapDifference<ByteBuffer, ColumnDefinition> columnDiff = Maps.difference(columnMetadata, newState.columnMetadata);

        // columns that are no longer needed
        for (ColumnDefinition cd : columnDiff.entriesOnlyOnLeft().values())
        {
            // Thrift only knows about the REGULAR ColumnDefinition type, so don't consider other type
            // are being deleted just because they are not here.
            if (fromThrift && cd.kind != ColumnDefinition.Kind.REGULAR)
                continue;

            cd.deleteFromSchema(rm, modificationTimestamp);
        }

        // newly added columns
        for (ColumnDefinition cd : columnDiff.entriesOnlyOnRight().values())
            cd.toSchema(rm, modificationTimestamp);

        // old columns with updated attributes
        for (ByteBuffer name : columnDiff.entriesDiffering().keySet())
        {
            ColumnDefinition cd = newState.columnMetadata.get(name);
            cd.toSchema(rm, modificationTimestamp);
        }

        MapDifference<String, TriggerDefinition> triggerDiff = Maps.difference(triggers, newState.triggers);

        // dropped triggers
        for (TriggerDefinition td : triggerDiff.entriesOnlyOnLeft().values())
            td.deleteFromSchema(rm, cfName, modificationTimestamp);

        // newly created triggers
        for (TriggerDefinition td : triggerDiff.entriesOnlyOnRight().values())
            td.toSchema(rm, cfName, modificationTimestamp);

        return rm;
    }

