    private void setup() throws IOException, TTransportException
    {
        int listenPort = DatabaseDescriptor.getThriftPort();
        
        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler()
        {
            public void uncaughtException(Thread t, Throwable e)
            {
                logger.error("Fatal exception in thread " + t, e);
                if (e instanceof OutOfMemoryError)
                {
                    System.exit(100);
                }
            }
        });

        // initialize stuff
        CalloutManager.instance().onStart();

        Set<String> tables = DatabaseDescriptor.getTableToColumnFamilyMap().keySet();
        for (String table : tables)
        {
            Table tbl = Table.open(table);
            tbl.onStart();
        }

        // replay the log if necessary
        RecoveryManager recoveryMgr = RecoveryManager.instance();
        recoveryMgr.doRecovery();

        // now we start listening for clients
        CassandraServer peerStorageServer = new CassandraServer();
        peerStorageServer.start();
        Cassandra.Processor processor = new Cassandra.Processor(peerStorageServer);

        // Transport
        TServerSocket tServerSocket = new TServerSocket(new InetSocketAddress(FBUtilities.getHostAddress(), listenPort));

        // Protocol factory
        TProtocolFactory tProtocolFactory = new TBinaryProtocol.Factory();

        // ThreadPool Server
        TThreadPoolServer.Options options = new TThreadPoolServer.Options();
        options.minWorkerThreads = 64;
        serverEngine = new TThreadPoolServer(new TProcessorFactory(processor),
                                             tServerSocket,
                                             new TTransportFactory(),
                                             new TTransportFactory(),
                                             tProtocolFactory,
                                             tProtocolFactory,
                                             options);
    }

