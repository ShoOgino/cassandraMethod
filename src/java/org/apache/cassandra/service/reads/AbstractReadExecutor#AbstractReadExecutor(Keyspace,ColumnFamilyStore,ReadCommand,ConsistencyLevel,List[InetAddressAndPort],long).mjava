    AbstractReadExecutor(Keyspace keyspace, ColumnFamilyStore cfs, ReadCommand command, ConsistencyLevel consistency, List<InetAddressAndPort> targetReplicas, long queryStartNanoTime)
    {
        this.command = command;
        this.consistency = consistency;
        this.targetReplicas = targetReplicas;
        this.readRepair = ReadRepair.create(command, targetReplicas, queryStartNanoTime, consistency);
        this.digestResolver = new DigestResolver(keyspace, command, consistency, readRepair, targetReplicas.size());
        this.handler = new ReadCallback(digestResolver, consistency, command, targetReplicas, queryStartNanoTime);
        this.cfs = cfs;
        this.traceState = Tracing.instance.get();
        this.queryStartNanoTime = queryStartNanoTime;

        // Set the digest version (if we request some digests). This is the smallest version amongst all our target replicas since new nodes
        // knows how to produce older digest but the reverse is not true.
        // TODO: we need this when talking with pre-3.0 nodes. So if we preserve the digest format moving forward, we can get rid of this once
        // we stop being compatible with pre-3.0 nodes.
        int digestVersion = MessagingService.current_version;
        for (InetAddressAndPort replica : targetReplicas)
            digestVersion = Math.min(digestVersion, MessagingService.instance().getVersion(replica));
        command.setDigestVersion(digestVersion);
    }

