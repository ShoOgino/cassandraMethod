    public CommitLogSegmentManager()
    {
        // The run loop for the manager thread
        Runnable runnable = new WrappedRunnable()
        {
            public void runMayThrow() throws Exception
            {
                while (run)
                {
                    Callable<CommitLogSegment> task = segmentManagementTasks.poll();
                    if (task == null)
                    {
                        // if we have no more work to do, check if we should create a new segment
                        if (availableSegments.isEmpty() && (activeSegments.isEmpty() || createReserveSegments))
                        {
                            logger.debug("No segments in reserve; creating a fresh one");
                            size.addAndGet(DatabaseDescriptor.getCommitLogSegmentSize());
                            // TODO : some error handling in case we fail to create a new segment
                            availableSegments.add(CommitLogSegment.freshSegment());
                            hasAvailableSegments.signalAll();
                        }

                        // flush old Cfs if we're full
                        long unused = unusedCapacity();
                        if (unused < 0)
                        {
                            List<CommitLogSegment> segmentsToRecycle = new ArrayList<>();
                            long spaceToReclaim = 0;
                            for (CommitLogSegment segment : activeSegments)
                            {
                                if (segment == allocatingFrom)
                                    break;
                                segmentsToRecycle.add(segment);
                                spaceToReclaim += DatabaseDescriptor.getCommitLogSegmentSize();
                                if (spaceToReclaim + unused >= 0)
                                    break;
                            }
                            flushDataFrom(segmentsToRecycle);
                        }

                        try
                        {
                            // wait for new work to be provided
                            task = segmentManagementTasks.take();
                        }
                        catch (InterruptedException e)
                        {
                            // shutdown signal; exit cleanly
                            continue;
                        }
                    }

                    // TODO : some error handling in case we fail on executing call (e.g. recycling)
                    CommitLogSegment recycled = task.call();
                    if (recycled != null)
                    {
                        // if the work resulted in a segment to recycle, publish it
                        availableSegments.add(recycled);
                        hasAvailableSegments.signalAll();
                    }
                }
            }
        };

        managerThread = new Thread(runnable, "COMMIT-LOG-ALLOCATOR");
        managerThread.start();
    }

