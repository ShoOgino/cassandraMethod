    public UserType(String keyspace, ByteBuffer name, List<ByteBuffer> fieldNames, List<AbstractType<?>> fieldTypes)
    {
        super(fieldTypes);
        assert fieldNames.size() == fieldTypes.size();
        this.keyspace = keyspace;
        this.name = name;
        this.fieldNames = fieldNames;
        this.stringFieldNames = new ArrayList<>(fieldNames.size());
        LinkedHashMap<String , TypeSerializer<?>> fieldSerializers = new LinkedHashMap<>(fieldTypes.size());
        for (int i = 0, m = fieldNames.size(); i < m; i++)
        {
            ByteBuffer fieldName = fieldNames.get(i);
            try
            {
                String stringFieldName = ByteBufferUtil.string(fieldName, StandardCharsets.UTF_8);
                stringFieldNames.add(stringFieldName);
                fieldSerializers.put(stringFieldName, fieldTypes.get(i).getSerializer());
            }
            catch (CharacterCodingException ex)
            {
                throw new AssertionError("Got non-UTF8 field name for user-defined type: " + ByteBufferUtil.bytesToHex(fieldName), ex);
            }
        }
        this.serializer = new UserTypeSerializer(fieldSerializers);
    }

