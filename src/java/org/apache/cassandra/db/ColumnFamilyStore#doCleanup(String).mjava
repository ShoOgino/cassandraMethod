    /**
     * cleans up one particular file by removing keys that this node is not responsible for.
     *
     * @param file
     * @throws IOException
     */
    /* TODO: Take care of the comments later. */
    void doCleanup(String file) throws IOException
    {
        if (file == null)
        {
            return;
        }
        List<Range> myRanges;
        List<String> files = new ArrayList<String>();
        files.add(file);
        List<String> newFiles = new ArrayList<String>();
        Map<EndPoint, List<Range>> endPointtoRangeMap = StorageService.instance().constructEndPointToRangesMap();
        myRanges = endPointtoRangeMap.get(StorageService.getLocalStorageEndPoint());
        doFileAntiCompaction(files, myRanges, null, newFiles);
        if (logger_.isDebugEnabled())
          logger_.debug("Original file : " + file + " of size " + new File(file).length());
        lock_.writeLock().lock();
        try
        {
            ssTables_.remove(file);
            for (String newfile : newFiles)
            {
                if (logger_.isDebugEnabled())
                  logger_.debug("New file : " + newfile + " of size " + new File(newfile).length());
                assert newfile != null;
                ssTables_.put(newfile, SSTableReader.open(newfile));
            }
            SSTableReader.get(file).delete();
        }
        finally
        {
            lock_.writeLock().unlock();
        }
    }

