    @Test
    public void testGetEndpointsDuringBootstrap() throws UnknownHostException
    {
        // the token difference will be RING_SIZE * 2.
        final int RING_SIZE = 10;
        TokenMetadata tmd = new TokenMetadata();
        TokenMetadata oldTmd = StorageServiceAccessor.setTokenMetadata(tmd);
        AbstractReplicationStrategy strategy = new RackUnawareStrategy(tmd, null);

        Token[] endPointTokens = new Token[RING_SIZE];
        Token[] keyTokens = new Token[RING_SIZE];
        
        for (int i = 0; i < RING_SIZE; i++)
        {
            endPointTokens[i] = new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i));
            keyTokens[i] = new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i + RING_SIZE));
        }
        
        List<InetAddress> hosts = new ArrayList<InetAddress>();
        for (int i = 0; i < endPointTokens.length; i++)
        {
            InetAddress ep = InetAddress.getByName("127.0.0." + String.valueOf(i + 1));
            tmd.updateNormalToken(endPointTokens[i], ep);
            hosts.add(ep);
        }

        // bootstrap at the end of the ring
        Token bsToken = new BigIntegerToken(String.valueOf(210));
        InetAddress bootstrapEndPoint = InetAddress.getByName("127.0.0.11");
        tmd.addBootstrapToken(bsToken, bootstrapEndPoint);

        for (String table : DatabaseDescriptor.getNonSystemTables())
        {
            StorageService.calculatePendingRanges(strategy, table);
            int replicationFactor = DatabaseDescriptor.getReplicationFactor(table);

            for (int i = 0; i < keyTokens.length; i++)
            {
                Collection<InetAddress> endPoints = strategy.getWriteEndpoints(keyTokens[i], table, strategy.getNaturalEndpoints(keyTokens[i], table));
                assertTrue(endPoints.size() >= replicationFactor);

                for (int j = 0; j < replicationFactor; j++)
                {
                    //Check that the old nodes are definitely included
                    assertTrue(endPoints.contains(hosts.get((i + j + 1) % hosts.size())));
                }

                // bootstrapEndPoint should be in the endPoints for i in MAX-RF to MAX, but not in any earlier ep.
                if (i < RING_SIZE - replicationFactor)
                    assertFalse(endPoints.contains(bootstrapEndPoint));
                else
                    assertTrue(endPoints.contains(bootstrapEndPoint));
            }
        }

        StorageServiceAccessor.setTokenMetadata(oldTmd);
    }

