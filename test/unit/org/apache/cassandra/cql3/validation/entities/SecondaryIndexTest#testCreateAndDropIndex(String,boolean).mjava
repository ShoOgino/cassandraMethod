    /**
     * Test creating and dropping an index with the specified name.
     *
     * @param indexName         the index name
     * @param addKeyspaceOnDrop add the keyspace name in the drop statement
     * @throws Throwable if an error occurs
     */
    private void testCreateAndDropIndex(String indexName, boolean addKeyspaceOnDrop) throws Throwable
    {
        assertInvalidMessage(format("Index '%s.%s' doesn't exist",
                                    KEYSPACE,
                                    removeQuotes(indexName.toLowerCase(Locale.US))),
                             format("DROP INDEX %s.%s", KEYSPACE, indexName));

        createTable("CREATE TABLE %s (a int primary key, b int);");
        createIndex("CREATE INDEX " + indexName + " ON %s(b);");
        createIndex("CREATE INDEX IF NOT EXISTS " + indexName + " ON %s(b);");

        assertInvalidMessage(format("Index '%s' already exists",
                                    removeQuotes(indexName.toLowerCase(Locale.US))),
                             "CREATE INDEX " + indexName + " ON %s(b)");

        // IF NOT EXISTS should apply in cases where the new index differs from an existing one in name only
        String otherIndexName = "index_" + System.nanoTime();
        assertEquals(1, getCurrentColumnFamilyStore().metadata().indexes.size());
        createIndex("CREATE INDEX IF NOT EXISTS " + otherIndexName + " ON %s(b)");
        assertEquals(1, getCurrentColumnFamilyStore().metadata().indexes.size());
        assertInvalidMessage(format("Index %s is a duplicate of existing index %s",
                                    removeQuotes(otherIndexName.toLowerCase(Locale.US)),
                                    removeQuotes(indexName.toLowerCase(Locale.US))),
                             "CREATE INDEX " + otherIndexName + " ON %s(b)");

        execute("INSERT INTO %s (a, b) values (?, ?);", 0, 0);
        execute("INSERT INTO %s (a, b) values (?, ?);", 1, 1);
        execute("INSERT INTO %s (a, b) values (?, ?);", 2, 2);
        execute("INSERT INTO %s (a, b) values (?, ?);", 3, 1);

        assertRows(execute("SELECT * FROM %s where b = ?", 1), row(1, 1), row(3, 1));

        if (addKeyspaceOnDrop)
        {
            dropIndex(format("DROP INDEX %s.%s", KEYSPACE, indexName));
        }
        else
        {
            execute("USE " + KEYSPACE);
            execute(format("DROP INDEX %s", indexName));
        }

        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
                             "SELECT * FROM %s where b = ?", 1);
        dropIndex(format("DROP INDEX IF EXISTS %s.%s", KEYSPACE, indexName));
        assertInvalidMessage(format("Index '%s.%s' doesn't exist",
                                    KEYSPACE,
                                    removeQuotes(indexName.toLowerCase(Locale.US))),
                             format("DROP INDEX %s.%s", KEYSPACE, indexName));
    }

