    SchemaEvent(SchemaEventType type, Schema schema, @Nullable KeyspaceMetadata ksUpdate,
                @Nullable KeyspaceMetadata previous, @Nullable KeyspaceMetadata.KeyspaceDiff ksDiff,
                @Nullable TableMetadata tableUpdate, @Nullable Tables.TablesDiff tablesDiff,
                @Nullable Views.ViewsDiff viewsDiff, @Nullable MapDifference<String,TableMetadata> indexesDiff)
    {
        this.type = type;
        this.ksUpdate = ksUpdate;
        this.previous = previous;
        this.ksDiff = ksDiff;
        this.tableUpdate = tableUpdate;
        this.tablesDiff = tablesDiff;
        this.viewsDiff = viewsDiff;
        this.indexesDiff = indexesDiff;

        this.keyspaces = new HashSet<>(schema.getKeyspaces());
        this.nonSystemKeyspaces = new ArrayList<>(schema.getNonSystemKeyspaces());
        this.userKeyspaces = new ArrayList<>(schema.getUserKeyspaces());
        this.numberOfTables = schema.getNumberOfTables();
        this.version = schema.getVersion();

        Map<Pair<String, String>, TableMetadataRef> indexTableMetadataRefs = schema.getIndexTableMetadataRefs();
        Map<String, String> indexTables = indexTableMetadataRefs.entrySet().stream()
                                                                .collect(Collectors.toMap(e -> e.getKey().left + ',' +
                                                                                               e.getKey().right,
                                                                                          e -> e.getValue().id.toHexString() + ',' +
                                                                                               e.getValue().keyspace + ',' +
                                                                                               e.getValue().name));
        this.indexTables = new HashMap<>(indexTables);
        Map<TableId, TableMetadataRef> tableMetadataRefs = schema.getTableMetadataRefs();
        Map<String, String> tables = tableMetadataRefs.entrySet().stream()
                                                      .collect(Collectors.toMap(e -> e.getKey().toHexString(),
                                                                                e -> e.getValue().id.toHexString() + ',' +
                                                                                     e.getValue().keyspace + ',' +
                                                                                     e.getValue().name));
        this.tables = new HashMap<>(tables);
    }

