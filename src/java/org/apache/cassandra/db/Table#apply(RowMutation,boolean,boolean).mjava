    /**
     * This method appends a row to the global CommitLog, then updates memtables and indexes.
     *
     * @param mutation       the row to write.  Must not be modified after calling apply, since commitlog append
     *                       may happen concurrently, depending on the CL Executor type.
     * @param writeCommitLog false to disable commitlog append entirely
     * @param updateIndexes  false to disable index updates (used by CollationController "defragmenting")
     */
    public void apply(RowMutation mutation, boolean writeCommitLog, boolean updateIndexes)
    {
        if (!mutation.getTable().equals(Tracing.TRACE_KS))
            logger.debug("applying mutation");

        // write the mutation to the commitlog and memtables
        switchLock.readLock().lock();
        try
        {
            if (writeCommitLog)
                CommitLog.instance.add(mutation);

            DecoratedKey key = StorageService.getPartitioner().decorateKey(mutation.key());
            for (ColumnFamily cf : mutation.getColumnFamilies())
            {
                ColumnFamilyStore cfs = columnFamilyStores.get(cf.id());
                if (cfs == null)
                {
                    logger.error("Attempting to mutate non-existant column family " + cf.id());
                    continue;
                }

                ColumnSlice[] deletionSlices = null;
                SortedSet<ByteBuffer> mutatedIndexedColumns = null;
                if (updateIndexes)
                {
                    // If cf has some range deletion, we need to fetch those ranges to know if something indexed was updated
                    // Note: we could "optimize" that for Keys index, because we know that the columnDef name is directly
                    // the indexed column name.
                    deletionSlices = cf.deletionInfo().coveredSlices();

                    for (IColumn updated : cf)
                    {
                        if (cfs.indexManager.indexes(updated))
                        {
                            if (mutatedIndexedColumns == null)
                                mutatedIndexedColumns = new TreeSet<ByteBuffer>(cf.getComparator());
                            mutatedIndexedColumns.add(updated.name());
                            if (logger.isDebugEnabled())
                            {
                                logger.debug(String.format("Mutated indexed column %s value %s",
                                                           cf.getComparator().getString(updated.name()),
                                                           ByteBufferUtil.bytesToHex(updated.value())));
                            }
                        }
                    }
                }

                // Sharding the lock is insufficient to avoid contention when there is a "hot" row, e.g., for
                // hint writes when a node is down (keyed by target IP).  So it is worth special-casing the
                // no-index case to avoid the synchronization.
                if (mutatedIndexedColumns == null && deletionSlices == null)
                {
                    cfs.apply(key, cf);
                    continue;
                }
                // else mutatedIndexedColumns != null
                synchronized (indexLockFor(mutation.key()))
                {
                    if (mutatedIndexedColumns == null)
                        mutatedIndexedColumns = new TreeSet<ByteBuffer>(cf.getComparator());

                    // with the raw data CF, we can just apply every update in any order and let
                    // read-time resolution throw out obsolete versions, thus avoiding read-before-write.
                    // but for indexed data we need to make sure that we're not creating index entries
                    // for obsolete writes.
                    ColumnFamily oldIndexedColumns = readCurrentIndexedColumns(key, cfs, mutatedIndexedColumns, deletionSlices);

                    // We might still have no mutated columns in case it is a deletion but the row had
                    // no indexed columns
                    if (mutatedIndexedColumns.isEmpty())
                    {
                        cfs.apply(key, cf);
                        continue;
                    }

                    logger.debug("Pre-mutation index row is {}", oldIndexedColumns);
                    ignoreObsoleteMutations(cf, mutatedIndexedColumns, oldIndexedColumns);

                    cfs.apply(key, cf);

                    // ignore full index memtables -- we flush those when the "master" one is full
                    cfs.indexManager.applyIndexUpdates(mutation.key(), cf, mutatedIndexedColumns, oldIndexedColumns);
                }
            }
        }
        finally
        {
            switchLock.readLock().unlock();
        }
    }

