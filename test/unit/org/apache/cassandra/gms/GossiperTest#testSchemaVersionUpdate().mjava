    @Test
    public void testSchemaVersionUpdate() throws UnknownHostException, InterruptedException
    {
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 2);
        MessagingService.instance().listen();
        Gossiper.instance.start(1);
        InetAddress remoteHostAddress = hosts.get(1);

        EndpointState initialRemoteState = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress);
        // Set to any 3.0 version
        Gossiper.instance.injectApplicationState(remoteHostAddress, ApplicationState.RELEASE_VERSION, StorageService.instance.valueFactory.releaseVersion("3.0.14"));

        Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, initialRemoteState));

        // wait until the schema is set
        VersionedValue schema = null;
        for (int i = 0; i < 10; i++)
        {
            EndpointState localState = Gossiper.instance.getEndpointStateForEndpoint(hosts.get(0));
            schema = localState.getApplicationState(ApplicationState.SCHEMA);
            if (schema != null)
                break;
            Thread.sleep(1000);
        }

        // schema is set and equals to "alternative" version
        assertTrue(schema != null);
        assertEquals(schema.value, Schema.instance.getAltVersion().toString());

        // Upgrade remote host version to the latest one (3.11)
        Gossiper.instance.injectApplicationState(remoteHostAddress, ApplicationState.RELEASE_VERSION, StorageService.instance.valueFactory.releaseVersion());

        Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, initialRemoteState));

        // wait until the schema change
        VersionedValue newSchema = null;
        for (int i = 0; i < 10; i++)
        {
            EndpointState localState = Gossiper.instance.getEndpointStateForEndpoint(hosts.get(0));
            newSchema = localState.getApplicationState(ApplicationState.SCHEMA);
            if (!schema.value.equals(newSchema.value))
                break;
            Thread.sleep(1000);
        }

        // schema is changed and equals to real version
        assertFalse(schema.value.equals(newSchema.value));
        assertEquals(newSchema.value, Schema.instance.getRealVersion().toString());
    }

