    @Test
    public void testSupportExitOnOutOfMemory()
    {
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.7.0-ea")); // Early Access
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.7.0"));    // Major (GA)
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.7.0_20")); // Minor #1 (GA)
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.7.0_5"));  // Security #1 (GA)

        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.7.0_95"));
        assertTrue(JavaUtils.supportExitOnOutOfMemory("1.7.0_101"));

        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.8.0-ea")); // Early Access
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.8.0"));    // Major (GA)
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.8.0_20")); // Minor #1 (GA)
        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.8.0_5"));  // Security #1 (GA)

        assertFalse(JavaUtils.supportExitOnOutOfMemory("1.8.0_91"));
        assertTrue(JavaUtils.supportExitOnOutOfMemory("1.8.0_92"));
        assertTrue(JavaUtils.supportExitOnOutOfMemory("1.8.0_101"));

        // Test based on http://openjdk.java.net/jeps/223
        assertTrue(JavaUtils.supportExitOnOutOfMemory("9-ea"));  // Early Access
        assertTrue(JavaUtils.supportExitOnOutOfMemory("9"));     // Major (GA)
        assertTrue(JavaUtils.supportExitOnOutOfMemory("9.1.2")); // Minor #1 (GA)
        assertTrue(JavaUtils.supportExitOnOutOfMemory("9.0.1")); // Security #1 (GA)
    }

