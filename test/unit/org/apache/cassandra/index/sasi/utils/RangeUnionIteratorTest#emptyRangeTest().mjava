    @Test
    public void emptyRangeTest() {
        RangeIterator.Builder<Long, Token> builder;
        RangeIterator<Long, Token> range;
        // empty, then non-empty
        builder = RangeUnionIterator.builder();
        builder.add(new LongIterator(new long[] {}));
        for (int i = 0; i < 10; i++)
            builder.add(new LongIterator(new long[] {i + 10}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(19), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(10, range.getCount());

        builder = RangeUnionIterator.builder();
        builder.add(new LongIterator(new long[] {}));
        builder.add(new LongIterator(new long[] {10}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(10), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(1, range.getCount());

        // non-empty, then empty
        builder = RangeUnionIterator.builder();
        for (int i = 0; i < 10; i++)
            builder.add(new LongIterator(new long[] {i + 10}));
        builder.add(new LongIterator(new long[] {}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(19), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(10, range.getCount());

        builder = RangeUnionIterator.builder();
        builder.add(new LongIterator(new long[] {10}));
        builder.add(new LongIterator(new long[] {}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(10), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(1, range.getCount());

        // empty, then non-empty then empty again
        builder = RangeUnionIterator.builder();
        builder.add(new LongIterator(new long[] {}));
        for (int i = 0; i < 10; i++)
            builder.add(new LongIterator(new long[] {i + 10}));
        builder.add(new LongIterator(new long[] {}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(19), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(10, range.getCount());

        // non-empty, empty, then non-empty again
        builder = RangeUnionIterator.builder();
        for (int i = 0; i < 5; i++)
            builder.add(new LongIterator(new long[] {i + 10}));
        builder.add(new LongIterator(new long[] {}));
        for (int i = 5; i < 10; i++)
            builder.add(new LongIterator(new long[] {i + 10}));
        range = builder.build();
        Assert.assertEquals(Long.valueOf(10), range.getMinimum());
        Assert.assertEquals(Long.valueOf(19), range.getMaximum());
        Assert.assertTrue(range.hasNext());
        Assert.assertEquals(10, range.getCount());
    }

