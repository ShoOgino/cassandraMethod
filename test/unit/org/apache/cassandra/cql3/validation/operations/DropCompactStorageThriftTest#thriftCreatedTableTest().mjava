    @Test
    public void thriftCreatedTableTest() throws Throwable
    {
        final String KEYSPACE = "thrift_created_table_test_ks";
        final String TABLE = "test_table_1";

        CfDef cfDef = new CfDef().setDefault_validation_class(Int32Type.instance.toString())
                                 .setKey_validation_class(AsciiType.instance.toString())
                                 .setComparator_type(AsciiType.instance.toString())
                                 .setColumn_metadata(Arrays.asList(new ColumnDef(ByteBufferUtil.bytes("col1"),
                                                                                 AsciiType.instance.toString())
                                                                   .setIndex_name("col1Index")
                                                                   .setIndex_type(IndexType.KEYS),
                                                                   new ColumnDef(ByteBufferUtil.bytes("col2"),
                                                                                 AsciiType.instance.toString())
                                                                   .setIndex_name("col2Index")
                                                                   .setIndex_type(IndexType.KEYS)))
                                 .setKeyspace(KEYSPACE)
                                 .setName(TABLE);

        KsDef ksDef = new KsDef(KEYSPACE,
                                SimpleStrategy.class.getName(),
                                Arrays.asList(cfDef));
        ksDef.setStrategy_options(Collections.singletonMap("replication_factor", "1"));

        Cassandra.Client client = getClient();
        client.system_add_keyspace(ksDef);
        client.set_keyspace(KEYSPACE);

        client.insert(UTF8Type.instance.decompose("key1"),
                      new ColumnParent(TABLE),
                      getColumnForInsert(ByteBufferUtil.bytes("col1"), ByteBufferUtil.bytes("val1")),
                      ONE);

        client.insert(UTF8Type.instance.decompose("key1"),
                      new ColumnParent(TABLE),
                      getColumnForInsert(ByteBufferUtil.bytes("col2"), ByteBufferUtil.bytes("val2")),
                      ONE);

        client.insert(UTF8Type.instance.decompose("key1"),
                      new ColumnParent(TABLE),
                      getColumnForInsert(ByteBufferUtil.bytes("dynamicKey1"), ByteBufferUtil.bytes(100)),
                      ONE);

        client.insert(UTF8Type.instance.decompose("key1"),
                      new ColumnParent(TABLE),
                      getColumnForInsert(ByteBufferUtil.bytes("dynamicKey2"), ByteBufferUtil.bytes(200)),
                      ONE);


        execute(String.format("ALTER TABLE %s.%s DROP COMPACT STORAGE;", KEYSPACE, TABLE));
        UntypedResultSet resultSet = execute(String.format("select * from %s.%s",
                                                           KEYSPACE, TABLE));
        assertColumnType(AsciiType.instance, resultSet, "key");
        assertColumnType(AsciiType.instance, resultSet, "column1");
        assertColumnType(Int32Type.instance, resultSet, "value");
        assertColumnType(AsciiType.instance, resultSet, "col1");
        assertColumnType(AsciiType.instance, resultSet, "col2");

        assertRows(resultSet,
                   row("key1", "dynamicKey1", "val1", "val2", 100),
                   row("key1", "dynamicKey2", "val1", "val2", 200));
    }

