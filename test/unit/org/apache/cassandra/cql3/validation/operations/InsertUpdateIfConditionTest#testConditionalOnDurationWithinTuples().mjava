    @Test
    public void testConditionalOnDurationWithinTuples() throws Throwable
    {
        createTable("CREATE TABLE %s (k int PRIMARY KEY, v int, u tuple<int, duration> )");

        assertInvalidMessage("Slice conditions are not supported on tuples containing durations",
                             "UPDATE %s SET v = 3 WHERE k = 0 IF u > (1, 2s)");
        assertInvalidMessage("Slice conditions are not supported on tuples containing durations",
                             "UPDATE %s SET v = 3 WHERE k = 0 IF u >= (1, 2s)");
        assertInvalidMessage("Slice conditions are not supported on tuples containing durations",
                             "UPDATE %s SET v = 3 WHERE k = 0 IF u <= (1, 2s)");
        assertInvalidMessage("Slice conditions are not supported on tuples containing durations",
                             "UPDATE %s SET v = 3 WHERE k = 0 IF u < (1, 2s)");

        execute("INSERT INTO %s (k, v, u) VALUES (1, 1, (1, 2s))");

        assertRows(execute("UPDATE %s SET v = 4 WHERE k = 1 IF u = (2, 2s)"), row(false, tuple(1, Duration.from("2s"))));
        assertRows(execute("UPDATE %s SET v = 3 WHERE k = 1 IF u = (1, 2s)"), row(true));

        assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, tuple(1, Duration.from("2s")), 3));

        assertRows(execute("UPDATE %s SET u = (1, 10s) WHERE k = 1 IF u != (1, 2s)"), row(false, tuple(1, Duration.from("2s"))));
        assertRows(execute("UPDATE %s SET v = 6 WHERE k = 1 IF u != (1, 1s)"), row(true));

        assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, tuple(1, Duration.from("2s")), 6));

        assertRows(execute("UPDATE %s SET v = 5 WHERE k = 1 IF u IN ((1, 1s), (1, 5s))"), row(false, tuple(1, Duration.from("2s"))));
        assertRows(execute("UPDATE %s SET u = (1, 10s) WHERE k = 1 IF u IN ((1, 1s), (1, 2s))"), row(true));

        assertRows(execute("SELECT * FROM %s WHERE k = 1"), row(1, tuple(1, Duration.from("10s")), 6));
    }

