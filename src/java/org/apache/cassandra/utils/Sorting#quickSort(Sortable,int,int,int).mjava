    private static void quickSort(Sortable data, int a, int b, int maxDepth)
    {
        int[] buffer = new int[2];

        while (b-a > 7)
        {
            if (maxDepth == 0)
            {
                heapSort(data, a, b);
                return;
            }

            maxDepth--;

            doPivot(data, a, b, buffer);
            int mlo = buffer[0];
            int mhi = buffer[1];
            // Avoiding recursion on the larger subproblem guarantees
            // a stack depth of at most lg(b-a).
            if (mlo-a < b-mhi)
            {
                quickSort(data, a, mlo, maxDepth);
                a = mhi; // i.e., quickSort(data, mhi, b)
            }
            else
            {
                quickSort(data, mhi, b, maxDepth);
                b = mlo; // i.e., quickSort(data, a, mlo)
            }
        }

        if (b-a > 1)
            insertionSort(data, a, b);
    }

