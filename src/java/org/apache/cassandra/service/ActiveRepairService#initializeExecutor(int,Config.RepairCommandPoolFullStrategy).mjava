    @VisibleForTesting
    static ThreadPoolExecutor initializeExecutor(int maxPoolSize, Config.RepairCommandPoolFullStrategy strategy)
    {
        int corePoolSize = 1;
        BlockingQueue<Runnable> queue;
        if (strategy == Config.RepairCommandPoolFullStrategy.reject)
        {
            // new threads will be created on demand up to max pool
            // size so we can leave corePoolSize at 1 to start with
            queue = new SynchronousQueue<>();
        }
        else
        {
            // new threads are only created if > corePoolSize threads are running
            // and the queue is full, so set corePoolSize to the desired max as the
            // queue will _never_ be full. Idle core threads will eventually time
            // out and may be re-created if/when subsequent tasks are submitted.
            corePoolSize = maxPoolSize;
            queue = new LinkedBlockingQueue<>();
        }

        ThreadPoolExecutor executor = new JMXEnabledThreadPoolExecutor(corePoolSize,
                                                                       maxPoolSize,
                                                                       1,
                                                                       TimeUnit.HOURS,
                                                                       queue,
                                                                       new NamedThreadFactory("Repair-Task"),
                                                                       "internal",
                                                                       new ThreadPoolExecutor.AbortPolicy());
        // allow idle core threads to be terminated
        executor.allowCoreThreadTimeOut(true);
        return executor;
    }

