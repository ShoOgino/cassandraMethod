        private boolean isReversed(SelectStatement stmt, CFDefinition cfDef) throws InvalidRequestException
        {
            Boolean[] reversedMap = new Boolean[cfDef.clusteringColumnsCount()];
            int i = 0;
            for (Map.Entry<ColumnIdentifier, Boolean> entry : stmt.parameters.orderings.entrySet())
            {
                ColumnIdentifier column = entry.getKey();
                boolean reversed = entry.getValue();

                CFDefinition.Name name = cfDef.get(column);
                if (name == null)
                    handleUnrecognizedOrderingColumn(column);

                if (name.kind != CFDefinition.Name.Kind.COLUMN_ALIAS)
                    throw new InvalidRequestException(String.format("Order by is currently only supported on the clustered columns of the PRIMARY KEY, got %s", column));

                if (i++ != name.position)
                    throw new InvalidRequestException(String.format("Order by currently only support the ordering of columns following their declared order in the PRIMARY KEY"));

                reversedMap[name.position] = (reversed != isReversedType(name));
            }

            // Check that all boolean in reversedMap, if set, agrees
            Boolean isReversed = null;
            for (Boolean b : reversedMap)
            {
                // Column on which order is specified can be in any order
                if (b == null)
                    continue;

                if (isReversed == null)
                {
                    isReversed = b;
                    continue;
                }
                if (!isReversed.equals(b))
                    throw new InvalidRequestException(String.format("Unsupported order by relation"));
            }
            assert isReversed != null;
            return isReversed;
        }

