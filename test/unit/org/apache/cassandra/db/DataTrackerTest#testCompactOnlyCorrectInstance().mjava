    @Test
    public void testCompactOnlyCorrectInstance()
    {
        Keyspace keyspace = Keyspace.open(KEYSPACE);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);
        cfs.truncateBlocking();
        for (int j = 0; j < 100; j ++)
        {
            ByteBuffer key = ByteBufferUtil.bytes(String.valueOf(j));
            Mutation rm = new Mutation(KEYSPACE, key);
            rm.add(CF, Util.cellname("0"), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
            rm.apply();
        }
        cfs.forceBlockingFlush();
        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());
        assert sstables.size() == 1;
        SSTableReader reader = Iterables.getFirst(sstables, null);
        SSTableReader reader2 = reader.cloneAsShadowed(new Runnable() { public void run() { } });
        Assert.assertFalse(cfs.getDataTracker().markCompacting(ImmutableList.of(reader2)));
        Assert.assertTrue(cfs.getDataTracker().markCompacting(ImmutableList.of(reader)));
        cfs.getDataTracker().replaceWithNewInstances(ImmutableList.of(reader), ImmutableList.of(reader2));
        cfs.getDataTracker().unmarkCompacting(ImmutableList.of(reader));
        cfs.truncateBlocking();
    }

