    /**
     * Update column family definition attributes
     * @param statement - ANTLR tree representing current statement
     * @param cfDefToUpdate - column family definition to apply updates on
     * @return cfDef - updated column family definition
     */
    private CfDef updateCfDefAttributes(final Tree statement, final CfDef cfDefToUpdate)
    {
        final CfDef cfDef = new CfDef(cfDefToUpdate);

        for(int i = 1; i < statement.getChildCount(); i += 2)
        {
            final String currentArgument = statement.getChild(i).getText().toUpperCase();
            final AddColumnFamilyArgument mArgument = AddColumnFamilyArgument.valueOf(currentArgument);
            final String mValue = statement.getChild(i + 1).getText();

            switch(mArgument)
            {
            case COLUMN_TYPE:
                cfDef.setColumn_type(CliUtils.unescapeSQLString(mValue));
                break;

            case COMPARATOR:
                cfDef.setComparator_type(CliUtils.unescapeSQLString(mValue));
                break;

            case SUBCOMPARATOR:
                cfDef.setSubcomparator_type(CliUtils.unescapeSQLString(mValue));
                break;

            case COMMENT:
                cfDef.setComment(CliUtils.unescapeSQLString(mValue));
                break;

            case ROWS_CACHED:
                cfDef.setRow_cache_size(Double.parseDouble(mValue));
                break;

            case PRELOAD_ROW_CACHE:
                cfDef.setPreload_row_cache(Boolean.parseBoolean(CliUtils.unescapeSQLString(mValue)));
                break;

            case KEY_CACHE_SIZE:
                cfDef.setKey_cache_size(Double.parseDouble(mValue));
                break;

            case READ_REPAIR_CHANCE:
                cfDef.setRead_repair_chance(Double.parseDouble(mValue));
                break;

            case GC_GRACE_SECONDS:
                cfDef.setGc_grace_seconds(Integer.parseInt(mValue));
                break;

            case COLUMN_METADATA:
                final Tree arrayOfMetaAttributes = statement.getChild(i + 1);

                if (!arrayOfMetaAttributes.getText().equals("ARRAY"))
                {
                    throw new RuntimeException("'column_metadata' format - [{ k:v, k:v, ..}, { ... }, ...]");
                }

                cfDef.setColumn_metadata(getCFColumnMetaFromTree(arrayOfMetaAttributes));
                break;

            default:
                //must match one of the above or we'd throw an exception at the valueOf statement above.
                assert(false);

            }
        }

        return cfDef;
    }

