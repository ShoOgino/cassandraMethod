    // See CASSANDRA-2628
    @Test
    public void testIndexScanWithLimitOne()
    {
        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_INDEX1);
        Mutation rm;

        CellName nobirthdate = cellname("notbirthdate");
        CellName birthdate = cellname("birthdate");

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("kk1"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(1L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("kk2"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("kk3"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("kk4"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        // basic single-expression query
        IndexExpression expr1 = new IndexExpression(ByteBufferUtil.bytes("birthdate"), Operator.EQ, ByteBufferUtil.bytes(1L));
        IndexExpression expr2 = new IndexExpression(ByteBufferUtil.bytes("notbirthdate"), Operator.GT, ByteBufferUtil.bytes(1L));
        List<IndexExpression> clause = Arrays.asList(expr1, expr2);
        IDiskAtomFilter filter = new IdentityQueryFilter();
        Range<RowPosition> range = Util.range("", "");
        List<Row> rows = cfs.search(range, clause, filter, 1);

        assert rows != null;
        assert rows.size() == 1 : StringUtils.join(rows, ",");
    }

