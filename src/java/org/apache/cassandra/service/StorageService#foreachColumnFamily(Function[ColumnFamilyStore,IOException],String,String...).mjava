    /**
     * Applies the given Function to all matching column families.
     * @param function Function taking a column family and possibly returning an IOException.
     * @param tableName Name of matching table.
     * @param columnFamilies Names of matching column families, or null for all.
     * @throws IOException
     */
    public void foreachColumnFamily(Function<ColumnFamilyStore, IOException> function, String tableName, String... columnFamilies) throws IOException
    {
        if (DatabaseDescriptor.getTable(tableName) == null)
        {
            throw new IOException("Table " + tableName + "does not exist");
        }

        Table table = Table.open(tableName);
        Set<String> positiveColumnFamilies = table.getColumnFamilies();

        // no columnFamilies means flush'em all.
        if (columnFamilies == null || columnFamilies.length == 0)
        {
            columnFamilies = positiveColumnFamilies.toArray(new String[positiveColumnFamilies.size()]);
        }

        for (String columnFamily : columnFamilies)
        {
            if (positiveColumnFamilies.contains(columnFamily))
            {
                ColumnFamilyStore cfStore = table.getColumnFamilyStore(columnFamily);
                IOException result = function.apply(cfStore);
                if (result != null)
                    throw result;
            }
            else
            {
                // this means there was a cf passed in that is not recognized in the keyspace. report it and continue.
                logger_.warn(String.format("Invalid column family specified: %s. Proceeding with others.", columnFamily));
            }
        }
    }

