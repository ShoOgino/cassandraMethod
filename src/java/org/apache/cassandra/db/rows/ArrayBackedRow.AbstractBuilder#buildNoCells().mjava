        protected Row buildNoCells()
        {
            assert cells.isEmpty();
            int minDeletionTime = Math.min(minDeletionTime(primaryKeyLivenessInfo), minDeletionTime(deletion));
            if (columnsWithComplexDeletion == 0)
                return new ArrayBackedRow(clustering, columns, primaryKeyLivenessInfo, deletion, 0, NO_DATA, minDeletionTime);

            ColumnData[] data = new ColumnData[columnsWithComplexDeletion];
            int size = 0;
            for (int i = 0; i < complexDeletions.length; i++)
            {
                DeletionTime complexDeletion = complexDeletions[i];
                if (complexDeletion != null)
                {
                    assert !complexDeletion.isLive();
                    data[size++] = new ComplexColumnData(columns.getComplex(i), ComplexColumnData.NO_CELLS, complexDeletion);
                    minDeletionTime = Integer.MIN_VALUE;
                }
            }
            return new ArrayBackedRow(clustering, columns, primaryKeyLivenessInfo, deletion, size, data, minDeletionTime);
        }

