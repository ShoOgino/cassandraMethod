    /**
     * Return a partitioner instance for remote host.
     *
     * @param hostName hostname or address to connect to
     * @param port port number to connect to
     * @param framed wrap with framed transport if true
     * @return an IPartitioner instance
     * @throws ShuffleError
     */
    public static IPartitioner<?> getPartitioner(String hostName, int port, boolean framed) throws ShuffleError
    {
        String partitionerName = null;
        try
        {
            partitionerName = getThriftClient(hostName, port, framed).describe_partitioner();
        }
        catch (TException e)
        {
            throw new ShuffleError(
                    String.format("Thrift request to %s:%d failed: %s", hostName, port, e.getMessage()));
        }
        catch (InvalidRequestException e)
        {
            throw new RuntimeException("Error calling describe_partitioner() defies explanation", e);
        }

        try
        {
            Class<?> partitionerClass = Class.forName(partitionerName);
            return (IPartitioner<?>)partitionerClass.newInstance();
        }
        catch (ClassNotFoundException e)
        {
            throw new ShuffleError("Unable to locate class for partitioner: " + partitionerName);
        }
        catch (Exception e)
        {
            throw new RuntimeException(e);
        }
    }

