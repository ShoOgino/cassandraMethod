    /**
     * @return a ViewFragment containing the sstables and memtables that may need to be merged
     * for rows within @param rowBounds, inclusive, according to the interval tree.
     */
    public Function<View, List<SSTableReader>> viewFilter(final AbstractBounds<RowPosition> rowBounds)
    {
        assert !AbstractBounds.strictlyWrapsAround(rowBounds.left, rowBounds.right);
        return new Function<View, List<SSTableReader>>()
        {
            public List<SSTableReader> apply(View view)
            {
                // Note that View.sstablesInBounds always includes it's bound while rowBounds may not. This is ok however
                // because the fact we restrict the sstables returned by this function is an optimization in the first
                // place and the returned sstables will (almost) never cover *exactly* rowBounds anyway. It's also
                // *very* unlikely that a sstable is included *just* because we consider one of the bound inclusively
                // instead of exclusively, so the performance impact is negligible in practice.
                return view.sstablesInBounds(rowBounds.left, rowBounds.right);
            }
        };
    }

