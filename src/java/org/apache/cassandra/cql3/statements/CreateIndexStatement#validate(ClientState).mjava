    public void validate(ClientState state) throws RequestValidationException
    {
        TableMetadata table = Schema.instance.validateTable(keyspace(), columnFamily());

        if (table.isCounter())
            throw new InvalidRequestException("Secondary indexes are not supported on counter tables");

        if (table.isView())
            throw new InvalidRequestException("Secondary indexes are not supported on materialized views");

        if (table.isCompactTable() && !table.isStaticCompactTable())
            throw new InvalidRequestException("Secondary indexes are not supported on COMPACT STORAGE tables that have clustering columns");

        List<IndexTarget> targets = new ArrayList<>(rawTargets.size());
        for (IndexTarget.Raw rawTarget : rawTargets)
            targets.add(rawTarget.prepare(table));

        if (targets.isEmpty() && !properties.isCustom)
            throw new InvalidRequestException("Only CUSTOM indexes can be created without specifying a target column");

        if (targets.size() > 1)
            validateTargetsForMultiColumnIndex(targets);

        for (IndexTarget target : targets)
        {
            ColumnMetadata cd = table.getColumn(target.column);

            if (cd == null)
                throw new InvalidRequestException("No column definition found for column " + target.column);

            if (cd.type.referencesDuration())
            {
                checkFalse(cd.type.isCollection(), "Secondary indexes are not supported on collections containing durations");
                checkFalse(cd.type.isTuple(), "Secondary indexes are not supported on tuples containing durations");
                checkFalse(cd.type.isUDT(), "Secondary indexes are not supported on UDTs containing durations");
                throw invalidRequest("Secondary indexes are not supported on duration columns");
            }

            // TODO: we could lift that limitation
            if (table.isCompactTable() && cd.isPrimaryKeyColumn())
                throw new InvalidRequestException("Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables");

            if (cd.kind == ColumnMetadata.Kind.PARTITION_KEY && table.partitionKeyColumns().size() == 1)
                throw new InvalidRequestException(String.format("Cannot create secondary index on partition key column %s", target.column));

            boolean isMap = cd.type instanceof MapType;
            boolean isFrozenCollection = cd.type.isCollection() && !cd.type.isMultiCell();
            if (isFrozenCollection)
            {
                validateForFrozenCollection(target);
            }
            else
            {
                validateNotFullIndex(target);
                validateIsSimpleIndexIfTargetColumnNotCollection(cd, target);
                validateTargetColumnIsMapIfIndexInvolvesKeys(isMap, target);
            }

            checkFalse(cd.type.isUDT() && cd.type.isMultiCell(), "Secondary indexes are not supported on non-frozen UDTs");
        }

        if (!Strings.isNullOrEmpty(indexName))
        {
            if (Schema.instance.getKeyspaceMetadata(keyspace()).existingIndexNames(null).contains(indexName))
            {
                if (ifNotExists)
                    return;
                else
                    throw new InvalidRequestException(String.format("Index %s already exists", indexName));
            }
        }

        properties.validate();
    }

