    public static boolean mayNeedPaging(Pageable command, int pageSize)
    {
        if (command instanceof Pageable.ReadCommands)
        {
            List<ReadCommand> commands = ((Pageable.ReadCommands)command).commands;

            // Using long on purpose, as we could overflow otherwise
            long maxQueried = 0;
            for (ReadCommand readCmd : commands)
                maxQueried += maxQueried(readCmd);

            return maxQueried > pageSize;
        }
        else if (command instanceof ReadCommand)
        {
            return maxQueried((ReadCommand)command) > pageSize;
        }
        else
        {
            assert command instanceof RangeSliceCommand;
            RangeSliceCommand rsc = (RangeSliceCommand)command;
            // We don't support paging for thrift in general because the way thrift RangeSliceCommand count rows
            // independently of cells makes things harder (see RangeSliceQueryPager). The one case where we do
            // get a RangeSliceCommand from CQL3 without the countCQL3Rows flag set is for DISTINCT. In that case
            // however, the underlying sliceQueryFilter count is 1, so that the RSC limit is still a limit on the
            // number of CQL3 rows returned.
            assert rsc.countCQL3Rows || (rsc.predicate instanceof SliceQueryFilter && ((SliceQueryFilter)rsc.predicate).count == 1);
            return rsc.maxResults > pageSize;
        }
    }

