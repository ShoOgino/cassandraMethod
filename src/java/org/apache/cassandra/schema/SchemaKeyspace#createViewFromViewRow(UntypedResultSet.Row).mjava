    private static ViewDefinition createViewFromViewRow(UntypedResultSet.Row row)
    {
        String keyspace = row.getString("keyspace_name");
        String view = row.getString("view_name");
        UUID id = row.getUUID("id");
        UUID baseTableId = row.getUUID("base_table_id");
        boolean includeAll = row.getBoolean("include_all_columns");

        List<ColumnDefinition> columns =
            readSchemaPartitionForTableAndApply(COLUMNS, keyspace, view, SchemaKeyspace::createColumnsFromColumnsPartition);

        Map<ByteBuffer, CFMetaData.DroppedColumn> droppedColumns =
            readSchemaPartitionForTableAndApply(DROPPED_COLUMNS, keyspace, view, SchemaKeyspace::createDroppedColumnsFromDroppedColumnsPartition);

        CFMetaData cfm = CFMetaData.create(keyspace,
                                           view,
                                           id,
                                           false,
                                           true,
                                           false,
                                           false,
                                           true,
                                           columns,
                                           DatabaseDescriptor.getPartitioner())
                                   .params(createTableParamsFromRow(row))
                                   .droppedColumns(droppedColumns);

        return new ViewDefinition(keyspace, view, baseTableId, includeAll, cfm);
    }

