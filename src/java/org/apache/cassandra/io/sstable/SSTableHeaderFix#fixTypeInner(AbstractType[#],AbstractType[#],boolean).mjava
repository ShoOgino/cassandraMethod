    private AbstractType<?> fixTypeInner(AbstractType<?> typeInHeader, AbstractType<?> typeInSchema, boolean droppedColumnMode)
    {
        if (typeEquals(typeInHeader, typeInSchema))
            return typeInHeader;

        if (typeInHeader instanceof CollectionType)
            return fixTypeInnerCollection(typeInHeader, typeInSchema, droppedColumnMode);

        if (typeInHeader instanceof AbstractCompositeType)
            return fixTypeInnerAbstractComposite(typeInHeader, typeInSchema, droppedColumnMode);

        if (typeInHeader instanceof TupleType)
            return fixTypeInnerAbstractTuple(typeInHeader, typeInSchema, droppedColumnMode);

        // all types, beside CollectionType + AbstractCompositeType + TupleType, should be ok (no nested types) - just check for compatibility
        if (typeInHeader.isCompatibleWith(typeInSchema))
            return typeInHeader;

        return null;
    }

