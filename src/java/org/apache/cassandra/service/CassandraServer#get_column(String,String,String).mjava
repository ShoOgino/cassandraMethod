    public column_t get_column(String tablename, String key, String columnPath) throws NotFoundException, InvalidRequestException
    {
        logger.debug("get_column");
        String[] values = RowMutation.getColumnAndColumnFamily(columnPath);
        if (values.length < 1)
        {
            throw new InvalidRequestException("get_column requires non-empty columnfamily");
        }
        if (DatabaseDescriptor.getColumnFamilyType(null, values[0]).equals("Standard"))
        {
            if (values.length != 2)
            {
                throw new InvalidRequestException("get_column requires both parts of columnfamily:column for standard CF " + values[0]);
            }
        }
        else
        {
            if (values.length != 3)
            {
                throw new InvalidRequestException("get_column requires all parts of columnfamily:supercolumn:subcolumn for super CF " + values[0]);
            }
        }

        ColumnReadCommand readCommand = new ColumnReadCommand(tablename, key, columnPath);
        ColumnFamily cfamily = readColumnFamily(readCommand);
        if (cfamily == null)
        {
            throw new NotFoundException();
        }
        Collection<IColumn> columns = null;
        if( values.length > 2 )
        {
            // this is the super column case
            IColumn column = cfamily.getColumn(values[1]);
            if(column != null)
                columns = column.getSubColumns();
        }
        else
        {
            columns = cfamily.getAllColumns();
        }
        if (columns == null || columns.size() == 0)
        {
            throw new NotFoundException();
        }

        assert columns.size() == 1;
        IColumn column = columns.iterator().next();
        if (column.isMarkedForDelete())
        {
            throw new NotFoundException();
        }

        return new column_t(column.name(), column.value(), column.timestamp());
    }

