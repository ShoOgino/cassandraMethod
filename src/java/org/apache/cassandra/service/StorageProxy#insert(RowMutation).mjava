    /**
     * Use this method to have this RowMutation applied
     * across all replicas. This method will take care
     * of the possibility of a replica being down and hint
     * the data across to some other replica. 
     * @param rm the mutation to be applied across the replicas
    */
    public static void insert(RowMutation rm)
	{
        /*
         * Get the N nodes from storage service where the data needs to be
         * replicated
         * Construct a message for write
         * Send them asynchronously to the replicas.
        */

        long startTime = System.currentTimeMillis();
		try
		{
			Map<EndPoint, EndPoint> endpointMap = StorageService.instance().getNStorageEndPointMap(rm.key());
			// TODO: throw a thrift exception if we do not have N nodes
			Map<EndPoint, Message> messageMap = createWriteMessages(rm, endpointMap);
			for (Map.Entry<EndPoint, Message> entry : messageMap.entrySet())
			{
                Message message = entry.getValue();
                EndPoint endpoint = entry.getKey();
                // Check if local and not hinted
                byte[] hintedBytes = message.getHeader(RowMutation.HINT);
                if (endpoint.equals(StorageService.getLocalStorageEndPoint())
                        && !(hintedBytes!= null && hintedBytes.length>0))
                {
                    if (logger.isDebugEnabled())
                        logger.debug("locally writing writing key " + rm.key()
                                + " to " + endpoint);
                    rm.apply();
                } else
                {
                    if (logger.isDebugEnabled())
                        logger.debug("insert writing key " + rm.key() + " to "
                                + message.getMessageId() + "@" + endpoint);
                	MessagingService.getMessagingInstance().sendOneWay(message, endpoint);
                }
			}
		}
        catch (IOException e)
        {
            throw new RuntimeException("error inserting key " + rm.key(), e);
        }
        finally
        {
            writeStats.add(System.currentTimeMillis() - startTime);
        }
    }

