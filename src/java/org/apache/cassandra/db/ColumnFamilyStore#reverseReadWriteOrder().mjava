    public boolean reverseReadWriteOrder()
    {
        //XXX: PURPOSE: allow less harmful race condition w/o locking

        // normal read/write order (non-commutative):
        //   purpose:
        //     avoid missing an MT; may double reconcile
        //   read path order:
        //     1) live MT
        //     2) MTs pending flush
        //     3) SSTs
        //   write path order: (live MT => MT pending flush)
        //     1) add live MT to MTs pending flush
        //     2) reset live MT
        //   write path order: (MT pending flush => SST)
        //     1) add SST
        //     2) remove MT pending flush

        // reversed read/write order (commutative):
        //   purpose:
        //     avoid over-counting an MT; may miss an MT
        //   read path order:
        //     1) SSTs
        //     2) MTs pending flush
        //     3) live MT
        //   write path order: (live MT => MT pending flush)
        //     1) save live MT
        //     2) reset live MT
        //     3) add saved MT to MTs pending flush
        //   write path order: (MT pending flush => SST)
        //     1) remove MT pending flush
        //     2) add SST

        return metadata.getDefaultValidator().isCommutative();
    }

