    /**
     * Return a directory where we can expect expectedWriteSize to fit.
     *
     * @param sstables the sstables to compact
     * @return
     */
    public Directories.DataDirectory getWriteDirectory(Iterable<SSTableReader> sstables, long estimatedWriteSize)
    {
        File directory = null;
        for (SSTableReader sstable : sstables)
        {
            if (directory == null)
                directory = sstable.descriptor.directory;
            if (!directory.equals(sstable.descriptor.directory))
                logger.trace("All sstables not from the same disk - putting results in {}", directory);
        }
        Directories.DataDirectory d = getDirectories().getDataDirectoryForFile(directory);
        if (d != null)
        {
            if (d.getAvailableSpace() < estimatedWriteSize)
                throw new RuntimeException(String.format("Not enough space to write %d bytes to %s (%d bytes available)", estimatedWriteSize, d.location, d.getAvailableSpace()));
            logger.trace("putting compaction results in {}", directory);
            return d;
        }
        d = getDirectories().getWriteableLocation(estimatedWriteSize);
        if (d == null)
            throw new RuntimeException("Not enough disk space to store "+estimatedWriteSize+" bytes");
        return d;
    }

