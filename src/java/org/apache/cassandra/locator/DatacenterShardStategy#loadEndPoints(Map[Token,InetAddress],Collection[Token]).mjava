    /**
     * This Method will get the required information of the EndPoint from the
     * DataCenterEndPointSnitch and poopulates this singleton class.
     *
     * @param tokenToEndPointMap - Provided the endpoint map which will be mapped with the DC's
     */
    private synchronized void loadEndPoints(Map<Token, InetAddress> tokenToEndPointMap, Collection<Token> tokens) throws IOException
    {
        endPointSnitch = (DatacenterEndPointSnitch) StorageService.instance().getEndPointSnitch();
        this.tokens = new ArrayList<Token>(tokens);
        String localDC = endPointSnitch.getLocation(InetAddress.getLocalHost());
        dcMap = new HashMap<String, List<Token>>();
        for (Token token : this.tokens)
        {
            InetAddress endPoint = tokenToEndPointMap.get(token);
            String dataCenter = endPointSnitch.getLocation(endPoint);
            if (dataCenter.equals(localDC))
            {
                localEndPoints.add(endPoint);
            }
            List<Token> lst = dcMap.get(dataCenter);
            if (lst == null)
            {
                lst = new ArrayList<Token>();
            }
            lst.add(token);
            dcMap.put(dataCenter, lst);
        }
        for (Entry<String, List<Token>> entry : dcMap.entrySet())
        {
            List<Token> valueList = entry.getValue();
            Collections.sort(valueList);
            dcMap.put(entry.getKey(), valueList);
        }
        dcReplicationFactor = endPointSnitch.getMapReplicationFactor();
        for (Entry<String, Integer> entry : dcReplicationFactor.entrySet())
        {
            String datacenter = entry.getKey();
            int qFactor = (entry.getValue() / 2 + 1);
            quorumRepFactor.put(datacenter, qFactor);
            if (datacenter.equals(localDC))
            {
                locQFactor = qFactor;
            }
        }
    }

