    public static Versions find()
    {
        logger.info("Looking for dtest jars in " + new File("build").getAbsolutePath());
        final Pattern pattern = Pattern.compile("dtest-(?<fullversion>(\\d+)\\.(\\d+)(\\.\\d+)?(\\.\\d+)?)([~\\-]\\w[.\\w]*(?:\\-\\w[.\\w]*)*)?(\\+[.\\w]+)?\\.jar");
        final Map<Major, List<Version>> versions = new HashMap<>();
        for (Major major : Major.values())
            versions.put(major, new ArrayList<>());

        for (File file : new File("build").listFiles())
        {
            Matcher m = pattern.matcher(file.getName());
            if (!m.matches())
                continue;
            String version = m.group("fullversion");
            Major major = Major.fromFull(version);
            versions.get(major).add(new Version(major, version, new URL[] { toURL(file) }));
        }

        for (Map.Entry<Major, List<Version>> e : versions.entrySet())
        {
            if (e.getValue().isEmpty())
                continue;
            Collections.sort(e.getValue(), Comparator.comparing(v -> v.version, e.getKey()::compare));
            logger.info("Found " + e.getValue().stream().map(v -> v.version).collect(Collectors.joining(", ")));
        }

        return new Versions(versions);
    }

