    /** get potential sources for each range, ordered by proximity (as determined by EndpointSnitch) */
    Multimap<Range<Token>, InetAddress> getRangesWithSources(String table)
    {
        assert tokenMetadata.sortedTokens().size() > 0;
        final AbstractReplicationStrategy strat = Table.open(table).getReplicationStrategy();
        Collection<Range<Token>> myRanges = strat.getPendingAddressRanges(tokenMetadata, token, address);

        Multimap<Range<Token>, InetAddress> myRangeAddresses = ArrayListMultimap.create();
        Multimap<Range<Token>, InetAddress> rangeAddresses = strat.getRangeAddresses(tokenMetadata);
        for (Range<Token> myRange : myRanges)
        {
            for (Range<Token> range : rangeAddresses.keySet())
            {
                if (range.contains(myRange))
                {
                    List<InetAddress> preferred = DatabaseDescriptor.getEndpointSnitch().getSortedListByProximity(address, rangeAddresses.get(range));
                    myRangeAddresses.putAll(myRange, preferred);
                    break;
                }
            }
            assert myRangeAddresses.keySet().contains(myRange);
        }
        return myRangeAddresses;
    }

