    // A slightly simplified version of LegacySchemaTables.
    private static ColumnDefinition createDefinitionFromRow(Row row,
                                                            String keyspace,
                                                            String table,
                                                            AbstractType<?> rawComparator,
                                                            AbstractType<?> rawSubComparator,
                                                            boolean isSuper,
                                                            boolean isCQLTable)
    {
        ColumnDefinition.Kind kind = LegacySchemaTables.deserializeKind(row.getString("type"));

        Integer componentIndex = null;
        if (!row.isNull("component_index"))
            componentIndex = row.getInt("component_index");

        // Note: we save the column name as string, but we should not assume that it is an UTF8 name, we
        // we need to use the comparator fromString method
        AbstractType<?> comparator = isCQLTable
                                   ? UTF8Type.instance
                                   : CompactTables.columnDefinitionComparator(kind, isSuper, rawComparator, rawSubComparator);
        ColumnIdentifier name = ColumnIdentifier.getInterned(comparator.fromString(row.getString("column_name")), comparator);

        AbstractType<?> validator = TypeParser.parse(row.getString("validator"));

        return new ColumnDefinition(keyspace, table, name, validator, null, null, null, componentIndex, kind);
    }

