    /**
     * @param searchIn sorted list to look in
     * @param searchFor key to find
     */
    public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op)
    {
        final int strictnessOfLessThan = strictnessOfLessThan(op);
        int lb = -1;
        int ub = searchIn.size();
        // a[-1]            ^= -infinity
        // a[search.size()] ^= +infinity

        while (lb + 1 < ub)
        {
            int m = (lb + ub) / 2;
            int c = compareAsymmetric(searchIn.get(m), searchFor);

            if (c < strictnessOfLessThan) lb = m;
            else ub = m;
        }

        return selectBoundary(op, lb, ub);
    }

