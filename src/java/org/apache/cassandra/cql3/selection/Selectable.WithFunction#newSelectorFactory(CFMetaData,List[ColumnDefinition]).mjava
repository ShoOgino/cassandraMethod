        public Selector.Factory newSelectorFactory(CFMetaData cfm, List<ColumnDefinition> defs)
        {
            SelectorFactories factories  =
                    SelectorFactories.createFactoriesAndCollectColumnDefinitions(args, cfm, defs);

            // We need to circumvent the normal function lookup process for toJson() because instances of the function
            // are not pre-declared (because it can accept any type of argument).
            Function fun;
            if (functionName.equalsNativeFunction(ToJsonFct.NAME))
                fun = ToJsonFct.getInstance(factories.getReturnTypes());
            else
                fun = FunctionResolver.get(cfm.ksName, functionName, factories.newInstances(), cfm.ksName, cfm.cfName, null);

            if (fun == null)
                throw new InvalidRequestException(String.format("Unknown function '%s'", functionName));

            if (fun.returnType() == null)
                throw new InvalidRequestException(String.format("Unknown function %s called in selection clause",
                                                                functionName));

            return AbstractFunctionSelector.newFactory(fun, factories);
        }

