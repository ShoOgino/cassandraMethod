        public MergeResult merge(int point1, int point2)
        {
            long key = wrap(point1, 0);
            int index = Arrays.binarySearch(data, key);
            if (index < 0)
            {
                index = -index - 1;
                assert (index < data.length) : "Not found in array";
                assert (unwrapPoint(data[index]) == point1) : "Not found in array";
            }

            final int prevPoint = getPrevPoint(index);
            final int nextPoint = getNextPoint(index + 1);

            int value1 = unwrapValue(data[index]);
            int value2 = unwrapValue(data[index + 1]);

            assert (unwrapPoint(data[index + 1]) == point2) : "point2 should follow point1";

            int sum = value1 + value2;

            //let's evaluate in long values to handle overflow in multiplication
            int newPoint = (int) (((long) point1 * value1 + (long) point2 * value2) / (value1 + value2));
            newPoint = roundKey(newPoint, roundSeconds);
            data[index] = wrap(newPoint, sum);

            System.arraycopy(data, index + 2, data, index + 1, data.length - index - 2);
            data[data.length - 1] = EMPTY;

            return new MergeResult(prevPoint, newPoint, nextPoint);
        }

