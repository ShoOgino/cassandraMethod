    /**
     * Converts object represented as string into byte[] according to comparator
     * @param object - object to covert into byte array
     * @param comparator - comparator used to convert object
     * @return byte[] - object in the byte array representation
     */
    private ByteBuffer getBytesAccordingToType(String object, AbstractType comparator)
    {
        if (comparator instanceof LongType)
        {
            long longType;
            try
            {
                longType = Long.valueOf(object);
            }
            catch (Exception e)
            {
                throw new RuntimeException("'" + object + "' could not be translated into a LongType.");
            }

            return FBUtilities.toByteBuffer(longType);
        }
        else if (comparator instanceof LexicalUUIDType || comparator instanceof TimeUUIDType)
        {
            UUID uuid = UUID.fromString(object);

            if (comparator instanceof TimeUUIDType && uuid.version() != 1)
                throw new IllegalArgumentException("TimeUUID supports only version 1 UUIDs");    

            return ByteBuffer.wrap(UUIDGen.decompose(uuid));    
        }
        else if (comparator instanceof IntegerType)
        {
            BigInteger integerType;

            try
            {
                integerType =  new BigInteger(object);
            }
            catch (Exception e)
            {
                throw new RuntimeException("'" + object + "' could not be translated into an IntegerType.");
            }

            return ByteBuffer.wrap(integerType.toByteArray());
        }
        else if (comparator instanceof AsciiType)
        {
            return ByteBuffer.wrap(object.getBytes(Charsets.US_ASCII));
        }
        else
        {
            return ByteBuffer.wrap(object.getBytes(Charsets.UTF_8));
        }
    }

