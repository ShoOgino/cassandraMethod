    @Test
    public void testValidatorFailed() throws Throwable
    {
        Range<Token> range = new Range<>(partitioner.getMinimumToken(), partitioner.getRandomToken());
        final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range));

        final CompletableFuture<Message> outgoingMessageSink = registerOutgoingMessageSink();

        InetAddressAndPort remote = InetAddressAndPort.getByName("127.0.0.2");

        Validator validator = new Validator(desc, remote, 0, PreviewKind.NONE);
        validator.fail();

        Message message = outgoingMessageSink.get(TEST_TIMEOUT, TimeUnit.SECONDS);
        assertEquals(Verb.VALIDATION_RSP, message.verb());
        ValidationResponse m = (ValidationResponse) message.payload;
        assertEquals(desc, m.desc);
        assertFalse(m.success());
        assertNull(m.trees);
    }

