    /**
     * Send a message to a given endpoint. This method adheres to the fire and forget
     * style messaging.
     * @param message messages to be sent.
     * @param to endpoint to which the message needs to be sent
     */
    public void sendOneWay(Message message, InetAddress to)
    {
        // do local deliveries
        if ( message.getFrom().equals(to) )
        {
            MessagingService.receive(message);
            return;
        }

        TcpConnection connection = null;
        try
        {
            Message processedMessage = SinkManager.processClientMessageSink(message);
            if (processedMessage == null)
            {
                return;
            }
            connection = MessagingService.getConnection(processedMessage.getFrom(), to, message);
            connection.write(message);
        }
        catch (SocketException se)
        {
            // Shutting down the entire pool. May be too conservative an approach.
            MessagingService.getConnectionPool(message.getFrom(), to).shutdown();
            logger_.error("socket error writing to " + to, se);
        }
        catch (IOException e)
        {
            if (connection != null)
            {
                connection.errorClose();
            }
            logger_.error("unexpected error writing " + message, e);
        }
        finally
        {
            if (connection != null)
            {
                connection.close();
            }
        }
    }

