    private void init(StressYaml yaml) throws RequestValidationException
    {
        keyspaceName = yaml.keyspace;
        keyspaceCql = yaml.keyspace_definition;
        tableName = yaml.table;
        tableCql = yaml.table_definition;
        seedStr = yaml.seed;
        queries = yaml.queries;
        insert = yaml.insert;

        assert keyspaceName != null : "keyspace name is required in yaml file";
        assert tableName != null : "table name is required in yaml file";
        assert queries != null : "queries map is required in yaml file";

        if (keyspaceCql != null && keyspaceCql.length() > 0)
        {
            String name = ((CreateKeyspaceStatement) QueryProcessor.parseStatement(keyspaceCql)).keyspace();
            assert name.equalsIgnoreCase(keyspaceName) : "Name in keyspace_definition doesn't match keyspace property: '" + name + "' != '" + keyspaceName + "'";
        }
        else
        {
            keyspaceCql = null;
        }

        if (tableCql != null && tableCql.length() > 0)
        {
            String name = CFMetaData.compile(tableCql, keyspaceName).cfName;
            assert name.equalsIgnoreCase(tableName) : "Name in table_definition doesn't match table property: '" + name + "' != '" + tableName + "'";
        }
        else
        {
            tableCql = null;
        }

        columnConfigs = new HashMap<>();
        for (Map<String,Object> spec : yaml.columnspec)
        {
            lowerCase(spec);
            String name = (String) spec.remove("name");
            DistributionFactory population = !spec.containsKey("population") ? null : OptionDistribution.get((String) spec.remove("population"));
            DistributionFactory size = !spec.containsKey("size") ? null : OptionDistribution.get((String) spec.remove("size"));
            DistributionFactory clustering = !spec.containsKey("cluster") ? null : OptionDistribution.get((String) spec.remove("cluster"));

            if (!spec.isEmpty())
                throw new IllegalArgumentException("Unrecognised option(s) in column spec: " + spec);
            if (name == null)
                throw new IllegalArgumentException("Missing name argument in column spec");

            GeneratorConfig config = new GeneratorConfig(yaml.seed + name, clustering, size, population);
            columnConfigs.put(name, config);
        }
    }

