    @Test
    public void testExpireInbound() throws Throwable
    {
        DatabaseDescriptor.setCrossNodeTimeout(true);
        testOneManual((settings, inbound, outbound, endpoint, handler) -> {
            unsafeSetSerializer(Verb._TEST_1, FakePayloadSerializer::new);

            CountDownLatch connectionLatch = new CountDownLatch(1);
            unsafeSetHandler(Verb._TEST_1, () -> v -> {
                connectionLatch.countDown();
            });
            outbound.enqueue(Message.out(Verb._TEST_1, 1L));
            connectionLatch.await(10, SECONDS);
            Assert.assertEquals(0, connectionLatch.getCount());

            // Slow things down
            unsafeSetExpiration(Verb._TEST_1, unit -> unit.convert(50, MILLISECONDS));
            handler.withLatency(100, MILLISECONDS);

            unsafeSetHandler(Verb._TEST_1, () -> v -> {
                throw new RuntimeException("Should have not been triggered " + v);
            });
            int expireMessages = 10;
            for (int i = 0; i < expireMessages; i++)
                outbound.enqueue(Message.out(Verb._TEST_1, 1L));

            InboundMessageHandlers handlers = MessagingService.instance().getInbound(endpoint);
            waitForCondition(() -> handlers.expiredCount() == expireMessages);
            Assert.assertEquals(expireMessages, handlers.expiredCount());
        });
    }

