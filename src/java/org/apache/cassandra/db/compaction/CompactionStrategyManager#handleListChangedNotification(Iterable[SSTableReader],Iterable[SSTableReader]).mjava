    /**
     * Should only be called holding the readLock
     */
    private void handleListChangedNotification(Iterable<SSTableReader> added, Iterable<SSTableReader> removed)
    {
        // a bit of gymnastics to be able to replace sstables in compaction strategies
        // we use this to know that a compaction finished and where to start the next compaction in LCS
        int locationSize = partitionSSTablesByTokenRange? currentBoundaries.directories.size() : 1;

        List<Set<SSTableReader>> repairedRemoved = new ArrayList<>(locationSize);
        List<Set<SSTableReader>> repairedAdded = new ArrayList<>(locationSize);
        List<Set<SSTableReader>> unrepairedRemoved = new ArrayList<>(locationSize);
        List<Set<SSTableReader>> unrepairedAdded = new ArrayList<>(locationSize);

        for (int i = 0; i < locationSize; i++)
        {
            repairedRemoved.add(new HashSet<>());
            repairedAdded.add(new HashSet<>());
            unrepairedRemoved.add(new HashSet<>());
            unrepairedAdded.add(new HashSet<>());
        }

        for (SSTableReader sstable : removed)
        {
            int i = compactionStrategyIndexFor(sstable);
            if (sstable.isRepaired())
                repairedRemoved.get(i).add(sstable);
            else
                unrepairedRemoved.get(i).add(sstable);
        }
        for (SSTableReader sstable : added)
        {
            int i = compactionStrategyIndexFor(sstable);
            if (sstable.isRepaired())
                repairedAdded.get(i).add(sstable);
            else
                unrepairedAdded.get(i).add(sstable);
        }
        for (int i = 0; i < locationSize; i++)
        {
            if (!repairedRemoved.get(i).isEmpty())
                repaired.get(i).replaceSSTables(repairedRemoved.get(i), repairedAdded.get(i));
            else
                repaired.get(i).addSSTables(repairedAdded.get(i));

            if (!unrepairedRemoved.get(i).isEmpty())
                unrepaired.get(i).replaceSSTables(unrepairedRemoved.get(i), unrepairedAdded.get(i));
            else
                unrepaired.get(i).addSSTables(unrepairedAdded.get(i));
        }
    }

