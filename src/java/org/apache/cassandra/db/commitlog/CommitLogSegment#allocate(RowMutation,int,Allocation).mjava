    /**
     * allocate space in this buffer for the provided row mutation, and populate the provided
     * Allocation object, returning true on success. False indicates there is not enough room in
     * this segment, and a new segment is needed
     */
    boolean allocate(RowMutation rowMutation, int size, Allocation alloc)
    {
        final AppendLock appendLock = lockForAppend();
        try
        {
            int position = allocate(size);
            if (position < 0)
            {
                appendLock.unlock();
                return false;
            }
            alloc.buffer = (ByteBuffer) buffer.duplicate().position(position).limit(position + size);
            alloc.position = position;
            alloc.segment = this;
            alloc.appendLock = appendLock;
            markDirty(rowMutation, position);
            return true;
        }
        catch (Throwable t)
        {
            appendLock.unlock();
            throw t;
        }
    }

