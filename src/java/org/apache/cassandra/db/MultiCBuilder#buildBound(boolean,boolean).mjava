    public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive)
    {
        built = true;

        if (hasMissingElements)
            return BTreeSet.empty(comparator);

        CBuilder builder = CBuilder.create(comparator);

        if (elementsList.isEmpty())
            return BTreeSet.of(comparator, builder.buildBound(isStart, isInclusive));

        // Use a TreeSet to sort and eliminate duplicates
        BTreeSet.Builder<Slice.Bound> set = BTreeSet.builder(comparator);

        for (int i = 0, m = elementsList.size(); i < m; i++)
        {
            List<ByteBuffer> elements = elementsList.get(i);
            set.add(builder.buildBoundWith(elements, isStart, isInclusive));
        }
        return set.build();
    }

