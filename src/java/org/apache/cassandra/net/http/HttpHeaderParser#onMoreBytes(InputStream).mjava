    public boolean onMoreBytes(InputStream in) throws IOException
    {
        int got;

        if (parseState_ == HeaderParseState.TO_RESET)
        {
            resetParserState();
        }

        while (in.available() > 0)
        {
            in.mark(1);
            got = in.read();

            switch (parseState_)
            {

            case START_OF_HEADER_LINE:
                switch (got)
                {
                case '\r':
                    if (in.available() > 0)
                    {
                        in.mark(1);
                        got = in.read();

                        if (got == '\n')
                        {
                            parseState_ = HeaderParseState.TO_RESET;
                            return true;
                        } // TODO: determine whether this \r-eating is valid
                        else
                        {
                            in.reset();
                        }
                    } // wait for more data to make this decision
                    else
                    {
                        in.reset();
                        return false;
                    }
                    break;

                default:
                    in.reset();
                    parseState_ = HeaderParseState.IN_HEADER_KEY;
                    break;
                }
                break;

            case IN_HEADER_KEY:
                switch (got)
                {
                case ':':
                    parseState_ = HeaderParseState.PRE_HEADER_VALUE_WHITESPACE;
                    break;
                // TODO: find out: whether to eat whitespace before a : 
                default:
                    headerKey_.append((char) got);
                    break;
                }
                break;

            case PRE_HEADER_VALUE_WHITESPACE:
                switch (got)
                {
                case ' ':
                case '\t':
                    break;
                default:
                    in.reset();
                    parseState_ = HeaderParseState.IN_HEADER_VALUE;
                    break;
                }
                break;

            case IN_HEADER_VALUE:
                switch (got)
                {
                case '\r':
                    if (in.available() > 0)
                    {
                        in.mark(1);
                        got = in.read();

                        if (got == '\n')
                        {
                            parseState_ = HeaderParseState.CHECKING_END_OF_VALUE;
                            break;
                        } // TODO: determine whether this \r-eating is valid
                        else
                        {
                            in.reset();
                        }
                    }
                    else
                    {
                        in.reset();
                        return false;
                    }
                    break;
                default:
                    headerValue_.append((char) got);
                    break;
                }
                break;

            case CHECKING_END_OF_VALUE:
                switch (got)
                {
                case ' ':
                case '\t':
                    in.reset();
                    parseState_ = HeaderParseState.IN_HEADER_VALUE;
                    break;
                default:
                    in.reset();
                    finishCurrentHeader_();
                }
                break;
            default:
                assert false;
                parseState_ = HeaderParseState.START_OF_HEADER_LINE;
                break;
            }
        }

        return false;
    }

