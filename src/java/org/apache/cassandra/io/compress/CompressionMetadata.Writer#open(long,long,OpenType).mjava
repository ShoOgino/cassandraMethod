        public CompressionMetadata open(long dataLength, long compressedLength, OpenType type)
        {
            SafeMemory offsets;
            int count = this.count;
            switch (type)
            {
                case FINAL: case SHARED_FINAL:
                    if (this.offsets.size() != count * 8L)
                    {
                        // finalize the size of memory used if it won't now change;
                        // unnecessary if already correct size
                        SafeMemory tmp = this.offsets.copy(count * 8L);
                        this.offsets.free();
                        this.offsets = tmp;
                    }

                    if (type == OpenType.SHARED_FINAL)
                    {
                        offsets = this.offsets.sharedCopy();
                    }
                    else
                    {
                        offsets = this.offsets;
                        // null out our reference to the original shared data to catch accidental reuse
                        // note that since noone is writing to this Writer while we open it, null:ing out this.offsets is safe
                        this.offsets = null;
                    }
                    break;

                case SHARED:
                    offsets = this.offsets.sharedCopy();
                    // we should only be opened on a compression data boundary; truncate our size to this boundary
                    count = (int) (dataLength / parameters.chunkLength());
                    if (dataLength % parameters.chunkLength() != 0)
                        count++;
                    // grab our actual compressed length from the next offset from our the position we're opened to
                    if (count < this.count)
                        compressedLength = offsets.getLong(count * 8L);
                    break;

                default:
                    throw new AssertionError();
            }
            return new CompressionMetadata(filePath, parameters, offsets, count * 8L, dataLength, compressedLength, Descriptor.Version.CURRENT.hasPostCompressionAdlerChecksums);
        }

