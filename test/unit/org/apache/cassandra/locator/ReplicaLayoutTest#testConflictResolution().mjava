    @Test
    public void testConflictResolution()
    {
        final Token token = new Murmur3Partitioner.LongToken(1L);
        final Replica f1 = Replica.fullReplica(EP1, R1);
        final Replica f2 = Replica.fullReplica(EP2, R1);
        final Replica t2 = Replica.transientReplica(EP2, R1);
        final Replica f3 = Replica.fullReplica(EP3, R1);
        final Replica t4 = Replica.transientReplica(EP4, R1);

        {
            // test no conflict
            EndpointsForToken natural = EndpointsForToken.of(token, f1, f3);
            EndpointsForToken pending = EndpointsForToken.of(token, t2, t4);
            Assert.assertFalse(ReplicaLayout.haveWriteConflicts(natural, pending));
        }
        {
            // test full in natural, transient in pending
            EndpointsForToken natural = EndpointsForToken.of(token, f1, f2, f3);
            EndpointsForToken pending = EndpointsForToken.of(token, t2, t4);
            EndpointsForToken expectNatural = natural;
            EndpointsForToken expectPending = EndpointsForToken.of(token, t4);
            Assert.assertTrue(ReplicaLayout.haveWriteConflicts(natural, pending));
            assertEquals(expectNatural, ReplicaLayout.resolveWriteConflictsInNatural(natural, pending));
            assertEquals(expectPending, ReplicaLayout.resolveWriteConflictsInPending(natural, pending));
        }
        {
            // test transient in natural, full in pending
            EndpointsForToken natural = EndpointsForToken.of(token, f1, t2, f3);
            EndpointsForToken pending = EndpointsForToken.of(token, f2, t4);
            EndpointsForToken expectNatural = EndpointsForToken.of(token, f1, f2, f3);
            EndpointsForToken expectPending = EndpointsForToken.of(token, t4);
            Assert.assertTrue(ReplicaLayout.haveWriteConflicts(natural, pending));
            assertEquals(expectNatural, ReplicaLayout.resolveWriteConflictsInNatural(natural, pending));
            assertEquals(expectPending, ReplicaLayout.resolveWriteConflictsInPending(natural, pending));
        }
    }

