    /**
     * Writes all data in file channel to stream: <br>
     * * For zero-copy-streaming, 1MiB at a time, with at most 2MiB in flight at once. <br>
     * * For streaming with SSL, 64kb at a time, with at most 32+64kb (default low water mark + batch size) in flight. <br>
     * <p>
     * This method takes ownership of the provided {@link FileChannel}.
     * <p>
     * WARNING: this method blocks only for permission to write to the netty channel; it exits before
     * the {@link FileRegion}(zero-copy) or {@link ByteBuffer}(ssl) is flushed to the network.
     */
    public long writeFileToChannel(FileChannel file, StreamRateLimiter limiter) throws IOException
    {
        if (channel.pipeline().get(SslHandler.class) != null)
            // each batch is loaded into ByteBuffer, 64kb is more BufferPool friendly.
            return writeFileToChannel(file, limiter, 1 << 16);
        else
            // write files in 1MiB chunks, since there may be blocking work performed to fetch it from disk,
            // the data is never brought in process and is gated by the wire anyway
            return writeFileToChannelZeroCopy(file, limiter, 1 << 20, 1 << 20, 2 << 20);
    }

