    public static void assertBitmaskedColumnsNameArray(ColumnFamily cf, List<byte[]> bitmasks, String[] unfilteredColumnNames)
    {
        Collection<IColumn> columns = cf == null ? new TreeSet<IColumn>() : cf.getSortedColumns();
        List<String> L = new ArrayList<String>();
        for (IColumn column : columns)
        {
            L.add(new String(column.name()));
        }

        List<String> names = new ArrayList<String>(unfilteredColumnNames.length);

        names.addAll(Arrays.asList(unfilteredColumnNames));

        if (bitmasks != null && bitmasks.size() > 0)
        {
            List<Predicate> predicates = new ArrayList<Predicate>(bitmasks.size());
            for (final byte[] bitmask: bitmasks)
            {
                predicates.add(new Predicate()
                {
                    public boolean evaluate(Object o)
                    {
                        try
                        {
                            return SliceQueryFilter.matchesBitmask(bitmask, o.toString().getBytes("UTF-8"));
                        }
                        catch (UnsupportedEncodingException e)
                        {
                            return false;
                        }
                    }
                });
            }

            CollectionUtils.filter(names, PredicateUtils.anyPredicate(predicates));
        }

        String[] columnNames = names.toArray(new String[0]);
        String[] la = L.toArray(new String[columns.size()]);
        StringBuffer lasb = new StringBuffer();
        for (String l: la)
        {
            lasb.append(l);
            lasb.append(", ");
        }

        assert Arrays.equals(la, columnNames)
                : String.format("Columns [%s(as string: %s)])] is not expected [%s] (bitmasks %s)",
                                ((cf == null) ? "" : cf.getComparator().getColumnsString(columns)),
                                lasb.toString(),
                                StringUtils.join(columnNames, ","),
                                SliceFromReadCommand.getBitmaskDescription(bitmasks));
                                
    }

