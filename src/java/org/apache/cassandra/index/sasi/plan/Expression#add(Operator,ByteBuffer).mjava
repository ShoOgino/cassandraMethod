    public Expression add(Operator op, ByteBuffer value)
    {
        boolean lowerInclusive = false, upperInclusive = false;
        switch (op)
        {
            case EQ:
                lower = new Bound(value, true);
                upper = lower;
                operation = Op.EQ;
                break;

            case NEQ:
                // index expressions are priority sorted
                // and NOT_EQ is the lowest priority, which means that operation type
                // is always going to be set before reaching it in case of RANGE or EQ.
                if (operation == null)
                {
                    operation = Op.NOT_EQ;
                    lower = new Bound(value, true);
                    upper = lower;
                }
                else
                    exclusions.add(value);
                break;

            case LTE:
                upperInclusive = true;
            case LT:
                operation = Op.RANGE;
                upper = new Bound(value, upperInclusive);
                break;

            case GTE:
                lowerInclusive = true;
            case GT:
                operation = Op.RANGE;
                lower = new Bound(value, lowerInclusive);
                break;
        }

        return this;
    }

