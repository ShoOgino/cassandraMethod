    /**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE CLUSTER}.
     */
    public static DescribeStatement<List<Object>> cluster()
    {
        return new DescribeStatement<List<Object>>()
        {
            /**
             * The column index of the cluster name
             */
            private static final int CLUSTER_NAME_INDEX = 0;

            /**
             * The column index of the partitioner name
             */
            private static final int PARTITIONER_NAME_INDEX = 1;

            /**
             * The column index of the snitch class
             */
            private static final int SNITCH_CLASS_INDEX = 2;

            /**
             * The range ownerships index
             */
            private static final int RANGE_OWNERSHIPS_INDEX = 3;

            @Override
            protected Stream<List<Object>> describe(ClientState state, Keyspaces keyspaces)
            {
                List<Object> list = new ArrayList<Object>();
                list.add(DatabaseDescriptor.getClusterName());
                list.add(trimIfPresent(DatabaseDescriptor.getPartitionerName(), "org.apache.cassandra.dht."));
                list.add(trimIfPresent(DatabaseDescriptor.getEndpointSnitch().getClass().getName(),
                                            "org.apache.cassandra.locator."));
 
                String useKs = state.getRawKeyspace();
                if (mustReturnsRangeOwnerships(useKs))
                {
                    list.add(StorageService.instance.getRangeToAddressMap(useKs)
                                                    .entrySet()
                                                    .stream()
                                                    .sorted(Comparator.comparing(Map.Entry::getKey))
                                                    .collect(Collectors.toMap(e -> e.getKey().right.toString(),
                                                                              e -> e.getValue()
                                                                                    .stream()
                                                                                    .map(r -> r.endpoint().toString())
                                                                                    .collect(Collectors.toList()))));
                }
                return Stream.of(list);
            }

            private boolean mustReturnsRangeOwnerships(String useKs)
            {
                return useKs != null && !SchemaConstants.isLocalSystemKeyspace(useKs) && !SchemaConstants.isSystemKeyspace(useKs);
            }

            @Override
            protected List<ColumnSpecification> metadata(ClientState state)
            {
                ImmutableList.Builder<ColumnSpecification> builder = ImmutableList.builder();
                builder.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("cluster", true), UTF8Type.instance),
                                        new ColumnSpecification(KS, CF, new ColumnIdentifier("partitioner", true), UTF8Type.instance),
                                        new ColumnSpecification(KS, CF, new ColumnIdentifier("snitch", true), UTF8Type.instance));

                if (mustReturnsRangeOwnerships(state.getRawKeyspace()))
                    builder.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("range_ownership", true), MapType.getInstance(UTF8Type.instance,
                                                                                                                                   ListType.getInstance(UTF8Type.instance, false), false)));

                return builder.build();
            }

            @Override
            protected List<ByteBuffer> toRow(List<Object> elements, boolean withInternals)
            {
                ImmutableList.Builder<ByteBuffer> builder = ImmutableList.builder(); 

                builder.add(UTF8Type.instance.decompose((String) elements.get(CLUSTER_NAME_INDEX)),
                            UTF8Type.instance.decompose((String) elements.get(PARTITIONER_NAME_INDEX)),
                            UTF8Type.instance.decompose((String) elements.get(SNITCH_CLASS_INDEX)));

                if (elements.size() > 3)
                {
                    MapType<String, List<String>> rangeOwnershipType = MapType.getInstance(UTF8Type.instance,
                                                                                           ListType.getInstance(UTF8Type.instance, false),
                                                                                           false);

                    builder.add(rangeOwnershipType.decompose((Map<String, List<String>>) elements.get(RANGE_OWNERSHIPS_INDEX)));
                }

                return builder.build();
            }

            private String trimIfPresent(String src, String begin)
            {
                if (src.startsWith(begin))
                    return src.substring(begin.length());
                return src;
            }
        };
    }

