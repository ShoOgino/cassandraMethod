        public SASuffixIterator()
        {
            // each element has term index and char position encoded as two 32-bit integers
            // to avoid binary search per suffix while sorting suffix array.
            suffixes = new long[charCount];

            long termIndex = -1, currentTermLength = -1;
            boolean isComplete = false;
            for (int i = 0; i < charCount; i++)
            {
                if (i >= currentTermLength || currentTermLength == -1)
                {
                    Term currentTerm = terms.get((int) ++termIndex);
                    currentTermLength = currentTerm.getPosition() + currentTerm.length();
                    isComplete = true;
                }

                suffixes[i] = (termIndex << 32) | i;
                if (isComplete)
                    suffixes[i] |= (1L << COMPLETE_BIT);

                isComplete = false;
            }

            Primitive.sort(suffixes, (a, b) -> {
                Term aTerm = terms.get((int) (a >>> 32));
                Term bTerm = terms.get((int) (b >>> 32));
                return comparator.compare(aTerm.getSuffix(clearCompleteBit(a) - aTerm.getPosition()),
                                          bTerm.getSuffix(clearCompleteBit(b) - bTerm.getPosition()));
            });
        }

