    public void run(Runnable onFailure, long deadlineNanos)
    {
        try
        {
            long lastEventAt = approxTime.now();
            while ((now = approxTime.now()) < deadlineNanos)
            {
                Event next = events.await(nextMessageId, 100L, MILLISECONDS);
                if (next == null)
                {
                    // decide if we have any messages waiting too long to proceed
                    while (!processingOutOfOrder.isEmpty())
                    {
                        MessageState m = processingOutOfOrder.get(0);
                        if (now - m.lastUpdateNanos > SECONDS.toNanos(10L))
                        {
                            fail("Unreasonably long period spent waiting for out-of-order deser/delivery of received message %d", m.message.id());
                            MessageState v = maybeRemove(m.message.id(), PROCESS);
                            controller.fail(v.message.serializedSize(v.messagingVersion == 0 ? current_version : v.messagingVersion));
                            processingOutOfOrder.remove(0);
                        }
                        else break;
                    }

                    if (sync != null)
                    {
                        // if we have waited 100ms since beginning a sync, with no events, and ANY of our queues are
                        // non-empty, something is probably wrong; however, let's give ourselves a little bit longer

                        boolean done =
                            currentConnection.serializing.isEmpty()
                        &&  currentConnection.arriving.isEmpty()
                        &&  currentConnection.deserializingOnEventLoop.isEmpty()
                        &&  currentConnection.deserializingOffEventLoop.isEmpty()
                        &&  currentConnection.framesInFlight.isEmpty()
                        &&  enqueueing.isEmpty()
                        &&  processingOutOfOrder.isEmpty()
                        &&  messages.isEmpty()
                        &&  controller.inFlight() == 0;

                        //outbound.pendingCount() > 0 ? 5L : 2L
                        if (!done && now - lastEventAt > SECONDS.toNanos(5L))
                        {
                            // TODO: even 2s or 5s are unreasonable periods of time without _any_ movement on a message waiting to arrive
                            //       this seems to happen regularly on MacOS, but we should confirm this does not happen on Linux
                            fail("Unreasonably long period spent waiting for sync (%dms)", NANOSECONDS.toMillis(now - lastEventAt));
                            messages.forEach((k, v) -> {
                                failinfo("%s", v);
                                controller.fail(v.message.serializedSize(v.messagingVersion == 0 ? current_version : v.messagingVersion));
                            });
                            currentConnection.serializing.clear();
                            currentConnection.arriving.clear();
                            currentConnection.deserializingOnEventLoop.clear();
                            currentConnection.deserializingOffEventLoop.clear();
                            enqueueing.clear();
                            processingOutOfOrder.clear();
                            messages.clear();
                            while (!currentConnection.framesInFlight.isEmpty())
                                currentConnection.framesInFlight.poll();
                            done = true;
                        }

                        if (done)
                        {
                            ConnectionUtils.check(outbound)
                                           .pending(0, 0)
                                           .error(outboundErrorCount, outboundErrorBytes)
                                           .submitted(outboundSubmittedCount)
                                           .expired(outboundExpiredCount, outboundExpiredBytes)
                                           .overload(outboundOverloadedCount, outboundOverloadedBytes)
                                           .sent(outboundSentCount, outboundSentBytes)
                                           .check((message, expect, actual) -> fail("%s: expect %d, actual %d", message, expect, actual));

                            sync.onCompletion.run();
                            sync = null;
                        }
                    }
                    continue;
                }
                events.clear(nextMessageId); // TODO: simplify collection if we end up using it exclusively as a queue, as we are now
                lastEventAt = now;

                switch (next.type)
                {
                    case ENQUEUE:
                    {
                        MessageState m;
                        EnqueueMessageEvent e = (EnqueueMessageEvent) next;
                        assert nextMessageId == e.start || nextMessageId == e.end;
                        assert e.message != null;
                        if (nextMessageId == e.start)
                        {
                            if (sync != null)
                                fail("Sync in progress - there should be no messages beginning to enqueue");

                            m = new MessageState(e.message, e.destiny, e.start);
                            messages.put(e.messageId, m);
                            enqueueing.add(m);
                            m.update(e, e.start, now);
                        }
                        else
                        {
                            // warning: enqueueEnd can occur at any time in the future, since it's a different thread;
                            //          it could be arbitrarily paused, long enough even for the messsage to be fully processed
                            m = messages.get(e.messageId);
                            if (m != null)
                                m.enqueueEnd = e.end;
                            outboundSubmittedCount += 1;
                        }
                        break;
                    }
                    case FAILED_OVERLOADED:
                    {
                        // TODO: verify that we could have exceeded our memory limits
                        SimpleMessageEvent e = (SimpleMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = remove(e.messageId, enqueueing, messages);
                        m.require(FAILED_OVERLOADED, this, ENQUEUE);
                        outboundOverloadedBytes += m.message.serializedSize(current_version);
                        outboundOverloadedCount += 1;
                        break;
                    }
                    case FAILED_CLOSING:
                    {
                        // TODO: verify if this is acceptable due to e.g. inbound refusing to process for long enough
                        SimpleMessageEvent e = (SimpleMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = messages.remove(e.messageId); // definitely cannot have been sent (in theory)
                        enqueueing.remove(m);
                        m.require(FAILED_CLOSING, this, ENQUEUE);
                        fail("Invalid discard of %d: connection was closing for too long", m.message.id());
                        break;
                    }
                    case SERIALIZE:
                    {
                        // serialize happens serially, so we can compress the asynchronicity of the above enqueue
                        // into a linear sequence of events we expect to occur on arrival
                        SerializeMessageEvent e = (SerializeMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = get(e);
                        assert m.is(ENQUEUE);
                        m.serialize = e.at;
                        m.messagingVersion = e.messagingVersion;
                        if (current_version != e.messagingVersion)
                            controller.adjust(m.message.serializedSize(current_version), m.message.serializedSize(e.messagingVersion));

                        m.processOnEventLoop = willProcessOnEventLoop(outbound.type(), m.message, e.messagingVersion);
                        m.expiresAtNanos = expiresAtNanos(m.message, e.messagingVersion);
                        int mi = enqueueing.indexOf(m);
                        for (int i = 0 ; i < mi ; ++i)
                        {
                            MessageState pm = enqueueing.get(i);
                            if (pm.enqueueEnd != 0 && pm.enqueueEnd < m.enqueueStart)
                            {
                                fail("Invalid order of events: %s enqueued strictly before %s, but serialized after",
                                     pm, m);
                            }
                        }
                        enqueueing.remove(mi);
                        m.sentOn = currentConnection;
                        currentConnection.serializing.add(m);
                        m.update(e, now);
                        break;
                    }
                    case FINISH_SERIALIZE_LARGE:
                    {
                        // serialize happens serially, so we can compress the asynchronicity of the above enqueue
                        // into a linear sequence of events we expect to occur on arrival
                        SimpleMessageEvent e = (SimpleMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = maybeRemove(e);
                        outboundSentBytes += m.messageSize();
                        outboundSentCount += 1;
                        m.sentOn.serializing.remove(m);
                        m.update(e, now);
                        break;
                    }
                    case FAILED_SERIALIZE:
                    {
                        FailedSerializeEvent e = (FailedSerializeEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = maybeRemove(e);

                        if (outbound.type() == LARGE_MESSAGES)
                            assert e.failure instanceof InvalidSerializedSizeException || e.failure instanceof Connection.IntentionalIOException || e.failure instanceof Connection.IntentionalRuntimeException;
                        else
                            assert e.failure instanceof InvalidSerializedSizeException || e.failure instanceof Connection.IntentionalIOException || e.failure instanceof Connection.IntentionalRuntimeException || e.failure instanceof BufferOverflowException;

                        if (e.bytesWrittenToNetwork == 0) // TODO: use header size
                            messages.remove(m.message.id());

                        InvalidSerializedSizeException ex;
                        if (outbound.type() != LARGE_MESSAGES
                            || !(e.failure instanceof InvalidSerializedSizeException)
                            || ((ex = (InvalidSerializedSizeException) e.failure).expectedSize <= DEFAULT_BUFFER_SIZE && ex.actualSizeAtLeast <= DEFAULT_BUFFER_SIZE)
                            || (ex.expectedSize > DEFAULT_BUFFER_SIZE && ex.actualSizeAtLeast < DEFAULT_BUFFER_SIZE))
                        {
                            assert e.bytesWrittenToNetwork == 0;
                        }

                        m.require(FAILED_SERIALIZE, this, SERIALIZE);
                        m.sentOn.serializing.remove(m);
                        if (m.destiny != Destiny.FAIL_TO_SERIALIZE)
                            fail("%s failed to serialize, but its destiny was to %s", m, m.destiny);
                        outboundErrorBytes += m.messageSize();
                        outboundErrorCount += 1;
                        m.update(e, now);
                        break;
                    }
                    case SEND_FRAME:
                    {
                        FrameEvent e = (FrameEvent) next;
                        assert nextMessageId == e.at;
                        int size = 0;
                        Frame frame = new Frame();
                        MessageState first = currentConnection.serializing.get(0);
                        int messagingVersion = first.messagingVersion;
                        for (int i = 0 ; i < e.messageCount ; ++i)
                        {
                            MessageState m = currentConnection.serializing.get(i);
                            size += m.message.serializedSize(m.messagingVersion);
                            if (m.messagingVersion != messagingVersion)
                            {
                                fail("Invalid sequence of events: %s encoded to same frame as %s",
                                     m, first);
                            }

                            frame.add(m);
                            m.update(e, now);
                            assert !m.doneSend;
                            m.doneSend = true;
                            if (m.doneReceive)
                                messages.remove(m.message.id());
                        }
                        frame.payloadSizeInBytes = e.payloadSizeInBytes;
                        frame.messageCount = e.messageCount;
                        frame.messagingVersion = messagingVersion;
                        currentConnection.framesInFlight.add(frame);
                        currentConnection.serializing.removeFirst(e.messageCount);
                        if (e.payloadSizeInBytes != size)
                            fail("Invalid frame payload size with %s: expected %d, actual %d", first,  size, e.payloadSizeInBytes);
                        break;
                    }
                    case SENT_FRAME:
                    {
                        Frame frame = currentConnection.framesInFlight.supplySendStatus(Frame.Status.SUCCESS);
                        frame.forEach(m -> m.update((SimpleEvent) next, now));

                        outboundSentBytes += frame.payloadSizeInBytes;
                        outboundSentCount += frame.messageCount;
                        break;
                    }
                    case FAILED_FRAME:
                    {
                        // TODO: is it possible for this to be signalled AFTER our reconnect event? probably, in which case this will be wrong
                        // TODO: verify that this was expected
                        Frame frame = currentConnection.framesInFlight.supplySendStatus(Frame.Status.FAILED);
                        frame.forEach(m -> m.update((SimpleEvent) next, now));
                        if (frame.messagingVersion >= VERSION_40)
                        {
                            // the contents cannot be delivered without the whole frame arriving, so clear the contents now
                            clear(frame, messages);
                            currentConnection.framesInFlight.remove(frame);
                        }
                        outboundErrorBytes += frame.payloadSizeInBytes;
                        outboundErrorCount += frame.messageCount;
                        break;
                    }
                    case ARRIVE:
                    {
                        SimpleMessageEventWithSize e = (SimpleMessageEventWithSize) next;
                        assert nextMessageId == e.at;
                        MessageState m = get(e);

                        m.arrive = e.at;
                        if (e.messageSize != m.messageSize())
                            fail("onArrived with invalid size for %s: %d vs %d", m, e.messageSize, m.messageSize());

                        if (outbound.type() == LARGE_MESSAGES)
                        {
                            m.require(ARRIVE, this, SERIALIZE, FAILED_SERIALIZE, FINISH_SERIALIZE_LARGE);
                        }
                        else
                        {
                            if (!m.is(SEND_FRAME, SENT_FRAME))
                            {
                                fail("Invalid order of events: %s arrived before being sent in a frame", m);
                                break;
                            }

                            int fi = -1, mi = -1;
                            while (fi + 1 < m.sentOn.framesInFlight.size() && mi < 0)
                                mi = m.sentOn.framesInFlight.get(++fi).indexOf(m);

                            if (fi == m.sentOn.framesInFlight.size())
                            {
                                fail("Invalid state: %s, but no frame in flight was found to contain it", m);
                                break;
                            }

                            if (fi > 0)
                            {
                                // we have skipped over some frames, meaning these have either failed (and we know it)
                                // or we have not yet heard about them and they have presumably failed, or something
                                // has gone wrong
                                fail("BEGIN: Successfully sent frames were not delivered");
                                for (int i = 0 ; i < fi ; ++i)
                                {
                                    Frame skip = m.sentOn.framesInFlight.get(i);
                                    skip.receiveStatus = Frame.Status.FAILED;
                                    if (skip.sendStatus == Frame.Status.SUCCESS)
                                    {
                                        failinfo("Frame %s", skip);
                                        for (int j = 0 ; j < skip.size() ; ++j)
                                            failinfo("Containing: %s", skip.get(j));
                                    }
                                    clear(skip, messages);
                                }
                                m.sentOn.framesInFlight.removeFirst(fi);
                                failinfo("END: Successfully sent frames were not delivered");
                            }

                            Frame frame = m.sentOn.framesInFlight.get(0);
                            for (int i = 0; i < mi; ++i)
                                fail("Invalid order of events: %s serialized strictly before %s, but arrived after", frame.get(i), m);

                            frame.remove(mi);
                            if (frame.isEmpty())
                                m.sentOn.framesInFlight.poll();
                        }
                        m.sentOn.arriving.add(m);
                        m.update(e, now);
                        break;
                    }
                    case DESERIALIZE:
                    {
                        // deserialize may happen in parallel for large messages, but in sequence for small messages
                        // we currently require that this event be issued before any possible error is thrown
                        SimpleMessageEvent e = (SimpleMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = get(e);
                        m.require(DESERIALIZE, this, ARRIVE);
                        m.deserialize = e.at;
                        // deserialize may be off-loaded, so we can only impose meaningful ordering constraints
                        // on those messages we know to have been processed on the event loop
                        int mi = m.sentOn.arriving.indexOf(m);
                        if (m.processOnEventLoop)
                        {
                            for (int i = 0 ; i < mi ; ++i)
                            {
                                MessageState pm = m.sentOn.arriving.get(i);
                                if (pm.processOnEventLoop)
                                {
                                    fail("Invalid order of events: %d (%d, %d) arrived strictly before %d (%d, %d), but deserialized after",
                                         pm.message.id(), pm.arrive, pm.deserialize, m.message.id(), m.arrive, m.deserialize);
                                }
                            }
                            m.sentOn.deserializingOnEventLoop.add(m);
                        }
                        else
                        {
                            m.sentOn.deserializingOffEventLoop.add(m);
                        }
                        m.sentOn.arriving.remove(mi);
                        m.update(e, now);
                        break;
                    }
                    case CLOSED_BEFORE_ARRIVAL:
                    {
                        SimpleMessageEventWithSize e = (SimpleMessageEventWithSize) next;
                        assert nextMessageId == e.at;
                        MessageState m = maybeRemove(e);

                        if (e.messageSize != m.messageSize())
                            fail("onClosedBeforeArrival has invalid size for %s: %d vs %d", m, e.messageSize, m.messageSize());

                        m.sentOn.deserializingOffEventLoop.remove(m);
                        if (m.destiny == Destiny.FAIL_TO_SERIALIZE && outbound.type() == LARGE_MESSAGES)
                            break;
                        fail("%s closed before arrival, but its destiny was to %s", m, m.destiny);
                        break;
                    }
                    case FAILED_DESERIALIZE:
                    {
                        SimpleMessageEventWithSize e = (SimpleMessageEventWithSize) next;
                        assert nextMessageId == e.at;
                        MessageState m = maybeRemove(e);

                        if (e.messageSize != m.messageSize())
                            fail("onFailedDeserialize has invalid size for %s: %d vs %d", m, e.messageSize, m.messageSize());
                        m.require(FAILED_DESERIALIZE, this, ARRIVE, DESERIALIZE);
                        (m.processOnEventLoop ? m.sentOn.deserializingOnEventLoop : m.sentOn.deserializingOffEventLoop).remove(m);
                        switch (m.destiny)
                        {
                            case FAIL_TO_DESERIALIZE:
                                break;
                            case FAIL_TO_SERIALIZE:
                                if (outbound.type() == LARGE_MESSAGES)
                                    break;
                            default:
                                fail("%s failed to deserialize, but its destiny was to %s", m, m.destiny);
                        }
                        break;
                    }
                    case PROCESS:
                    {
                        ProcessMessageEvent e = (ProcessMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m = maybeRemove(e);

                        m.require(PROCESS, this, DESERIALIZE);
                        if (!Arrays.equals((byte[]) e.message.payload, (byte[]) m.message.payload))
                        {
                            fail("Invalid message payload for %d: %s supplied by processor, but %s implied by original message and messaging version",
                                 e.messageId, Arrays.toString((byte[]) e.message.payload), Arrays.toString((byte[]) m.message.payload));
                        }

                        if (m.processOutOfOrder)
                        {
                            assert !m.processOnEventLoop; // will have already been reported small (processOnEventLoop) messages
                            processingOutOfOrder.remove(m);
                        }
                        else if (m.processOnEventLoop)
                        {
                            // we can expect that processing happens sequentially in this case, more specifically
                            // we can actually expect that this event will occur _immediately_ after the deserialize event
                            // so that we have exactly one mess
                            // c
                            int mi = m.sentOn.deserializingOnEventLoop.indexOf(m);
                            for (int i = 0 ; i < mi ; ++i)
                            {
                                MessageState pm = m.sentOn.deserializingOnEventLoop.get(i);
                                fail("Invalid order of events: %s deserialized strictly before %s, but processed after",
                                     pm, m);
                            }
                            clearFirst(mi, m.sentOn.deserializingOnEventLoop, messages);
                            m.sentOn.deserializingOnEventLoop.poll();
                        }
                        else
                        {
                            int mi = m.sentOn.deserializingOffEventLoop.indexOf(m);
                            // process may be off-loaded, so we can only impose meaningful ordering constraints
                            // on those messages we know to have been processed on the event loop
                            for (int i = 0 ; i < mi ; ++i)
                            {
                                MessageState pm = m.sentOn.deserializingOffEventLoop.get(i);
                                pm.processOutOfOrder = true;
                                processingOutOfOrder.add(pm);
                            }
                            m.sentOn.deserializingOffEventLoop.removeFirst(mi + 1);
                        }
                        // this message has been fully validated
                        break;
                    }
                    case FAILED_EXPIRED_ON_SEND:
                    case FAILED_EXPIRED_ON_RECEIVE:
                    {
                        ExpiredMessageEvent e = (ExpiredMessageEvent) next;
                        assert nextMessageId == e.at;
                        MessageState m;
                        switch (e.expirationType)
                        {
                            case ON_SENT:
                            {
                                m = messages.remove(e.messageId);
                                m.require(e.type, this, ENQUEUE);
                                outboundExpiredBytes += m.message.serializedSize(current_version);
                                outboundExpiredCount += 1;
                                messages.remove(m.message.id());
                                break;
                            }
                            case ON_ARRIVED:
                                m = maybeRemove(e);
                                if (!m.is(ARRIVE))
                                {
                                    if (outbound.type() != LARGE_MESSAGES) m.require(e.type, this, SEND_FRAME, SENT_FRAME, FAILED_FRAME);
                                    else m.require(e.type, this, SERIALIZE, FAILED_SERIALIZE, FINISH_SERIALIZE_LARGE);
                                }
                                break;
                            case ON_PROCESSED:
                                m = maybeRemove(e);
                                m.require(e.type, this, DESERIALIZE);
                                break;
                            default:
                                throw new IllegalStateException();
                        }

                        now = System.nanoTime();
                        if (m.expiresAtNanos > now)
                        {
                            // we fix the conversion AlmostSameTime for an entire run, which should suffice to guarantee these comparisons
                            fail("Invalid expiry of %d: expiry should occur in %dms; event believes %dms have elapsed, and %dms have actually elapsed", m.message.id(),
                                 NANOSECONDS.toMillis(m.expiresAtNanos - m.message.createdAtNanos()),
                                 e.timeUnit.toMillis(e.timeElapsed),
                                 NANOSECONDS.toMillis(now - m.message.createdAtNanos()));
                        }

                        switch (e.expirationType)
                        {
                            case ON_SENT:
                                enqueueing.remove(m);
                                break;
                            case ON_ARRIVED:
                                if (m.is(ARRIVE))
                                    m.sentOn.arriving.remove(m);
                                switch (m.sendState.type)
                                {
                                    case SEND_FRAME:
                                    case SENT_FRAME:
                                    case FAILED_FRAME:
                                        // TODO: this should be robust to re-ordering; should perhaps extract a common method
                                        m.sentOn.framesInFlight.get(0).remove(m);
                                        if (m.sentOn.framesInFlight.get(0).isEmpty())
                                            m.sentOn.framesInFlight.poll();
                                        break;
                                }
                                break;
                            case ON_PROCESSED:
                                (m.processOnEventLoop ? m.sentOn.deserializingOnEventLoop : m.sentOn.deserializingOffEventLoop).remove(m);
                                break;
                        }

                        if (m.messagingVersion != 0 && e.messageSize != m.messageSize())
                            fail("onExpired %s with invalid size for %s: %d vs %d", e.expirationType, m, e.messageSize, m.messageSize());

                        break;
                    }
                    case CONTROLLER_UPDATE:
                    {
                        break;
                    }
                    case CONNECT_OUTBOUND:
                    {
                        ConnectOutboundEvent e = (ConnectOutboundEvent) next;
                        currentConnection = new ConnectionState(connectionCounter++, e.messagingVersion);
                        break;
                    }
                    case SYNC:
                    {
                        sync = (SyncEvent) next;
                        break;
                    }
                    default:
                        throw new IllegalStateException();
                }
                ++nextMessageId;
            }
        }
        catch (InterruptedException e)
        {
        }
        catch (Throwable t)
        {
            logger.error("Unexpected error:", t);
            onFailure.run();
        }
    }

