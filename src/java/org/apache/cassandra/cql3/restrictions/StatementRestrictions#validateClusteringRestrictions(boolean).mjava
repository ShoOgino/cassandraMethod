    /**
     * Validates whether or not restrictions are allowed for execution when secondary index is not used.
     */
    public final void validateClusteringRestrictions(boolean hasQueriableIndex)
    {
        assert clusteringColumnsRestrictions instanceof PrimaryKeyRestrictionSet;

        // If there's a queriable index, filtering will take care of clustering restrictions
        if (hasQueriableIndex)
            return;

        Iterator<Restriction> iter = ((PrimaryKeyRestrictionSet)clusteringColumnsRestrictions).iterator();
        Restriction previousRestriction = null;

        while (iter.hasNext())
        {
            Restriction restriction = iter.next();

            if (previousRestriction != null)
            {
                ColumnDefinition lastRestrictionStart = previousRestriction.getFirstColumn();
                ColumnDefinition newRestrictionStart = restriction.getFirstColumn();

                if (previousRestriction.isSlice() && newRestrictionStart.position() > lastRestrictionStart.position())
                    throw invalidRequest("Clustering column \"%s\" cannot be restricted (preceding column \"%s\" is restricted by a non-EQ relation)",
                                         newRestrictionStart.name,
                                         lastRestrictionStart.name);
            }
            previousRestriction = restriction;
        }
    }

