    private static <V1, V2> void testHashCodeAndEquals(int seed, ValueAccessor<V1> accessor1, ValueAccessor<V2> accessor2, Random random)
    {
        byte[] rawBytes = randomBytes(2, 200, random);
        int sliceOffset = random.nextInt(rawBytes.length);
        int sliceSize = random.nextInt(rawBytes.length - sliceOffset);
        V1 value1 = accessor1.slice(accessor1.valueOf(rawBytes), sliceOffset, sliceSize);
        V2 value2 = accessor2.slice(accessor2.valueOf(rawBytes), sliceOffset, sliceSize);

        Assert.assertTrue(ValueAccessor.equals(value1, accessor1, value2, accessor2));

        int hash1 =  accessor1.hashCode(value1);
        int hash2 =  accessor2.hashCode(value2);
        if (hash1 != hash2)
            throw new AssertionError(String.format("%s and %s produced inconsistency hash codes for seed %s (%s != %s)",
                                                   accessor1.getClass().getSimpleName(), accessor2.getClass().getSimpleName(),
                                                   seed, hash1, hash2));

        byte[] array1 = accessor1.toArray(value1);
        byte[] array2 = accessor2.toArray(value2);
        if (!Arrays.equals(array1, array2))
            throw new AssertionError(String.format("%s and %s produced inconsistent byte arrays for seed %s (%s != %s)",
                                                   accessor1.getClass().getSimpleName(), accessor2.getClass().getSimpleName(),
                                                   seed, ByteArrayUtil.bytesToHex(array1), ByteArrayUtil.bytesToHex(array2)));

        ByteBuffer buffer1 = accessor1.toBuffer(value1);
        ByteBuffer buffer2 = accessor2.toBuffer(value2);
        if (!buffer1.equals(buffer2))
            throw new AssertionError(String.format("%s and %s produced inconsistent byte buffers for seed %s (%s != %s)",
                                                   accessor1.getClass().getSimpleName(), accessor2.getClass().getSimpleName(),
                                                   seed, ByteBufferUtil.bytesToHex(buffer1), ByteBufferUtil.bytesToHex(buffer1)));

    }

