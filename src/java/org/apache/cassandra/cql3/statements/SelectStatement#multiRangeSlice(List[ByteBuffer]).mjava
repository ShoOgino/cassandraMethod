    private List<Row> multiRangeSlice(List<ByteBuffer> variables) throws RequestExecutionException, RequestValidationException
    {
        List<Row> rows;
        IFilter filter = makeFilter(variables);
        List<IndexExpression> expressions = getIndexExpressions(variables);

        try
        {
            // The LIMIT provided by the user is the number of CQL row he wants returned.
            // For NamesQueryFilter, this is the number of internal rows returned, since a NamesQueryFilter can only select one CQL row in a given internal row.
            // For SliceQueryFilter however, we want to have getRangeSlice to count the number of columns, not the number of keys. Then
            // SliceQueryFilter.collectReducedColumns will correctly columns having the same composite prefix using ColumnCounter.
            boolean maxIsColumns = filter instanceof SliceQueryFilter;
            rows = StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace(),
                                                                    columnFamily(),
                                                                    null,
                                                                    filter,
                                                                    getKeyBounds(variables),
                                                                    expressions,
                                                                    getLimit(),
                                                                    maxIsColumns,
                                                                    false),
                                              getConsistencyLevel());
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        return rows;
    }

