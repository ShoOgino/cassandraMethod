    @Test
    public void testReconcile()
    {
        Cell left;
        Cell right;
        Cell reconciled;

        ByteBuffer context;

        // tombstone + tombstone
        left  = new BufferDeletedCell(cellname("x"), 1, 1L);
        right = new BufferDeletedCell(cellname("x"), 2, 2L);

        assert left.reconcile(right).timestamp() == right.timestamp();
        assert right.reconcile(left).timestamp() == right.timestamp();

        // tombstone > live
        left  = new BufferDeletedCell(cellname("x"), 1, 2L);
        right = BufferCounterCell.createLocal(cellname("x"), 0L, 1L, Long.MIN_VALUE);

        assert left.reconcile(right) == left;

        // tombstone < live last delete
        left  = new BufferDeletedCell(cellname("x"), 1, 1L);
        right = BufferCounterCell.createLocal(cellname("x"), 0L, 4L, 2L);

        assert left.reconcile(right) == left;

        // tombstone == live last delete
        left  = new BufferDeletedCell(cellname("x"), 1, 2L);
        right = BufferCounterCell.createLocal(cellname("x"), 0L, 4L, 2L);

        assert left.reconcile(right) == left;

        // tombstone > live last delete
        left  = new BufferDeletedCell(cellname("x"), 1, 4L);
        right = BufferCounterCell.createLocal(cellname("x"), 0L, 9L, 1L);

        assert left.reconcile(right) == left;

        // live < tombstone
        left  = BufferCounterCell.createLocal(cellname("x"), 0L, 1L, Long.MIN_VALUE);
        right = new BufferDeletedCell(cellname("x"), 1, 2L);

        assert left.reconcile(right) == right;

        // live last delete > tombstone
        left  = BufferCounterCell.createLocal(cellname("x"), 0L, 4L, 2L);
        right = new BufferDeletedCell(cellname("x"), 1, 1L);

        assert left.reconcile(right) == right;

        // live last delete == tombstone
        left  = BufferCounterCell.createLocal(cellname("x"), 0L, 4L, 2L);
        right = new BufferDeletedCell(cellname("x"), 1, 2L);

        assert left.reconcile(right) == right;

        // live last delete < tombstone
        left  = BufferCounterCell.createLocal(cellname("x"), 0L, 9L, 1L);
        right = new BufferDeletedCell(cellname("x"), 1, 4L);

        assert left.reconcile(right) == right;

        // live < live last delete
        left  = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 2L, 3L), 1L, Long.MIN_VALUE);
        right = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 1L, 1L), 4L, 3L);

        assert left.reconcile(right) == right;

        // live last delete > live
        left  = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 2L, 3L), 6L, 5L);
        right = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 1L, 1L), 4L, 3L);

        assert left.reconcile(right) == left;

        // live + live
        left = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 1L, 1L), 4L, Long.MIN_VALUE);
        right = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(1), 2L, 3L), 1L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterCell)reconciled).total() == 3L;
        assert reconciled.timestamp() == 4L;

        left = reconciled;
        right = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(2), 1L, 5L), 2L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterCell)reconciled).total() == 8L;
        assert reconciled.timestamp() == 4L;

        left = reconciled;
        right = new BufferCounterCell(cellname("x"), cc.createRemote(CounterId.fromInt(2), 2L, 2L), 6L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterCell)reconciled).total() == 5L;
        assert reconciled.timestamp() == 6L;

        context = reconciled.value();
        int hd = 2; // header
        assert hd + 2 * stepLength == context.remaining();

        assert Util.equalsCounterId(CounterId.fromInt(1), context, hd);
        assert 2L == context.getLong(hd + idLength);
        assert 3L == context.getLong(hd + idLength + clockLength);

        assert Util.equalsCounterId(CounterId.fromInt(2), context, hd + stepLength);
        assert 2L == context.getLong(hd + stepLength + idLength);
        assert 2L == context.getLong(hd + stepLength + idLength + clockLength);

        assert ((CounterCell)reconciled).timestampOfLastDelete() == Long.MIN_VALUE;
    }

