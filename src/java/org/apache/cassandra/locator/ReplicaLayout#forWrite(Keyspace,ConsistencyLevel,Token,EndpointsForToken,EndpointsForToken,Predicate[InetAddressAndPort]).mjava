    public static ForToken forWrite(Keyspace keyspace, ConsistencyLevel consistencyLevel, Token token, EndpointsForToken natural, EndpointsForToken pending, Predicate<InetAddressAndPort> isAlive) throws UnavailableException
    {
        if (Endpoints.haveConflicts(natural, pending))
        {
            natural = Endpoints.resolveConflictsInNatural(natural, pending);
            pending = Endpoints.resolveConflictsInPending(natural, pending);
        }

        if (!any(natural, Replica::isTransient) && !any(pending, Replica::isTransient))
        {
            EndpointsForToken selected = Endpoints.concat(natural, pending).filter(r -> isAlive.test(r.endpoint()));
            return new ForToken(keyspace, consistencyLevel, token, natural, pending, selected);
        }

        return forWrite(keyspace, consistencyLevel, token, consistencyLevel.blockForWrite(keyspace, pending), natural, pending, isAlive);
    }

