    @Test
    public void testFunction() throws Exception
    {
        StreamingHistogram hist = new StreamingHistogram(5, 0, 1);
        long[] samples = new long[]{23, 19, 10, 16, 36, 2, 9, 32, 30, 45};

        // add 7 points to histogram of 5 bins
        for (int i = 0; i < 7; i++)
        {
            hist.update(samples[i]);
        }

        // should end up (2,1),(9.5,2),(17.5,2),(23,1),(36,1)
        Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5);
        expected1.put(2.0, 1L);
        expected1.put(9.5, 2L);
        expected1.put(17.5, 2L);
        expected1.put(23.0, 1L);
        expected1.put(36.0, 1L);

        Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator();
        for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
        {
            Map.Entry<Double, Long> entry = expectedItr.next();
            assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
            assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
        }

        // merge test
        StreamingHistogram hist2 = new StreamingHistogram(3, 3, 1);
        for (int i = 7; i < samples.length; i++)
        {
            hist2.update(samples[i]);
        }
        hist.merge(hist2);
        // should end up (2,1),(9.5,2),(19.33,3),(32.67,3),(45,1)
        Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5);
        expected2.put(2.0, 1L);
        expected2.put(9.5, 2L);
        expected2.put(19.33, 3L);
        expected2.put(32.67, 3L);
        expected2.put(45.0, 1L);
        expectedItr = expected2.entrySet().iterator();
        for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
        {
            Map.Entry<Double, Long> entry = expectedItr.next();
            assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
            assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
        }

        // sum test
        assertEquals(3.28, hist.sum(15), 0.01);
        // sum test (b > max(hist))
        assertEquals(10.0, hist.sum(50), 0.01);
    }

