    private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel, long queryStartNanoTime)
    throws WriteTimeoutException
    {
        ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel, queryStartNanoTime);
        MessageOut<Commit> message = new MessageOut<Commit>(MessagingService.Verb.PAXOS_PROPOSE, proposal, Commit.serializer);
        for (InetAddress target : endpoints)
        {
            if (canDoLocalRequest(target))
            {
                StageManager.getStage(MessagingService.verbStages.get(MessagingService.Verb.PAXOS_PROPOSE)).execute(new Runnable()
                {
                    public void run()
                    {
                        try
                        {
                            MessageIn<Boolean> message = MessageIn.create(FBUtilities.getBroadcastAddress(),
                                    ProposeVerbHandler.doPropose(proposal),
                                    Collections.<String, byte[]>emptyMap(),
                                    MessagingService.Verb.INTERNAL_RESPONSE,
                                    MessagingService.current_version);
                            callback.response(message);
                        }
                        catch (Exception ex)
                        {
                            logger.error("Failed paxos propose locally", ex);
                        }
                    }
                });
            }
            else
            {
                MessagingService.instance().sendRR(message, target, callback);
            }
        }
        callback.await();

        if (callback.isSuccessful())
            return true;

        if (timeoutIfPartial && !callback.isFullyRefused())
            throw new WriteTimeoutException(WriteType.CAS, consistencyLevel, callback.getAcceptCount(), requiredParticipants);

        return false;
    }

