    /**
     * Wraps the provided iterator so it logs the returned atoms for debugging purposes.
     * <p>
     * Note that this is only meant for debugging as this can log a very large amount of
     * logging at INFO.
     */
    public static UnfilteredRowIterator loggingIterator(UnfilteredRowIterator iterator, final String id, final boolean fullDetails)
    {
        CFMetaData metadata = iterator.metadata();
        logger.info("[{}] Logging iterator on {}.{}, partition key={}, reversed={}, deletion={}",
                    id,
                    metadata.ksName,
                    metadata.cfName,
                    metadata.getKeyValidator().getString(iterator.partitionKey().getKey()),
                    iterator.isReverseOrder(),
                    iterator.partitionLevelDeletion().markedForDeleteAt());

        return new WrappingUnfilteredRowIterator(iterator)
        {
            @Override
            public Row staticRow()
            {
                Row row = super.staticRow();
                if (!row.isEmpty())
                    logger.info("[{}] {}", id, row.toString(metadata(), fullDetails));
                return row;
            }

            @Override
            public Unfiltered next()
            {
                Unfiltered next = super.next();
                if (next.kind() == Unfiltered.Kind.ROW)
                    logger.info("[{}] {}", id, ((Row)next).toString(metadata(), fullDetails));
                else
                    logger.info("[{}] {}", id, ((RangeTombstoneMarker)next).toString(metadata()));
                return next;
            }
        };
    }

