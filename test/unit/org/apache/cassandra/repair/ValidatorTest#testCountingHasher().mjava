    @Test
    public void testCountingHasher()
    {
        Hasher [] hashers = new Hasher[] {new Validator.CountingHasher(), Validator.CountingHasher.hashFunctions[0].newHasher(), Validator.CountingHasher.hashFunctions[1].newHasher() };
        byte [] random = UUIDGen.getTimeUUIDBytes();

        // call all overloaded methods:
        for (Hasher hasher : hashers)
        {
            hasher.putByte((byte) 33)
                  .putBytes(random)
                  .putBytes(ByteBuffer.wrap(random))
                  .putBytes(random, 0, 3)
                  .putChar('a')
                  .putBoolean(false)
                  .putDouble(3.3)
                  .putInt(77)
                  .putFloat(99)
                  .putLong(101)
                  .putShort((short) 23);
        }

        long len = Byte.BYTES
                   + random.length * 2 // both the byte[] and the ByteBuffer
                   + 3 // 3 bytes from the random byte[]
                   + Character.BYTES
                   + Byte.BYTES
                   + Double.BYTES
                   + Integer.BYTES
                   + Float.BYTES
                   + Long.BYTES
                   + Short.BYTES;

        byte [] h = hashers[0].hash().asBytes();
        assertTrue(Arrays.equals(hashers[1].hash().asBytes(), Arrays.copyOfRange(h, 0, 16)));
        assertTrue(Arrays.equals(hashers[2].hash().asBytes(), Arrays.copyOfRange(h, 16, 32)));
        assertEquals(len, ((Validator.CountingHasher)hashers[0]).getCount());
    }

