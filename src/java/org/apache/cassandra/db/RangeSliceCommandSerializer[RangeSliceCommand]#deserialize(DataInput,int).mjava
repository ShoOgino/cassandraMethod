    public RangeSliceCommand deserialize(DataInput dis, int version) throws IOException
    {
        String keyspace = dis.readUTF();
        String columnFamily = dis.readUTF();

        int scLength = dis.readInt();
        ByteBuffer superColumn = null;
        if (scLength > 0)
        {
            byte[] buf = new byte[scLength];
            dis.readFully(buf);
            superColumn = ByteBuffer.wrap(buf);
        }

        SlicePredicate pred = new SlicePredicate();
        if (version < MessagingService.VERSION_12)
        {
            FBUtilities.deserialize(new TDeserializer(new TBinaryProtocol.Factory()), pred, dis);
        }
        else
        {
            int type = dis.readByte();
            if (type == 0)
            {
                pred.slice_range = new SliceRange(ByteBufferUtil.readWithShortLength(dis),
                                                  ByteBufferUtil.readWithShortLength(dis),
                                                  dis.readBoolean(),
                                                  dis.readInt());
            }
            else
            {
                assert type == 1;
                int count = dis.readInt();
                List<ByteBuffer> columns = new ArrayList<ByteBuffer>(count);
                for (int i = 0; i < count; i++)
                    columns.add(ByteBufferUtil.readWithShortLength(dis));
                pred.column_names = columns;
            }
        }

        List<IndexExpression> rowFilter = null;
        if (version >= MessagingService.VERSION_11)
        {
            int filterCount = dis.readInt();
            rowFilter = new ArrayList<IndexExpression>(filterCount);
            for (int i = 0; i < filterCount; i++)
            {
                IndexExpression expr;
                if (version < MessagingService.VERSION_12)
                {
                    expr = new IndexExpression();
                    FBUtilities.deserialize(new TDeserializer(new TBinaryProtocol.Factory()), expr, dis);
                }
                else
                {
                    expr = new IndexExpression(ByteBufferUtil.readWithShortLength(dis),
                                               IndexOperator.findByValue(dis.readInt()),
                                               ByteBufferUtil.readWithShortLength(dis));
                }
                rowFilter.add(expr);
            }
        }
        AbstractBounds<RowPosition> range = AbstractBounds.serializer.deserialize(dis, version).toRowBounds();

        int maxResults = dis.readInt();
        boolean maxIsColumns = false;
        boolean isPaging = false;
        if (version >= MessagingService.VERSION_11)
        {
            maxIsColumns = dis.readBoolean();
            isPaging = dis.readBoolean();
        }
        return new RangeSliceCommand(keyspace, columnFamily, superColumn, pred, range, rowFilter, maxResults, maxIsColumns, isPaging);
    }

