    private Message.Request parseLine(String line)
    {
        Splitter splitter = Splitter.on(' ').trimResults().omitEmptyStrings();
        Iterator<String> iter = splitter.split(line).iterator();
        if (!iter.hasNext())
            return null;
        String msgType = iter.next().toUpperCase();
        if (msgType.equals("STARTUP"))
        {
            Map<String, String> options = new HashMap<String, String>();
            options.put(StartupMessage.CQL_VERSION, "3.0.0");
            Compressor compressor = null;
            ChecksumType checksumType = null;
            while (iter.hasNext())
            {
               String next = iter.next().toLowerCase();
               switch (next)
               {
                   case "snappy": {
                       if (options.containsKey(StartupMessage.COMPRESSION))
                           throw new RuntimeException("Multiple compression types supplied");
                       options.put(StartupMessage.COMPRESSION, "snappy");
                       compressor = SnappyCompressor.INSTANCE;
                       break;
                   }
                   case "lz4": {
                       if (options.containsKey(StartupMessage.COMPRESSION))
                           throw new RuntimeException("Multiple compression types supplied");
                       options.put(StartupMessage.COMPRESSION, "lz4");
                       compressor = LZ4Compressor.INSTANCE;
                       break;
                   }
                   case "crc32": {
                       if (options.containsKey(StartupMessage.CHECKSUM))
                           throw new RuntimeException("Multiple checksum types supplied");
                       options.put(StartupMessage.CHECKSUM, ChecksumType.CRC32.name());
                       checksumType = ChecksumType.CRC32;
                       break;
                   }
                   case "adler32": {
                       if (options.containsKey(StartupMessage.CHECKSUM))
                           throw new RuntimeException("Multiple checksum types supplied");
                       options.put(StartupMessage.CHECKSUM, ChecksumType.Adler32.name());
                       checksumType = ChecksumType.Adler32;
                       break;
                   }
               }
            }

            if (checksumType == null)
            {
               if (compressor != null)
               {
                   connection.setTransformer(CompressingTransformer.getTransformer(compressor));
               }
            }
            else
            {
                connection.setTransformer(ChecksummingTransformer.getTransformer(checksumType, compressor));
            }

            return new StartupMessage(options);
        }
        else if (msgType.equals("QUERY"))
        {
            line = line.substring(6);
            // Ugly hack to allow setting a page size, but that's playground code anyway
            String query = line;
            int pageSize = -1;
            if (line.matches(".+ !\\d+$"))
            {
                int idx = line.lastIndexOf('!');
                query = line.substring(0, idx-1);
                try
                {
                    pageSize = Integer.parseInt(line.substring(idx+1, line.length()));
                }
                catch (NumberFormatException e)
                {
                    return null;
                }
            }
            return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null, version, null));
        }
        else if (msgType.equals("PREPARE"))
        {
            String query = line.substring(8);
            return new PrepareMessage(query, null);
        }
        else if (msgType.equals("EXECUTE"))
        {
            try
            {
                byte[] preparedStatementId = Hex.hexToBytes(iter.next());
                byte[] resultMetadataId = Hex.hexToBytes(iter.next());

                List<ByteBuffer> values = new ArrayList<ByteBuffer>();
                while(iter.hasNext())
                {
                    String next = iter.next();
                    ByteBuffer bb;
                    try
                    {
                        int v = Integer.parseInt(next);
                        bb = Int32Type.instance.decompose(v);
                    }
                    catch (NumberFormatException e)
                    {
                        bb = UTF8Type.instance.decompose(next);
                    }
                    values.add(bb);
                }
                return new ExecuteMessage(MD5Digest.wrap(preparedStatementId), MD5Digest.wrap(resultMetadataId), QueryOptions.forInternalCalls(ConsistencyLevel.ONE, values));
            }
            catch (Exception e)
            {
                return null;
            }
        }
        else if (msgType.equals("OPTIONS"))
        {
            return new OptionsMessage();
        }
        else if (msgType.equals("AUTHENTICATE"))
        {
            Map<String, String> credentials = readCredentials(iter);
            if(!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY))
            {
                System.err.println("[ERROR] Authentication requires both 'username' and 'password'");
                return null;
            }
            return new AuthResponse(encodeCredentialsForSasl(credentials));
        }
        else if (msgType.equals("REGISTER"))
        {
            String type = line.substring(9).toUpperCase();
            try
            {
                return new RegisterMessage(Collections.singletonList(Enum.valueOf(Event.Type.class, type)));
            }
            catch (IllegalArgumentException e)
            {
                System.err.println("[ERROR] Unknown event type: " + type);
                return null;
            }
        }
        return null;
    }

