        /**
         * Return the position of the given key from the block index.
         *
         * @param key the key whose offset is to be extracted from the current block index
         */
        public long getPositionFromBlockIndex(String key) throws IOException
        {
            long position = -1L;
            /* note the beginning of the block index */
            long blockIndexPosition = file_.getFilePointer();
            /* read the block key. */
            String blockIndexKey = file_.readUTF();
            if (!blockIndexKey.equals(SSTable.blockIndexKey_))
                throw new IOException("Unexpected position to be reading the block index from.");
            /* read the size of the block index */
            int size = file_.readInt();

            /* Read the entire block index. */
            byte[] bytes = new byte[size];
            file_.readFully(bytes);

            DataInputBuffer bufIn = new DataInputBuffer();
            bufIn.reset(bytes, bytes.length);
            /* Number of keys in the block. */
            int keys = bufIn.readInt();
            for (int i = 0; i < keys; ++i)
            {
                String keyInBlock = bufIn.readUTF();
                if (keyInBlock.equals(key))
                {
                    position = bufIn.readLong();
                    break;
                }
                else
                {
                    /*
                     * This is not the key we are looking for. So read its position
                     * and the size of the data associated with it. This was strored
                     * as the BlockMetadata.
                    */
                    bufIn.readLong();
                    bufIn.readLong();
                }
            }

            /* we do this because relative position of the key within a block is stored. */
            if (position != -1L)
                position = blockIndexPosition - position;
            return position;
        }

