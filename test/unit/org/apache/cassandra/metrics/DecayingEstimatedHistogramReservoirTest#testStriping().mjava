    @Test
    public void testStriping() throws InterruptedException
    {
        TestClock clock = new TestClock();
        int nStripes = 4;
        DecayingEstimatedHistogramReservoir model = new DecayingEstimatedHistogramReservoir(clock);
        DecayingEstimatedHistogramReservoir test = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION,
                                                                                           DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT,
                                                                                           nStripes,
                                                                                           clock);

        long seed = System.nanoTime();
        System.out.println("DecayingEstimatedHistogramReservoirTest#testStriping.seed = " + seed);
        Random valGen = new Random(seed);
        ExecutorService executors = Executors.newFixedThreadPool(nStripes * 2);
        for (int i = 0; i < 1_000_000; i++)
        {
            long value = Math.abs(valGen.nextInt());
            executors.submit(() -> {
                model.update(value);
                LockSupport.parkNanos(2);
                test.update(value);
            });
        }

        executors.shutdown();
        executors.awaitTermination(10, TimeUnit.SECONDS);

        Snapshot modelSnapshot = model.getSnapshot();
        Snapshot testSnapshot = test.getSnapshot();

        assertEquals(modelSnapshot.getMean(), testSnapshot.getMean(), DOUBLE_ASSERT_DELTA);
        assertEquals(modelSnapshot.getMin(), testSnapshot.getMin(), DOUBLE_ASSERT_DELTA);
        assertEquals(modelSnapshot.getMax(), testSnapshot.getMax(), DOUBLE_ASSERT_DELTA);
        assertEquals(modelSnapshot.getMedian(), testSnapshot.getMedian(), DOUBLE_ASSERT_DELTA);
        for (double i = 0.0; i < 1.0; i += 0.1)
            assertEquals(modelSnapshot.getValue(i), testSnapshot.getValue(i), DOUBLE_ASSERT_DELTA);


        int stripedValues = 0;
        for (int i = model.size(); i < model.size() * model.stripeCount(); i++)
        {
            stripedValues += model.stripedBucketValue(i, true);
        }
        assertTrue("no striping found", stripedValues > 0);
    }

