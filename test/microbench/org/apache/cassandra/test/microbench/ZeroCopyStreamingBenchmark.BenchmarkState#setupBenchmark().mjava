        @Setup
        public void setupBenchmark() throws IOException
        {
            Keyspace keyspace = setupSchemaAndKeySpace();
            store = keyspace.getColumnFamilyStore("Standard1");
            generateData();

            sstable = store.getLiveSSTables().iterator().next();
            session = setupStreamingSessionForTest();
            context = ComponentContext.create(sstable.descriptor);
            blockStreamWriter = new CassandraEntireSSTableStreamWriter(sstable, session, context);

            CapturingNettyChannel blockStreamCaptureChannel = new CapturingNettyChannel(STREAM_SIZE);
            AsyncStreamingOutputPlus out = new AsyncStreamingOutputPlus(blockStreamCaptureChannel);
            blockStreamWriter.write(out);
            serializedBlockStream = blockStreamCaptureChannel.getSerializedStream();
            out.close();

            session.prepareReceiving(new StreamSummary(sstable.metadata().id, 1, serializedBlockStream.readableBytes()));

            CassandraStreamHeader entireSSTableStreamHeader =
                CassandraStreamHeader.builder()
                                     .withSSTableFormat(sstable.descriptor.formatType)
                                     .withSSTableVersion(sstable.descriptor.version)
                                     .withSSTableLevel(0)
                                     .withEstimatedKeys(sstable.estimatedKeys())
                                     .withSections(Collections.emptyList())
                                     .withSerializationHeader(sstable.header.toComponent())
                                     .withComponentManifest(context.manifest())
                                     .isEntireSSTable(true)
                                     .withFirstKey(sstable.first)
                                     .withTableId(sstable.metadata().id)
                                     .build();

            blockStreamReader = new CassandraEntireSSTableStreamReader(new StreamMessageHeader(sstable.metadata().id,
                                                                                               peer, session.planId(), false,
                                                                                               0, 0, 0,
                                                                                               null), entireSSTableStreamHeader, session);

            List<Range<Token>> requestedRanges = Arrays.asList(new Range<>(sstable.first.minValue().getToken(), sstable.last.getToken()));
            CassandraStreamHeader partialSSTableStreamHeader =
            CassandraStreamHeader.builder()
                                 .withSSTableFormat(sstable.descriptor.formatType)
                                 .withSSTableVersion(sstable.descriptor.version)
                                 .withSSTableLevel(0)
                                 .withEstimatedKeys(sstable.estimatedKeys())
                                 .withSections(sstable.getPositionsForRanges(requestedRanges))
                                 .withSerializationHeader(sstable.header.toComponent())
                                 .withTableId(sstable.metadata().id)
                                 .build();

            partialStreamWriter = new CassandraStreamWriter(sstable, partialSSTableStreamHeader, session);

            CapturingNettyChannel partialStreamChannel = new CapturingNettyChannel(STREAM_SIZE);
            partialStreamWriter.write(new AsyncStreamingOutputPlus(partialStreamChannel));
            serializedPartialStream = partialStreamChannel.getSerializedStream();

            partialStreamReader = new CassandraStreamReader(new StreamMessageHeader(sstable.metadata().id,
                                                                                    peer, session.planId(), false,
                                                                                    0, 0, 0,
                                                                                    null),
                                                            partialSSTableStreamHeader, session);
        }

