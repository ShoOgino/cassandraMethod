    // move to the previous key in the tree
    void predecessor()
    {
        Object[] node = currentNode();
        int i = currentIndex();

        if (!isLeaf(node))
        {
            // if we're on a key in a branch, we MUST have a descendant either side of us
            // so we always go down the right-most child until we hit a leaf
            node = (Object[]) node[getBranchKeyEnd(node) + i];
            while (!isLeaf(node))
            {
                i = getBranchKeyEnd(node);
                push(node, i);
                node = (Object[]) node[i * 2];
            }
            push(node, getLeafKeyEnd(node) - 1);
            return;
        }

        // if we haven't reached the beginning of this leaf, just decrement our index and return
        i -= 1;
        if (i >= 0)
        {
            setIndex(i);
            return;
        }

        // we've reached the beginning of this leaf,
        // so go up until we reach something we've not finished visiting
        while (!isRoot())
        {
            pop();
            i = currentIndex() - 1;
            if (i >= 0)
            {
                setIndex(i);
                return;
            }
        }

        // we've visited the last key in the root node, so we're done
        setIndex(-1);
    }

