        private static boolean collectionSatisfies(ColumnDefinition def, ColumnFamily data, Composite prefix, IndexExpression expr)
        {
            assert def.type.isCollection() && def.type.isMultiCell();
            CollectionType type = (CollectionType)def.type;

            if (expr.isContains())
            {
                // get a slice of the collection cells
                Iterator<Cell> iter = data.iterator(new ColumnSlice[]{ data.getComparator().create(prefix, def).slice() });
                while (iter.hasNext())
                {
                    Cell cell = iter.next();
                    if (type.kind == CollectionType.Kind.SET)
                    {
                        if (type.nameComparator().compare(cell.name().collectionElement(), expr.value) == 0)
                            return true;
                    }
                    else
                    {
                        if (type.valueComparator().compare(cell.value(), expr.value) == 0)
                            return true;
                    }
                }

                return false;
            }

            assert type.kind == CollectionType.Kind.MAP;
            if (expr.isContainsKey())
                return data.getColumn(data.getComparator().create(prefix, def, expr.value)) != null;

            Iterator<Cell> iter = data.iterator(new ColumnSlice[]{ data.getComparator().create(prefix, def).slice() });
            ByteBuffer key = CompositeType.extractComponent(expr.value, 0);
            ByteBuffer value = CompositeType.extractComponent(expr.value, 1);
            while (iter.hasNext())
            {
                Cell next = iter.next();
                if (type.nameComparator().compare(next.name().collectionElement(), key) == 0 &&
                    type.valueComparator().compare(next.value(), value) == 0)
                    return true;
            }
            return false;
        }

