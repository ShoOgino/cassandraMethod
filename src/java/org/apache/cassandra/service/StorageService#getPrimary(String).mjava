    /**
     * This method returns the endpoint that is responsible for storing the
     * specified key.
     *
     * @param key - key for which we need to find the endpoint
     * @return value - the endpoint responsible for this key
     */
    public InetAddress getPrimary(String key)
    {
        InetAddress endpoint = FBUtilities.getLocalAddress();
        Token token = partitioner_.getToken(key);
        List tokens = new ArrayList<Token>(tokenMetadata_.sortedTokens());
        if (tokens.size() > 0)
        {
            int index = Collections.binarySearch(tokens, token);
            if (index >= 0)
            {
                /*
                 * retrieve the endpoint based on the token at this index in the
                 * tokens list
                 */
                endpoint = tokenMetadata_.getEndPoint((Token) tokens.get(index));
            }
            else
            {
                index = (index + 1) * (-1);
                if (index < tokens.size())
                    endpoint = tokenMetadata_.getEndPoint((Token) tokens.get(index));
                else
                    endpoint = tokenMetadata_.getEndPoint((Token) tokens.get(0));
            }
        }
        return endpoint;
    }

