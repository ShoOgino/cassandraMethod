    private void runMergeOldShards(Allocator allocator)
    {
        long now = System.currentTimeMillis();
        NodeId id1 = NodeId.fromInt(1);
        NodeId id3 = NodeId.fromInt(3);
        List<NodeId.NodeIdRecord> records = new ArrayList<NodeId.NodeIdRecord>();
        records.add(new NodeId.NodeIdRecord(id1, 2L));
        records.add(new NodeId.NodeIdRecord(id3, 4L));

        // Destination of merge is a delta
        ContextState ctx = ContextState.allocate(5, 2, allocator);
        ctx.writeElement(id1, 1L, 1L);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L, true);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);
        ctx.writeElement(NodeId.fromInt(5), 7L, 3L, true);

        ByteBuffer merger = cc.computeOldShardMerger(ctx.context, records);
        ContextState m = new ContextState(merger);

        assert m.getNodeId().equals(id1);
        assert m.getClock() <= -now;
        assert m.getCount() == 0;
        m.moveToNext();
        assert m.getNodeId().equals(id3);
        assert m.getClock() == 4L;
        assert m.getCount() == 1L;
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger, allocator));

        // Source of merge is a delta
        ctx = ContextState.allocate(4, 1, allocator);
        ctx.writeElement(id1, 1L, 1L, true);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger, allocator));

        // source and destination of merge are deltas
        ctx = ContextState.allocate(4, 2, allocator);
        ctx.writeElement(id1, 1L, 1L, true);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L, true);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger, allocator));

        // none of source and destination of merge are deltas
        ctx = ContextState.allocate(4, 0, allocator);
        ctx.writeElement(id1, 1L, 1L);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger, allocator));
    }

