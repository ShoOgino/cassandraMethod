    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                this.success = new ArrayList<CfSplit>(_list187.size);
                for (int _i188 = 0; _i188 < _list187.size; ++_i188)
                {
                  CfSplit _elem189; // required
                  _elem189 = new CfSplit();
                  _elem189.read(iprot);
                  this.success.add(_elem189);
                }
                iprot.readListEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

