    public column_t get_column(String tablename, String key, String columnFamily_column) throws CassandraException,TException
    {
		try
		{
	        String[] values = RowMutation.getColumnAndColumnFamily(columnFamily_column);
			ColumnFamily cfamily = readColumnFamily(new ReadCommand(tablename, key, columnFamily_column, -1, Integer.MAX_VALUE));
			if (cfamily == null)
			{
				logger_.info("ERROR ColumnFamily  is missing.....: "
							+"   key:" + key
							+ "  ColumnFamily:" + values[0]);
				throw new CassandraException("Either the key " + key + " is not present or the columns requested" + columnFamily_column + "are not present.");
			}
			Collection<IColumn> columns = null;
			if( values.length > 2 )
			{
				// this is the super column case 
				IColumn column = cfamily.getColumn(values[1]);
				if(column != null)
					columns = column.getSubColumns();
			}
			else
			{
				columns = cfamily.getAllColumns();
			}
			if (columns == null || columns.size() == 0)
			{
				logger_	.info("ERROR Columns are missing.....: "
							   + "   key:" + key
								+ "  ColumnFamily:" + values[0]);
				throw new CassandraException("ERROR Columns are missing.....: " + "   key:" + key + "  ColumnFamily:" + values[0]);
			}

            assert columns.size() == 1;
            IColumn column = columns.iterator().next();
            if (column.isMarkedForDelete())
            {
                return null;
            }
            return new column_t(column.name(), column.value(), column.timestamp());
		}
		catch (Exception ex)
		{
			String exception = LogUtil.throwableToString(ex);
			logger_.info( exception );
			throw new CassandraException(exception);
		}
    }

