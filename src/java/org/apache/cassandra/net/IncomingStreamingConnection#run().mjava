    @Override
    public void run()
    {
        try
        {
            // streaming connections are per-session and have a fixed version.  we can't do anything with a wrong-version stream connection, so drop it.
            if (version != StreamMessage.CURRENT_VERSION)
                throw new IOException(String.format("Received stream using protocol version %d (my version %d). Terminating connection", version, MessagingService.current_version));

            DataInput input = new DataInputStream(socket.getInputStream());
            StreamInitMessage init = StreamInitMessage.serializer.deserialize(input, version);

            // We will use the current socket to incoming stream. So if the other side is the
            // stream initiator, we must first create an outgoing stream, after which real streaming
            // will start. If we were the initiator however, this socket will just be our incoming
            // stream, everything is setup and we can initiate real streaming by sending the prepare message.
            // Note: we cannot use the same socket for incoming and outgoing streams because we want to
            // parallelize said streams and the socket is blocking, so we might deadlock.
            if (init.sentByInitiator)
            {
                StreamResultFuture.initReceivingSide(init.planId, init.description, init.from, socket, version);
            }
            else
            {
                StreamResultFuture stream = StreamManager.instance.getStream(init.planId);
                if (stream == null)
                {
                    // This should not happen. All we can do is close the socket to inform the other side, but that's a bug.
                    logger.error("Got StreamInit message for a stream we are supposed to be the initiator of, but stream not found.");
                    socket.close();
                    return;
                }
                // We're fully setup for this session, start the actual streaming
                stream.startStreaming(init.from, socket, version);
            }
        }
        catch (IOException e)
        {
            logger.debug("IOException reading from socket; closing", e);
            try
            {
                socket.close();
            }
            catch (IOException e2)
            {
                logger.debug("error closing socket", e2);
            }
        }
    }

