    private void setup() throws IOException, TTransportException
    {
        int listenPort = DatabaseDescriptor.getThriftPort();
        
        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler()
        {
            public void uncaughtException(Thread t, Throwable e)
            {
                logger.error("Fatal exception in thread " + t, e);
            }
        });
        
        CassandraServer peerStorageServer = new CassandraServer();
        peerStorageServer.start();
        Cassandra.Processor processor = new Cassandra.Processor(peerStorageServer);

        // Transport
        TServerSocket tServerSocket =  null;
        try
        {
            // Make server socket
            ServerSocket serverSocket = new ServerSocket();
            // Prevent 2MSL delay problem on server restarts
            serverSocket.setReuseAddress(true);
            // Bind to listening port
            serverSocket.bind(new InetSocketAddress(DatabaseDescriptor.getListenAddress(), listenPort));
            tServerSocket =  new TServerSocket(serverSocket);
        }
        catch (IOException ioe)
        {
            throw new TTransportException("Could not create ServerSocket on address "
                    + DatabaseDescriptor.getListenAddress() + ".");
        }

        // Protocol factory
        TProtocolFactory tProtocolFactory = new TBinaryProtocol.Factory();

        // ThreadPool Server
        TThreadPoolServer.Options options = new TThreadPoolServer.Options();
        options.minWorkerThreads = 64;
        serverEngine = new TThreadPoolServer(new TProcessorFactory(processor),
                                             tServerSocket,
                                             new TTransportFactory(),
                                             new TTransportFactory(),
                                             tProtocolFactory,
                                             tProtocolFactory,
                                             options);
    }

