    /**
     * Returns the typed value, serialized to a ByteBuffer.
     * 
     * @return a ByteBuffer of the value.
     * @throws InvalidRequestException if unable to coerce the string to its type.
     */
    public ByteBuffer getByteBuffer() throws InvalidRequestException
    {
        switch (type)
        {
            case STRING:
                return ByteBuffer.wrap(text.getBytes());
            case LONG:
                try
                {
                    return ByteBufferUtil.bytes(Long.parseLong(text));
                }
                catch (NumberFormatException e)
                {
                    throw new InvalidRequestException(text + " is not valid for type long");
                }
            case INTEGER: 
                try
                {
                    return ByteBufferUtil.bytes(Integer.parseInt(text));
                }
                catch (NumberFormatException e)
                {
                    throw new InvalidRequestException(text + " is not valid for type int");
                }
            case UNICODE:
                try
                {
                    return ByteBuffer.wrap(text.getBytes("UTF-8"));
                }
                catch (UnsupportedEncodingException e)
                {
                   throw new RuntimeException(e);
                }
        }
        
        // FIXME: handle scenario that should never happen
        return null;
    }

