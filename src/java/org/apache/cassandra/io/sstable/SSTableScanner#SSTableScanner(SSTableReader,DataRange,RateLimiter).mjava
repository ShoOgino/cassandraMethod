    /**
     * @param sstable SSTable to scan; must not be null
     * @param filter range of data to fetch; must not be null
     * @param limiter background i/o RateLimiter; may be null
     */
    SSTableScanner(SSTableReader sstable, DataRange dataRange, RateLimiter limiter)
    {
        assert sstable != null;

        this.dfile = limiter == null ? sstable.openDataReader() : sstable.openDataReader(limiter);
        this.ifile = sstable.openIndexReader();
        this.sstable = sstable;
        this.dataRange = dataRange;
        this.stopAt = computeStopAt();

        // If we wrap (stopKey == minimum don't count), we'll seek to start *after* having read from beginning till stopAt
        if (dataRange.stopKey().isMinimum(sstable.partitioner) || !dataRange.isWrapAround())
            seekToStart();
    }

