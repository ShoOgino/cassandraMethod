    public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold)
    {
        // skip buckets containing less than minThreshold sstables, and limit other buckets to maxThreshold entries
        List<List<SSTableReader>> prunedBuckets = new ArrayList<List<SSTableReader>>();
        for (List<SSTableReader> bucket : buckets)
        {
            if (bucket.size() < minThreshold)
                continue;

            Collections.sort(bucket, generationComparator);
            List<SSTableReader> prunedBucket = bucket.subList(0, Math.min(bucket.size(), maxThreshold));
            prunedBuckets.add(prunedBucket);
        }
        if (prunedBuckets.isEmpty())
            return Collections.emptyList();
        
        // prefer compacting buckets with smallest average size; that will yield the fastest improvement for read performance
        return Collections.min(prunedBuckets, avgBucketSizeComparator);
    }

