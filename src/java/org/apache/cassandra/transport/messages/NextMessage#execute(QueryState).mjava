    public Message.Response execute(QueryState state)
    {
        try
        {
            if (resultPageSize == 0)
                throw new ProtocolException("The page size cannot be 0");

            /*
             * If we had traced the previous page and we are asked to trace this one,
             * record the previous id to allow linking the trace together.
             */
            UUID previousTracingId = state.getAndResetCurrentTracingSession();

            UUID tracingId = null;
            if (isTracingRequested())
            {
                tracingId = UUIDGen.getTimeUUID();
                state.prepareTracingSession(tracingId);
            }

            if (state.traceNextQuery())
            {
                state.createTracingSession();
                ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
                if (resultPageSize > 0)
                    builder.put("page_size", Integer.toString(resultPageSize));
                if (previousTracingId != null)
                    builder.put("previous_trace", previousTracingId.toString());
                Tracing.instance.begin("Continue paged CQL3 query", builder.build());
            }

            Message.Response response = state.getNextPage(resultPageSize < 0 ? Integer.MAX_VALUE : resultPageSize);

            if (tracingId != null)
                response.setTracingId(tracingId);

            return response;
        }
        catch (Exception e)
        {
            if (!((e instanceof RequestValidationException) || (e instanceof RequestExecutionException)))
                logger.error("Unexpected error during query", e);
            return ErrorMessage.fromException(e);
        }
        finally
        {
            Tracing.instance.stopSession();
            // Trash the current session id if we won't need it anymore
            if (!state.hasPager())
                state.getAndResetCurrentTracingSession();
        }
    }

