    /**
     * Extract the content of the provided {@code ByteBuffer} as a byte array.
     *
     * <p>This method work with any type of {@code ByteBuffer} (direct and non-direct ones), but when
     * the {@code ByteBuffer} is backed by an array, this method will try to avoid copy when possible.
     * As a consequence, changes to the returned byte array may or may not reflect into the initial
     * {@code ByteBuffer}.
     *
     * @param bytes the buffer whose content to extract.
     * @return a byte array with the content of {@code bytes}. That array may be the array backing
     * {@code bytes} if this can avoid a copy.
     */
    public static byte[] getArray(ByteBuffer bytes)
    {
        int length = bytes.remaining();

        if (bytes.hasArray())
        {
            int boff = bytes.arrayOffset() + bytes.position();
            if (boff == 0 && length == bytes.array().length) return bytes.array();
            else return Arrays.copyOfRange(bytes.array(), boff, boff + length);
        }
        // else, DirectByteBuffer.get() is the fastest route
        byte[] array = new byte[length];
        bytes.duplicate().get(array);
        return array;
    }

