    public void start() throws IOException
    {
        storageMetadata_ = SystemTable.initMetadata();
        tcpAddr_ = new EndPoint(DatabaseDescriptor.getStoragePort());
        udpAddr_ = new EndPoint(DatabaseDescriptor.getControlPort());
        isBootstrapMode = !(DatabaseDescriptor.getSeeds().contains(udpAddr_.getHost()) || SystemTable.isBootstrapped());

        /* Listen for application messages */
        MessagingService.instance().listen(tcpAddr_);
        /* Listen for control messages */
        MessagingService.instance().listenUDP(udpAddr_);

        SelectorManager.getSelectorManager().start();
        SelectorManager.getUdpSelectorManager().start();

        StorageLoadBalancer.instance().startBroadcasting();

        // have to start the gossip service before we can see any info on other nodes.  this is necessary
        // for bootstrap to get the load info it needs.
        // (we won't be part of the storage ring though until we add a nodeId to our state, below.)
        Gossiper.instance().register(this);
        Gossiper.instance().start(udpAddr_, storageMetadata_.getGeneration());

        if (isBootstrapMode)
        {
            BootStrapper.startBootstrap(); // handles token update
        }
        else
        {
            tokenMetadata_.update(storageMetadata_.getToken(), StorageService.tcpAddr_, isBootstrapMode);
        }

        // Gossip my token.
        // note that before we do this we've (a) finalized what the token is actually going to be, and
        // (b) added a bootstrap state (done by startBootstrap)
        ApplicationState state = new ApplicationState(StorageService.getPartitioner().getTokenFactory().toString(storageMetadata_.getToken()));
        Gossiper.instance().addApplicationState(StorageService.nodeId_, state);
    }

