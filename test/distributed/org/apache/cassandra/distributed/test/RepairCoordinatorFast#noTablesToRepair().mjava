    @Test(timeout = 1 * 60 * 1000)
    public void noTablesToRepair()
    {
        // index CF currently don't support repair, so they get dropped when listed
        // this is done in this test to cause the keyspace to have 0 tables to repair, which causes repair to no-op
        // early and skip.
        String table = tableName("withindex");
        CLUSTER.schemaChange(format("CREATE TABLE %s.%s (key text, value text, PRIMARY KEY (key))", KEYSPACE, table));
        CLUSTER.schemaChange(format("CREATE INDEX value_%s ON %s.%s (value)", postfix(), KEYSPACE, table));

        long repairExceptions = getRepairExceptions(CLUSTER, 2);
        // if CF has a . in it, it is assumed to be a 2i which rejects repairs
        NodeToolResult result = repair(2, KEYSPACE, table + ".value");
        result.asserts().success();
        if (withNotifications)
        {
            result.asserts()
                  .notificationContains("Empty keyspace")
                  .notificationContains("skipping repair: " + KEYSPACE)
                  // Start notification is ignored since this is checked during setup (aka before start)
                  .notificationContains(ProgressEventType.SUCCESS, "Empty keyspace") // will fail since success isn't returned; only complete
                  .notificationContains(ProgressEventType.COMPLETE, "finished"); // will fail since it doesn't do this
        }

        assertParentRepairNotExist(CLUSTER, KEYSPACE, table + ".value");

        // this is actually a SKIP and not a FAILURE, so shouldn't increment
        Assert.assertEquals(repairExceptions, getRepairExceptions(CLUSTER, 2));
    }

