    /**
     * Create metrics for given cache.
     *
     * @param type Type of Cache to identify metrics.
     * @param cache Cache to measure metrics
     */
    public CacheMissMetrics(String type, final CacheSize cache)
    {
        MetricNameFactory factory = new DefaultNameFactory("Cache", type);

        capacity = Metrics.register(factory.createMetricName("Capacity"), (Gauge<Long>) cache::capacity);
        misses = Metrics.meter(factory.createMetricName("Misses"));
        requests = Metrics.meter(factory.createMetricName("Requests"));
        missLatency = Metrics.timer(factory.createMetricName("MissLatency"));
        hitRate = Metrics.register(factory.createMetricName("HitRate"), new RatioGauge()
        {
            @Override
            public Ratio getRatio()
            {
                long req = requests.getCount();
                long mis = misses.getCount();
                return Ratio.of(req - mis, req);
            }
        });
        oneMinuteHitRate = Metrics.register(factory.createMetricName("OneMinuteHitRate"), new RatioGauge()
        {
            protected Ratio getRatio()
            {
                double req = requests.getOneMinuteRate();
                double mis = misses.getOneMinuteRate();
                return Ratio.of(req - mis, req);
            }
        });
        fiveMinuteHitRate = Metrics.register(factory.createMetricName("FiveMinuteHitRate"), new RatioGauge()
        {
            protected Ratio getRatio()
            {
                double req = requests.getFiveMinuteRate();
                double mis = misses.getFiveMinuteRate();
                return Ratio.of(req - mis, req);
            }
        });
        fifteenMinuteHitRate = Metrics.register(factory.createMetricName("FifteenMinuteHitRate"), new RatioGauge()
        {
            protected Ratio getRatio()
            {
                double req = requests.getFifteenMinuteRate();
                double mis = misses.getFifteenMinuteRate();
                return Ratio.of(req - mis, req);
            }
        });
        size = Metrics.register(factory.createMetricName("Size"), (Gauge<Long>) cache::weightedSize);
        entries = Metrics.register(factory.createMetricName("Entries"), (Gauge<Integer>) cache::size);
    }

