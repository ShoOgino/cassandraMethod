    // same basic semantics as Arrays.binarySearch, but delegates to compare() method to avoid
    // wrapping generic Comparator with support for Special +/- infinity sentinels
    static <V> int find(Comparator<V> comparator, Object key, Object[] a, final int fromIndex, final int toIndex)
    {
        // attempt to terminate quickly by checking the first element,
        // as many uses of this class will (probably) be updating identical sets
        if (fromIndex >= toIndex)
            return -(fromIndex + 1);

        int c = compare(comparator, key, a[fromIndex]);
        if (c <= 0)
        {
            if (c == 0)
                return fromIndex;
            else
                return -(fromIndex + 1);
        }

        int low = fromIndex + 1;
        int high = toIndex - 1;

        while (low <= high)
        {
            int mid = (low + high) / 2;
            int cmp = compare(comparator, key, a[mid]);

            if (cmp > 0)
                low = mid + 1;
            else if (cmp < 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
    }

