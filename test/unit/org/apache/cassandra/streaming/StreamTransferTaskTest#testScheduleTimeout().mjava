    @Test
    public void testScheduleTimeout() throws Exception
    {
        String ks = "Keyspace1";
        String cf = "Standard1";

        InetAddress peer = FBUtilities.getBroadcastAddress();
        StreamSession session = new StreamSession(peer, peer, null);
        ColumnFamilyStore cfs = Keyspace.open(ks).getColumnFamilyStore(cf);

        // create two sstables
        for (int i = 0; i < 2; i++)
        {
            insertData(ks, cf, i, 1);
            cfs.forceBlockingFlush();
        }

        // create streaming task that streams those two sstables
        StreamTransferTask task = new StreamTransferTask(session, cfs.metadata.cfId);
        for (SSTableReader sstable : cfs.getSSTables())
        {
            List<Range<Token>> ranges = new ArrayList<>();
            ranges.add(new Range<>(sstable.first.getToken(), sstable.last.getToken()));
            task.addTransferFile(sstable, 1, sstable.getPositionsForRanges(ranges));
        }
        assertEquals(2, task.getTotalNumberOfFiles());

        // if file sending completes before timeout then the task should be canceled.
        ScheduledFuture f = task.scheduleTimeout(0, 1, TimeUnit.SECONDS);
        task.complete(0);
        // timeout task may run after complete but it is noop
        f.get();

        // when timeout runs on second file, task should be completed
        f = task.scheduleTimeout(1, 1, TimeUnit.MILLISECONDS);
        f.get();
        assertEquals(StreamSession.State.WAIT_COMPLETE, session.state());

        // when all streaming are done, time out task should not be scheduled.
        assertNull(task.scheduleTimeout(1, 1, TimeUnit.SECONDS));
    }

