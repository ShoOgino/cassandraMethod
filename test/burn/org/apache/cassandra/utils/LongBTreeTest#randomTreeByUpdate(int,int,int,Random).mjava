    private static RandomTree randomTreeByUpdate(int minSize, int maxSize, int maxIntegerValue, Random random)
    {
        assert minSize > 3;
        TreeSet<Integer> canonical = new TreeSet<>();

        int targetSize = random.nextInt(maxSize - minSize) + minSize;
        int maxModificationSize = random.nextInt(targetSize - 2) + 2;
        Object[] accmumulate = BTree.empty();
        int curSize = 0;
        while (curSize < targetSize)
        {
            int nextSize = maxModificationSize == 1 ? 1 : random.nextInt(maxModificationSize - 1) + 1;
            TreeSet<Integer> build = new TreeSet<>();
            for (int i = 0 ; i < nextSize ; i++)
            {
                Integer next = random.nextInt(maxIntegerValue);
                build.add(next);
                canonical.add(next);
            }
            accmumulate = BTree.update(accmumulate, naturalOrder(), build, UpdateFunction.<Integer>noOp());
            curSize += nextSize;
            maxModificationSize = Math.min(maxModificationSize, targetSize - curSize);
        }
        return new RandomTree(canonical, BTreeSet.<Integer>wrap(accmumulate, naturalOrder()), random);
    }

