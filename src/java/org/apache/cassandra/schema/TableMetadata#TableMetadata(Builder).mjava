    private TableMetadata(Builder builder)
    {
        keyspace = builder.keyspace;
        name = builder.name;
        id = builder.id;

        partitioner = builder.partitioner;
        params = builder.params.build();
        flags = Sets.immutableEnumSet(builder.flags);
        isView = builder.isView;

        indexName = name.contains(".")
                  ? name.substring(name.indexOf('.') + 1)
                  : null;

        droppedColumns = ImmutableMap.copyOf(builder.droppedColumns);
        Collections.sort(builder.partitionKeyColumns);
        partitionKeyColumns = ImmutableList.copyOf(builder.partitionKeyColumns);
        Collections.sort(builder.clusteringColumns);
        clusteringColumns = ImmutableList.copyOf(builder.clusteringColumns);
        regularAndStaticColumns = RegularAndStaticColumns.builder().addAll(builder.regularAndStaticColumns).build();
        columns = ImmutableMap.copyOf(builder.columns);

        indexes = builder.indexes;
        triggers = builder.triggers;

        partitionKeyType = partitionKeyColumns.size() == 1
                         ? partitionKeyColumns.get(0).type
                         : CompositeType.getInstance(transform(partitionKeyColumns, t -> t.type));

        comparator = new ClusteringComparator(transform(clusteringColumns, c -> c.type));

        compactValueColumn = isCompactTable()
                           ? CompactTables.getCompactValueColumn(regularAndStaticColumns, isSuper())
                           : null;

        resource = DataResource.table(keyspace, name);
    }

