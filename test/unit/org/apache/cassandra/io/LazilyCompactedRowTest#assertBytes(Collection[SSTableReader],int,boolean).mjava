    private void assertBytes(Collection<SSTableReader> sstables, int gcBefore, boolean major) throws IOException
    {
        CompactionIterator ci1 = new CompactionIterator(sstables, gcBefore, major);
        LazyCompactionIterator ci2 = new LazyCompactionIterator(sstables, gcBefore, major);

        while (true)
        {
            if (!ci1.hasNext())
            {
                assert !ci2.hasNext();
                break;
            }

            AbstractCompactedRow row1 = ci1.next();
            AbstractCompactedRow row2 = ci2.next();
            DataOutputBuffer out1 = new DataOutputBuffer();
            DataOutputBuffer out2 = new DataOutputBuffer();
            row1.write(out1);
            row2.write(out2);
            DataInputStream in1 = new DataInputStream(new ByteArrayInputStream(out1.getData(), 0, out1.getLength()));
            DataInputStream in2 = new DataInputStream(new ByteArrayInputStream(out2.getData(), 0, out2.getLength()));

            // key isn't part of what CompactedRow writes, that's done by SSTW.append

            // row size can differ b/c of bloom filter counts being different
            int rowSize1 = in1.readInt();
            int rowSize2 = in2.readInt();
            assertEquals(out1.getLength(), rowSize1 + 4);
            assertEquals(out2.getLength(), rowSize2 + 4);
            // bloom filter
            IndexHelper.defreezeBloomFilter(in1);
            IndexHelper.defreezeBloomFilter(in2);
            // index
            int indexSize1 = in1.readInt();
            int indexSize2 = in2.readInt();
            assertEquals(indexSize1, indexSize2);
            byte[] bytes1 = new byte[indexSize1];
            byte[] bytes2 = new byte[indexSize2];
            in1.readFully(bytes1);
            in2.readFully(bytes2);
            assert Arrays.equals(bytes1, bytes2);
            // cf metadata
            ColumnFamily cf1 = ColumnFamily.create("Keyspace1", "Standard1");
            ColumnFamily cf2 = ColumnFamily.create("Keyspace1", "Standard1");
            ColumnFamily.serializer().deserializeFromSSTableNoColumns(cf1, in1);
            ColumnFamily.serializer().deserializeFromSSTableNoColumns(cf2, in2);
            assert cf1.getLocalDeletionTime() == cf2.getLocalDeletionTime();
            assert cf1.getMarkedForDeleteAt().equals(cf2.getMarkedForDeleteAt());   
            // columns
            int columns = in1.readInt();
            assert columns == in2.readInt();
            for (int i = 0; i < columns; i++)
            {
                IColumn c1 = cf1.getColumnSerializer().deserialize(in1);
                IColumn c2 = cf2.getColumnSerializer().deserialize(in2);
                assert c1.equals(c2);
            }
            // that should be everything
            assert in1.available() == 0;
            assert in2.available() == 0;
        }
    }

