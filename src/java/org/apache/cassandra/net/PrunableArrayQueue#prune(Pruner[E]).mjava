    /**
     * Prunes the queue using the specified {@link Pruner}
     *
     * @return count of removed elements.
     */
    int prune(Pruner<E> pruner)
    {
        E e;
        int removed = 0;

        try
        {
            int size = size();
            for (int i = 0; i < size; i++)
            {
                /*
                 * We start at the tail and work backwards to minimise the number of copies
                 * as we expect to primarily prune from the front.
                 */
                int k = (tail - 1 - i) & mask;
                e = buffer[k];

                if (pruner.shouldPrune(e))
                {
                    buffer[k] = null;
                    removed++;
                    pruner.onPruned(e);
                }
                else
                {
                    if (removed > 0)
                    {
                        buffer[(k + removed) & mask] = e;
                        buffer[k] = null;
                    }
                    pruner.onKept(e);
                }
            }
        }
        finally
        {
            head = (head + removed) & mask;
        }

        return removed;
    }

