    @Test
    public void mixedModePagingTest() throws Throwable
    {
        new TestCase()
        .upgrade(Versions.Major.v22, Versions.Major.v30)
        .nodes(2)
        .nodesToUpgrade(2)
        .setup((cluster) -> {
            cluster.schemaChange("ALTER KEYSPACE " + DistributedTestBase.KEYSPACE + " WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}");
            cluster.schemaChange("CREATE TABLE " + DistributedTestBase.KEYSPACE + ".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck)) with compact storage");
            for (int i = 0; i < 100; i++)
                for (int j = 0; j < 200; j++)
                    cluster.coordinator(2).execute("INSERT INTO " + DistributedTestBase.KEYSPACE + ".tbl (pk, ck, v) VALUES (?, ?, 1)", ConsistencyLevel.ALL, i, j);
            cluster.forEach((i) -> i.flush(DistributedTestBase.KEYSPACE));
            for (int i = 0; i < 100; i++)
                for (int j = 10; j < 30; j++)
                    cluster.coordinator(2).execute("DELETE FROM " + DistributedTestBase.KEYSPACE + ".tbl where pk=? and ck=?", ConsistencyLevel.ALL, i, j);
            cluster.forEach((i) -> i.flush(DistributedTestBase.KEYSPACE));
        })
        .runAfterClusterUpgrade((cluster) -> {
            for (int i = 0; i < 100; i++)
            {
                for (int pageSize = 10; pageSize < 100; pageSize++)
                {
                    Iterator<Object[]> res = cluster.coordinator(1).executeWithPaging("SELECT * FROM " + DistributedTestBase.KEYSPACE + ".tbl WHERE pk = ?",
                                                                                      ConsistencyLevel.ALL,
                                                                                      pageSize, i);
                    assertEquals(180, Iterators.size(res));
                }
            }
        }).run();
    }

