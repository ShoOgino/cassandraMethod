    /**
     * This is only called by Memtable.resolve, so only AtomicSortedColumns needs to implement it.
     *
     * @return the difference in size seen after merging the given columns
     */
    public long addAllWithSizeDelta(final ColumnFamily cm, Allocator allocator, Function<Cell, Cell> transformation, Updater indexer)
    {
        boolean transformed = false;
        Collection<Cell> insert;
        if (cm instanceof UnsortedColumns)
        {
            insert = transform(metadata.comparator.columnComparator(), cm, transformation, true);
            transformed = true;
        }
        else
            insert = cm.getSortedColumns();

        while (true)
        {
            Holder current = ref;

            DeletionInfo deletionInfo = cm.deletionInfo();
            if (deletionInfo.hasRanges())
            {
                for (Iterator<Cell> iter : new Iterator[] { insert.iterator(), BTree.<Cell>slice(current.tree, true) })
                {
                    while (iter.hasNext())
                    {
                        Cell col = iter.next();
                        if (deletionInfo.isDeleted(col))
                            indexer.remove(col);
                    }
                }
            }
            deletionInfo = current.deletionInfo.copy().add(deletionInfo);

            ColumnUpdater updater = new ColumnUpdater(allocator, transformation, indexer);
            Holder h = current.update(this, deletionInfo, metadata.comparator.columnComparator(), insert, updater);
            if (h != null && refUpdater.compareAndSet(this, current, h))
            {
                indexer.updateRowLevelIndexes();
                return updater.delta;
            }

            if (!transformed)
            {
                // After failing once, transform Columns into a new collection to avoid repeatedly allocating Slab space
                insert = transform(metadata.comparator.columnComparator(), cm, transformation, false);
                transformed = true;
            }
        }

    }

