    public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata, String table)
    {
        int replicas = DatabaseDescriptor.getReplicationFactor(table);
        ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(replicas);
        List<Token> tokens = metadata.sortedTokens();

        if (tokens.isEmpty())
            return endpoints;

        Iterator<Token> iter = TokenMetadata.ringIterator(tokens, token);
        Token primaryToken = iter.next();
        endpoints.add(metadata.getEndpoint(primaryToken));

        boolean bDataCenter = false;
        boolean bOtherRack = false;
        while (endpoints.size() < replicas && iter.hasNext())
        {
            try
            {
                AbstractRackAwareSnitch snitch = (AbstractRackAwareSnitch)snitch_;

                // First try to find one in a different data center
                Token t = iter.next();
                if (!snitch.getDatacenter(metadata.getEndpoint(primaryToken)).equals(snitch.getDatacenter(metadata.getEndpoint(t))))
                {
                    // If we have already found something in a diff datacenter no need to find another
                    if (!bDataCenter)
                    {
                        endpoints.add(metadata.getEndpoint(t));
                        bDataCenter = true;
                    }
                    continue;
                }
                // Now  try to find one on a different rack
                if (!snitch.getRack(metadata.getEndpoint(primaryToken)).equals(snitch.getRack(metadata.getEndpoint(t))) &&
                    snitch.getDatacenter(metadata.getEndpoint(primaryToken)).equals(snitch.getDatacenter(metadata.getEndpoint(t))))
                {
                    // If we have already found something in a diff rack no need to find another
                    if (!bOtherRack)
                    {
                        endpoints.add(metadata.getEndpoint(t));
                        bOtherRack = true;
                    }
                }
            }
            catch (UnknownHostException e)
            {
                throw new RuntimeException(e);
            }

        }

        // If we found N number of nodes we are good. This loop wil just exit. Otherwise just
        // loop through the list and add until we have N nodes.
        if (endpoints.size() < replicas)
        {
            iter = TokenMetadata.ringIterator(tokens, token);
            while (endpoints.size() < replicas && iter.hasNext())
            {
                Token t = iter.next();
                if (!endpoints.contains(metadata.getEndpoint(t)))
                    endpoints.add(metadata.getEndpoint(t));
            }
        }

        return endpoints;
    }

