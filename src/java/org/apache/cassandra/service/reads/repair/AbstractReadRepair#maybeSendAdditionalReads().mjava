    public void maybeSendAdditionalReads()
    {
        Preconditions.checkState(command instanceof SinglePartitionReadCommand,
                                 "maybeSendAdditionalReads can only be called for SinglePartitionReadCommand");
        DigestRepair repair = digestRepair;
        if (repair == null)
            return;

        if (shouldSpeculate() && !repair.readCallback.await(cfs.sampleLatencyNanos, TimeUnit.NANOSECONDS))
        {
            Set<InetAddressAndPort> contacted = Sets.newHashSet(repair.initialContacts);
            Token replicaToken = ((SinglePartitionReadCommand) command).partitionKey().getToken();
            Iterable<InetAddressAndPort> candidates = getCandidatesForToken(replicaToken);

            Optional<InetAddressAndPort> endpoint = Iterables.tryFind(candidates, e -> !contacted.contains(e));
            if (endpoint.isPresent())
            {
                Tracing.trace("Enqueuing speculative full data read to {}", endpoint);
                sendReadCommand(endpoint.get(), repair.readCallback);
                ReadRepairMetrics.speculatedRead.mark();
                ReadRepairDiagnostics.speculatedRead(this, endpoint.get(), candidates);
            }
        }
    }

