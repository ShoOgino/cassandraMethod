    @Override
    public EnumSet<Permission> authorize(AuthenticatedUser user, List<Object> resource)
    {
        if (resource.size() < 2 || !Resources.ROOT.equals(resource.get(0)) || !Resources.KEYSPACES.equals(resource.get(1)))
            // we only know how to handle keyspace authorization
            return Permission.NONE;

        String keyspace;
        EnumSet<Permission> authorized;
        if (resource.size() < 3)
        {
            // authorize the user for the keyspace list using the 'magical' keyspace,
            // but give them read access by default
            keyspace = KEYSPACES_WRITE_PROPERTY;
            authorized = EnumSet.of(Permission.READ);
        }
        else
        {
            // otherwise, authorize them for the actual keyspace
            keyspace = (String)resource.get(2);
            authorized = Permission.NONE;
        }

        String afilename = System.getProperty(ACCESS_FILENAME_PROPERTY);
        try
        {
            FileInputStream in = new FileInputStream(afilename);
            Properties props = new Properties();
            props.load(in);
            in.close();

            // structure:
            // given keyspace X, users A B and C can be authorized like this (separate their names with spaces):
            // X = A B C
            
            if (null == props.getProperty(keyspace))
                // no one is authorized
                return authorized;
            for (String allow : props.getProperty(keyspace).split(","))
                if (allow.equals(user.username))
                    authorized = Permission.ALL;
        }
        catch (IOException e)
        {
            throw new RuntimeException(String.format("Authorization table file '%s' could not be opened: %s", afilename, e.getMessage()));
        }

        return authorized;
    }

