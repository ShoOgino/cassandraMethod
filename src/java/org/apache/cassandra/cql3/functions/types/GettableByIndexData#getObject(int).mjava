    /**
     * Returns the {@code i}th value as the Java type matching its CQL type.
     *
     * <p>This method uses the {@link CodecRegistry} to find the first codec that handles the
     * underlying CQL type. The Java type of the returned object will be determined by the codec that
     * was selected.
     *
     * <p>Use this method to dynamically inspect elements when types aren't known in advance, for
     * instance if you're writing a generic row logger. If you know the target Java type, it is
     * generally preferable to use typed getters, such as the ones for built-in types ({@link
     * #getBool(int)}, {@link #getInt(int)}, etc.), or {@link #get(int, Class)} and {@link #get(int,
     * TypeToken)} for custom types.
     *
     * @param i the index to retrieve.
     * @return the value of the {@code i}th value as the Java type matching its CQL type.
     * @throws IndexOutOfBoundsException if {@code i} is not a valid index for this object.
     * @see CodecRegistry#codecFor(DataType)
     */
    public Object getObject(int i);

