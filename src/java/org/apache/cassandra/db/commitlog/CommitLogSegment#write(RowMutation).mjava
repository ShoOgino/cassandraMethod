   /**
     * Appends a row mutation onto the commit log.  Requres that hasCapacityFor has already been checked.
     *
     * @param   mutation   the mutation to append to the commit log.
     * @return  the position of the appended mutation
     */
    public ReplayPosition write(RowMutation mutation) throws IOException
    {
        assert !closed;
        ReplayPosition repPos = getContext();
        markDirty(mutation, repPos);

        checksum.reset();

        // checksummed length
        int length = (int) RowMutation.serializer.serializedSize(mutation, MessagingService.current_version);
        bufferStream.writeInt(length);
        buffer.putLong(checksum.getValue());

        // checksummed mutation
        RowMutation.serializer.serialize(mutation, bufferStream, MessagingService.current_version);
        buffer.putLong(checksum.getValue());

        if (buffer.remaining() >= 4)
        {
            // writes end of segment marker and rewinds back to position where it starts
            buffer.putInt(CommitLog.END_OF_SEGMENT_MARKER);
            buffer.position(buffer.position() - CommitLog.END_OF_SEGMENT_MARKER_SIZE);
        }

        needsSync = true;
        return repPos;
    }

