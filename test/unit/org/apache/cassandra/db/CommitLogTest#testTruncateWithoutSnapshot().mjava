/*
    @Test
    public void testCommitFailurePolicy_stop()
    {
        File commitDir = new File(DatabaseDescriptor.getCommitLogLocation());

        try
        {

            DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.stop);
            commitDir.setWritable(false);
            RowMutation rm = new RowMutation("Keyspace1", bytes("k"));
            rm.add("Standard1", bytes("c1"), ByteBuffer.allocate(100), 0);

            // Adding it twice (won't change segment)
            CommitLog.instance.add(rm);
            Uninterruptibles.sleepUninterruptibly((int) DatabaseDescriptor.getCommitLogSyncBatchWindow(), TimeUnit.MILLISECONDS);
            Assert.assertFalse(StorageService.instance.isRPCServerRunning());
            Assert.assertFalse(StorageService.instance.isNativeTransportRunning());
            Assert.assertFalse(StorageService.instance.isInitialized());

        }
        finally
        {
            commitDir.setWritable(true);
        }
    }
*/
    @Test
    public void testTruncateWithoutSnapshot()  throws ExecutionException, InterruptedException
    {
        CommitLog.instance.resetUnsafe();
        boolean prev = DatabaseDescriptor.isAutoSnapshot();
        DatabaseDescriptor.setAutoSnapshot(false);
        ColumnFamilyStore cfs1 = Keyspace.open("Keyspace1").getColumnFamilyStore("Standard1");
        ColumnFamilyStore cfs2 = Keyspace.open("Keyspace1").getColumnFamilyStore("Standard2");

        final RowMutation rm1 = new RowMutation("Keyspace1", bytes("k"));
        rm1.add("Standard1", bytes("c1"), ByteBuffer.allocate(100), 0);
        rm1.apply();
        cfs1.truncateBlocking();
        DatabaseDescriptor.setAutoSnapshot(prev);
        final RowMutation rm2 = new RowMutation("Keyspace1", bytes("k"));
        rm2.add("Standard2", bytes("c1"), ByteBuffer.allocate(DatabaseDescriptor.getCommitLogSegmentSize() / 4), 0);

        for (int i = 0 ; i < 5 ; i++)
            CommitLog.instance.add(rm2);

        Assert.assertEquals(2, CommitLog.instance.activeSegments());
        ReplayPosition position = CommitLog.instance.getContext().get();
        for (Keyspace ks : Keyspace.system())
            for (ColumnFamilyStore syscfs : ks.getColumnFamilyStores())
                CommitLog.instance.discardCompletedSegments(syscfs.metadata.cfId, position);
        CommitLog.instance.discardCompletedSegments(cfs2.metadata.cfId, position);
        Assert.assertEquals(1, CommitLog.instance.activeSegments());
    }

