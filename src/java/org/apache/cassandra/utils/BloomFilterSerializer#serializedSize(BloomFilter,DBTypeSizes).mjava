    /**
     * Calculates a serialized size of the given Bloom Filter
     * @see BloomFilterSerializer#serialize(BloomFilter, DataOutput)
     *
     * @param bf Bloom filter to calculate serialized size
     *
     * @return serialized size of the given bloom filter
     */
    public long serializedSize(BloomFilter bf, DBTypeSizes typeSizes)
    {
        int bitLength = bf.bitset.getNumWords();
        int pageSize = bf.bitset.getPageSize();
        int pageCount = bf.bitset.getPageCount();

        int size = 0;
        size += typeSizes.sizeof(bf.getHashCount()); // hash count
        size += typeSizes.sizeof(bitLength); // length

        for (int p = 0; p < pageCount; p++)
        {
            long[] bits = bf.bitset.getPage(p);
            for (int i = 0; i < pageSize && bitLength-- > 0; i++)
                size += typeSizes.sizeof(bits[i]); // bucket
        }
        return size;
    }

