    /**
     * Returns the value for {@code name} as the Java type matching its CQL type.
     *
     * <p>This method uses the {@link CodecRegistry} to find the first codec that handles the
     * underlying CQL type. The Java type of the returned object will be determined by the codec that
     * was selected.
     *
     * <p>Use this method to dynamically inspect elements when types aren't known in advance, for
     * instance if you're writing a generic row logger. If you know the target Java type, it is
     * generally preferable to use typed getters, such as the ones for built-in types ({@link
     * #getBool(String)}, {@link #getInt(String)}, etc.), or {@link #get(String, Class)} and {@link
     * #get(String, TypeToken)} for custom types.
     *
     * @param name the name to retrieve.
     * @return the value of {@code name} as the Java type matching its CQL type. If the value is NULL
     * and is a simple type, UDT or tuple, {@code null} is returned. If it is NULL and is a
     * collection type, an empty (immutable) collection is returned.
     * @throws IllegalArgumentException if {@code name} is not a valid name for this object.
     * @see CodecRegistry#codecFor(DataType)
     */
    Object getObject(String name);

