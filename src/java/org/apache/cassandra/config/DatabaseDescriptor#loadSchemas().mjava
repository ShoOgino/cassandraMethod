    public static void loadSchemas() throws IOException
    {
        // we can load tables from local storage if a version is set in the system table and that acutally maps to
        // real data in the definitions table.  If we do end up loading from xml, store the defintions so that we
        // don't load from xml anymore.
        UUID uuid = Migration.getLastMigrationId();
        if (uuid == null)
            logger.warn("Couldn't detect any schema definitions in local storage. I hope you've got a plan.");
        else
        {
            logger.info("Loading schema version " + uuid.toString());
            Collection<KSMetaData> tableDefs = DefsTable.loadFromStorage(uuid);   
            for (KSMetaData def : tableDefs)
            {
                for (CFMetaData cfm : def.cfMetaData().values())
                {
                    try
                    {
                        CFMetaData.map(cfm);
                    }
                    catch (ConfigurationException ex)
                    {
                        throw new IOError(ex);
                    }
                }
                DatabaseDescriptor.setTableDefinition(def, uuid);
                // this part creates storage and jmx objects.
                Table.open(def.name);
            }
            
            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.
            
            if (conf.keyspaces != null && conf.keyspaces.size() > 0)
                logger.warn("Schema definitions were defined both locally and in " + STORAGE_CONF_FILE +
                    ". Definitions in " + STORAGE_CONF_FILE + " were ignored.");
            
        }
        CFMetaData.fixMaxId();
    }

