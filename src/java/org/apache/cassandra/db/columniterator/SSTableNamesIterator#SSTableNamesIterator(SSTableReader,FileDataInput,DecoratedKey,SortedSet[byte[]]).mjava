    public SSTableNamesIterator(SSTableReader sstable, FileDataInput file, DecoratedKey key, SortedSet<byte[]> columnNames)
    {
        boolean closeFileWhenDone = file == null;
        
        try
        {
            assert columnNames != null;

            this.columns = columnNames;
            this.decoratedKey = key;

            // open the sstable file, if we don't have one passed to use from range scan
            if (file == null)
            {
                file = sstable.getFileDataInput(decoratedKey, DatabaseDescriptor.getIndexedReadBufferSizeInKB() * 1024);
                if (file == null)
                    return;
                DecoratedKey keyInDisk = SSTableReader.decodeKey(sstable.getPartitioner(),
                                                                 sstable.getDescriptor(),
                                                                 FBUtilities.readShortByteArray(file));
                assert keyInDisk.equals(decoratedKey)
                       : String.format("%s != %s in %s", keyInDisk, decoratedKey, file.getPath());
                SSTableReader.readRowSize(file, sstable.getDescriptor());
            }

            // read the requested columns into `cf`
            /* Read the bloom filter summarizing the columns */
            BloomFilter bf = IndexHelper.defreezeBloomFilter(file);
            List<IndexHelper.IndexInfo> indexList = IndexHelper.deserializeIndex(file);

            // we can stop early if bloom filter says none of the columns actually exist -- but,
            // we can't stop before initializing the cf above, in case there's a relevant tombstone
            cf = ColumnFamily.serializer().deserializeFromSSTableNoColumns(sstable.makeColumnFamily(), file);

            List<byte[]> filteredColumnNames1 = new ArrayList<byte[]>(columnNames.size());
            for (byte[] name : columnNames)
            {
                if (bf.isPresent(name))
                {
                    filteredColumnNames1.add(name);
                }
            }
            List<byte[]> filteredColumnNames = filteredColumnNames1;
            if (filteredColumnNames.isEmpty())
                return;

            if (indexList == null)
                readSimpleColumns(file, columnNames, filteredColumnNames);
            else
                readIndexedColumns(sstable, file, columnNames, filteredColumnNames, indexList);

            // create an iterator view of the columns we read
            iter = cf.getSortedColumns().iterator();
        }
        catch (IOException ioe)
        {
            throw new IOError(ioe);
        }
        finally
        {
            if (closeFileWhenDone && file != null)
            {
                try
                {
                    file.close();
                }
                catch (IOException ioe)
                {
                    logger.warn("error closing " + file.getPath());
                }
            }
        }
    }

