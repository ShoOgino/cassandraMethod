        public void serialize(RowIndexEntry<IndexHelper.IndexInfo> rie, DataOutputPlus out) throws IOException
        {
            assert version.storeRows() : "We read old index files but we should never write them";

            out.writeUnsignedVInt(rie.position);
            out.writeUnsignedVInt(rie.promotedSize(idxSerializer));

            if (rie.isIndexed())
            {
                out.writeUnsignedVInt(rie.headerLength());
                DeletionTime.serializer.serialize(rie.deletionTime(), out);
                out.writeUnsignedVInt(rie.columnsIndex().size());

                // Calculate and write the offsets to the IndexInfo objects.

                int[] offsets = new int[rie.columnsIndex().size()];

                if (out.hasFilePointer())
                {
                    // Out is usually a SequentialWriter, so using the file-pointer is fine to generate the offsets.
                    // A DataOutputBuffer also works.
                    long start = out.getFilePointer();
                    int i = 0;
                    for (IndexHelper.IndexInfo info : rie.columnsIndex())
                    {
                        offsets[i] = i == 0 ? 0 : (int)(out.getFilePointer() - start);
                        i++;
                        idxSerializer.serialize(info, out);
                    }
                }
                else
                {
                    // Not sure this branch will ever be needed, but if it is called, it has to calculate the
                    // serialized sizes instead of simply using the file-pointer.
                    int i = 0;
                    int offset = 0;
                    for (IndexHelper.IndexInfo info : rie.columnsIndex())
                    {
                        offsets[i++] = offset;
                        idxSerializer.serialize(info, out);
                        offset += idxSerializer.serializedSize(info);
                    }
                }

                for (int off : offsets)
                    out.writeInt(off);
            }
        }

