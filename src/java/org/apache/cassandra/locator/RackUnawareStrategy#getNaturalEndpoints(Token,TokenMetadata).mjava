    // TODO this doesn't need to worry about bootstrap tokens being in the normal tokens map
    public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata)
    {
        int startIndex;
        List<Token> tokenList = new ArrayList<Token>();
        int foundCount = 0;
        List tokens = new ArrayList<Token>(metadata.sortedTokens());
        List<Token> bsTokens = null;

        int index = Collections.binarySearch(tokens, token);
        if(index < 0)
        {
            index = (index + 1) * (-1);
            if (index >= tokens.size())
                index = 0;
        }
        int totalNodes = tokens.size();
        // Add the token at the index by default
        tokenList.add((Token)tokens.get(index));
        if (bsTokens == null || !bsTokens.contains(tokens.get(index)))
            foundCount++;
        startIndex = (index + 1)%totalNodes;
        // If we found N number of nodes we are good. This loop will just exit. Otherwise just
        // loop through the list and add until we have N nodes.
        for (int i = startIndex, count = 1; count < totalNodes && foundCount < replicas_; ++count, i = (i+1)%totalNodes)
        {
            if(!tokenList.contains(tokens.get(i)))
            {
                tokenList.add((Token)tokens.get(i));
                //Don't count bootstrapping tokens towards the count
                if (bsTokens==null || !bsTokens.contains(tokens.get(i)))
                    foundCount++;
            }
        }
        ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(tokenList.size());
        for (Token t : tokenList)
            endpoints.add(metadata.getEndPoint(t));
        return endpoints;
    }

