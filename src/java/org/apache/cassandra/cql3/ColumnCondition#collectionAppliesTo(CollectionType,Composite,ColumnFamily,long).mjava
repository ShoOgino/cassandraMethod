    private boolean collectionAppliesTo(CollectionType type, Composite rowPrefix, ColumnFamily current, final long now) throws InvalidRequestException
    {
        CellName name = current.metadata().comparator.create(rowPrefix, column);
        // We are testing for collection equality, so we need to have the expected values *and* only those.
        ColumnSlice[] collectionSlice = new ColumnSlice[]{ name.slice() };
        // Filter live columns, this makes things simpler afterwards
        Iterator<Cell> iter = Iterators.filter(current.iterator(collectionSlice), new Predicate<Cell>()
        {
            public boolean apply(Cell c)
            {
                // we only care about live columns
                return c.isLive(now);
            }
        });

        Term.Terminal v = value.bind(variables);
        if (v == null)
            return !iter.hasNext();

        switch (type.kind)
        {
            case LIST: return listAppliesTo(iter, ((Lists.Value)v).elements);
            case SET: return setAppliesTo(iter, ((Sets.Value)v).elements);
            case MAP: return mapAppliesTo(iter, ((Maps.Value)v).map);
        }
        throw new AssertionError();
    }

