    private void doCounterSlice(String keyspace, ByteBuffer key, ColumnParent parent, SlicePredicate predicate, boolean isSuperCF)
            throws InvalidRequestException, UnavailableException, TimedOutException, TException, IllegalAccessException, NotFoundException, InstantiationException, NoSuchFieldException
    {
        String columnFamily = parent.column_family;
        List<Counter> columns = thriftClient.get_counter_slice(key, parent, predicate, consistencyLevel);

        // Print out super columns or columns.
        for (Counter cosc : columns)
        {
            if (cosc.isSetSuper_column())
            {
                CounterSuperColumn superColumn = cosc.super_column;

                sessionState.out.printf("=> (super_column=%s,", formatColumnName(keyspace, columnFamily, superColumn.name));
                for (CounterColumn col : superColumn.getColumns())
                {
                    sessionState.out.printf("%n     (counter=%s, value=%s)", formatSubcolumnName(keyspace, columnFamily, col.name), col.value);
                }
                sessionState.out.println(")");
            }
            else
            {
                CounterColumn column = cosc.column;
                String formattedName = isSuperCF
                                       ? formatSubcolumnName(keyspace, columnFamily, column.name)
                                       : formatColumnName(keyspace, columnFamily, column.name);

                sessionState.out.printf("=> (counter=%s, value=%s)%n", formattedName, column.value);
            }
        }
        
        sessionState.out.println("Returned " + columns.size() + " results.");
    }

