    @Test
    public void testMajorCompactionPurge()
    {
        CompactionManager.instance.disableAutoCompaction();

        Keyspace keyspace = Keyspace.open(KEYSPACE1);
        String cfName = "Standard1";
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfName);

        DecoratedKey key = Util.dk("key1");
        Mutation rm;

        // inserts
        rm = new Mutation(KEYSPACE1, key.getKey());
        for (int i = 0; i < 10; i++)
        {
            rm.add(cfName, cellname(String.valueOf(i)), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
        }
        rm.applyUnsafe();
        cfs.forceBlockingFlush();

        // deletes
        for (int i = 0; i < 10; i++)
        {
            rm = new Mutation(KEYSPACE1, key.getKey());
            rm.delete(cfName, cellname(String.valueOf(i)), 1);
            rm.applyUnsafe();
        }
        cfs.forceBlockingFlush();

        // resurrect one column
        rm = new Mutation(KEYSPACE1, key.getKey());
        rm.add(cfName, cellname(String.valueOf(5)), ByteBufferUtil.EMPTY_BYTE_BUFFER, 2);
        rm.applyUnsafe();
        cfs.forceBlockingFlush();

        // major compact and test that all columns but the resurrected one is completely gone
        FBUtilities.waitOnFutures(CompactionManager.instance.submitMaximal(cfs, Integer.MAX_VALUE, false));
        cfs.invalidateCachedRow(key);
        ColumnFamily cf = cfs.getColumnFamily(QueryFilter.getIdentityFilter(key, cfName, System.currentTimeMillis()));
        assertColumns(cf, "5");
        assertNotNull(cf.getColumn(cellname(String.valueOf(5))));
    }

