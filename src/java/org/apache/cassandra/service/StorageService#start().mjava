    public void start() throws IOException
    {
        storageMetadata_ = SystemTable.initMetadata();
        tcpAddr_ = new EndPoint(DatabaseDescriptor.getStoragePort());
        udpAddr_ = new EndPoint(DatabaseDescriptor.getControlPort());
        /* Listen for application messages */
        MessagingService.getMessagingInstance().listen(tcpAddr_);
        /* Listen for control messages */
        MessagingService.getMessagingInstance().listenUDP(udpAddr_);

        SelectorManager.getSelectorManager().start();
        SelectorManager.getUdpSelectorManager().start();

        /* starts a load timer thread */
        loadTimer_.schedule( new LoadDisseminator(), StorageService.threshold_, StorageService.threshold_);
        
        /* Start the storage load balancer */
        storageLoadBalancer_.start();
        /* Register with the Gossiper for EndPointState notifications */
        Gossiper.instance().register(this);
        /*
         * Start the gossiper with the generation # retrieved from the System
         * table
         */
        Gossiper.instance().start(udpAddr_, storageMetadata_.getGeneration());
        /* Make sure this token gets gossiped around. */
        tokenMetadata_.update(storageMetadata_.getToken(), StorageService.tcpAddr_, isBootstrapMode);
        ApplicationState state = new ApplicationState(StorageService.getPartitioner().getTokenFactory().toString(storageMetadata_.getToken()));
        Gossiper.instance().addApplicationState(StorageService.nodeId_, state);
        if (isBootstrapMode)
        {
            logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
            // wait for node information to be available.  if the rest of the cluster just came up,
            // this could be up to threshold_ ms (currently 5 minutes).
            try
            {
                while (storageLoadBalancer_.getLoadInfo().isEmpty())
                {
                    Thread.sleep(100);
                }
                // one more sleep in case there are some stragglers
                Thread.sleep(BootStrapper.INITIAL_DELAY);
            }
            catch (InterruptedException e)
            {
                throw new AssertionError(e);
            }

            // if initialtoken was specified, use that.  otherwise, pick a token to assume half the load of the most-loaded node.
            if (DatabaseDescriptor.getInitialToken() == null)
            {
                double maxLoad = 0;
                EndPoint maxEndpoint = null;
                for (Map.Entry<EndPoint,Double> entry : storageLoadBalancer_.getLoadInfo().entrySet())
                {
                    if (maxEndpoint == null || entry.getValue() > maxLoad)
                    {
                        maxEndpoint = entry.getKey();
                        maxLoad = entry.getValue();
                    }
                }
                if (!maxEndpoint.equals(getLocalStorageEndPoint()))
                {
                    Token<?> t = getBootstrapTokenFrom(maxEndpoint);
                    logger_.info("Setting token to " + t + " to assume load from " + maxEndpoint.getHost());
                    updateToken(t);
                }
            }
            doBootstrap(StorageService.getLocalStorageEndPoint());
            Gossiper.instance().addApplicationState(BOOTSTRAP_MODE, new ApplicationState(""));
        }
    }

