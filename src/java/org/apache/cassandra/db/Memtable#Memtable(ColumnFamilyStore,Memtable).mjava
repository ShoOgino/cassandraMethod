    public Memtable(ColumnFamilyStore cfs, Memtable previous)
    {
        this.cfs = cfs;
        this.initialComparator = cfs.metadata.comparator;
        this.cfs.scheduleFlush();

        // Inherit liveRatio and liveRatioCompareAt from the previous memtable, if available,
        // to minimise recalculation frequency as much as possible.
        if (previous != null)
        {
            liveRatio = previous.liveRatio;
            liveRatioComputedAt.set(previous.liveRatioComputedAt.get() / 2);
        }

        Callable<Set<Object>> provider = new Callable<Set<Object>>()
        {
            public Set<Object> call() throws Exception
            {
                // avoid counting this once for each row
                Set<Object> set = Collections.newSetFromMap(new IdentityHashMap<Object, Boolean>());
                set.add(Memtable.this.cfs.metadata);
                return set;
            }
        };
        meter = new MemoryMeter().omitSharedBufferOverhead().withTrackerProvider(provider);
    }

