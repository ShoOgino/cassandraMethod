    @Test
    public void testExpandToCoverMultiThread() throws InterruptedException
    {
        Random r = new Random();
        int threads = 16;
        int streamSize = 1000000;
        List<Callable<Void>> tasks = new ArrayList<>(threads);
        final IntegerInterval interval = new IntegerInterval(0, 0);
        int min = 0;
        int max = 0;
        for (int i = 0; i < threads; ++i)
        {
            final int seed = r.nextInt();
            tasks.add(() -> {
                new Random(seed).ints(streamSize).forEach(v -> interval.expandToCover(v));
                return null;
            });
            min = Math.min(min, new Random(seed).ints(streamSize).min().getAsInt());
            max = Math.max(max, new Random(seed).ints(streamSize).max().getAsInt());
        }
        for (Future<?> f : Executors.newFixedThreadPool(threads).invokeAll(tasks))
            Futures.getUnchecked(f);
        assertEquals(min, interval.lower());
        assertEquals(max, interval.upper());
    }

