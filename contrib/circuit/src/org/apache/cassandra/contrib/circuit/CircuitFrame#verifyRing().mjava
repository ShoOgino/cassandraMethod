    /**
     * For each node, retrieve that nodes list and compare it to ours. If the
     * list of remote nodes doesn't match (it's long or short), then the node is
     * flagged accordingly and an error message is written to the status display.
     */
    private void verifyRing()
    {
        new Thread("VERIFY-RING")
        {
            public void run()
            {
                verifyLock.lock();
                ringPanel.setVerifying(true);
                try {
                    writeStatusOutput("Beginning ring verification...");
                    for (Node node : ringModel.getNodes())
                    {
                        // Skip the node we already queried at startup
                        if (node.isSeed())
                            continue;

                        writeStatusOutput("Verifying %s (ring) against reference node", node);
                        node.setSelected(true);
                        
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                ringPanel.repaint();
                            }
                        });

                        // uncomment this to simulate a slow running verification process
//                        try {Thread.currentThread().sleep(2000L); } catch (Exception ex) { }

                        Set<Node> othersSet, nodesSet;
                        try {
                            othersSet = new HashSet<Node>(ringModel.getRemoteNodes(node.getHost()));
                        } catch (IOException e) {
                            e.printStackTrace();
                            writeStatusOutput("Error retrieving node list from %s", node.getHost());
                            continue;
                        }

                        nodesSet = new HashSet<Node>(ringModel.getNodes());

                        for (Node upShort : Sets.difference(nodesSet, othersSet))
                        {
                            node.setStatus(NodeStatus.SHORT);
                            writeStatusOutput("%s: missing node %s", node, upShort);
                        }

                        for (Node upLong : Sets.difference(othersSet, nodesSet))
                        {
                            node.setStatus(NodeStatus.LONG);
                            writeStatusOutput("%s: contains node %s missing from reference list", node, upLong);
                        }

                        node.setSelected(false);
                    }

                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            ringPanel.repaint();
                        }
                    });
                    writeStatusOutput("Ring verification complete.");
                } finally
                {
                    verifyLock.unlock();
                    ringPanel.setVerifying(false);
                }
            }
        }.start();
    }

