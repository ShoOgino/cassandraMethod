    @Test
    public void testAuditLogFilters() throws Throwable
    {
        createTable("CREATE TABLE %s (id int primary key, v1 text, v2 text)");
        execute("INSERT INTO %s (id, v1, v2) VALUES (?, ?, ?)", 1, "Apache", "Cassandra");
        execute("INSERT INTO %s (id, v1, v2) VALUES (?, ?, ?)", 2, "trace", "test");

        AuditLogOptions options = new AuditLogOptions();
        options.excluded_keyspaces = KEYSPACE;
        enableAuditLogOptions(options);

        String cql = "SELECT id, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE id = ?";
        ResultSet rs = executeAndAssertNoAuditLog(cql, 1);
        assertEquals(1, rs.all().size());

        options = new AuditLogOptions();
        options.included_keyspaces = KEYSPACE;
        enableAuditLogOptions(options);

        cql = "SELECT id, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE id = ?";
        rs = executeAndAssertWithPrepare(cql, AuditLogEntryType.SELECT, 1);
        assertEquals(1, rs.all().size());

        options = new AuditLogOptions();
        options.included_keyspaces = KEYSPACE;
        options.excluded_keyspaces = KEYSPACE;
        enableAuditLogOptions(options);

        cql = "SELECT id, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE id = ?";
        rs = executeAndAssertNoAuditLog(cql, 1);
        assertEquals(1, rs.all().size());

        options = new AuditLogOptions();
        enableAuditLogOptions(options);

        cql = "SELECT id, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE id = ?";
        rs = executeAndAssertWithPrepare(cql, AuditLogEntryType.SELECT, 1);
        assertEquals(1, rs.all().size());
    }

