    /**
     * Test mixing single and multi equals restrictions (e.g. clustering_0 = 1 AND (clustering_1, clustering_2) = (2, 3))
     */
    @Test
    public void testBuildBoundWithSingleEqAndMultiEqRestrictions() throws InvalidRequestException
    {
        ByteBuffer value1 = ByteBufferUtil.bytes(1);
        ByteBuffer value2 = ByteBufferUtil.bytes(2);
        ByteBuffer value3 = ByteBufferUtil.bytes(3);
        ByteBuffer value4 = ByteBufferUtil.bytes(4);

        // clustering_0 = 1 AND (clustering_1, clustering_2) = (2, 3)
        SingleColumnRestriction.EQ singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        MultiColumnRestriction.EQ multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value2, value3), false);
        Restriction[] restrictions = new Restriction[] { singleEq, multiEq, multiEq };

        List<Composite> bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.END);

        // clustering_0 = 1 AND clustering_1 = 2 AND (clustering_2, clustering_3) = (3, 4)
        singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        SingleColumnRestriction.EQ singleEq2 = new SingleColumnRestriction.EQ(toTerm(value2), false);
        multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value3, value4), false);
        restrictions = new Restriction[] { singleEq, singleEq2, multiEq, multiEq };

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.END);

        // (clustering_0, clustering_1) = (1, 2) AND clustering_2 = 3
        singleEq = new SingleColumnRestriction.EQ(toTerm(value3), false);
        multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value1, value2), false);
        restrictions = new Restriction[] { multiEq, multiEq, singleEq };

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.END);

        // clustering_0 = 1 AND (clustering_1, clustering_2) = (2, 3) AND clustering_3 = 4
        singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        singleEq2 = new SingleColumnRestriction.EQ(toTerm(value4), false);
        multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value2, value3), false);
        restrictions = new Restriction[] { singleEq, multiEq, multiEq, singleEq2 };

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, value4, EOC.END);
    }

