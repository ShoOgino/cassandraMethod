    public void collectReducedColumns(IColumnContainer container, Iterator<IColumn> reducedColumns, int gcBefore)
    {
        AbstractType<?> comparator = container.getComparator();

        if (compositesToGroup < 0)
            columnCounter = new ColumnCounter();
        else if (compositesToGroup == 0)
            columnCounter = new ColumnCounter.GroupByPrefix(null, 0);
        else
            columnCounter = new ColumnCounter.GroupByPrefix((CompositeType)comparator, compositesToGroup);

        while (reducedColumns.hasNext())
        {
            IColumn column = reducedColumns.next();
            if (logger.isTraceEnabled())
                logger.trace(String.format("collecting %s of %s: %s",
                                           columnCounter.live(), count, column.getString(comparator)));

            columnCounter.count(column, container);

            if (columnCounter.live() > count)
            {
                logger.debug("Read %s live columns and %s tombstoned", columnCounter.live(), columnCounter.ignored());
                break;
            }

            // but we need to add all non-gc-able columns to the result for read repair:
            if (QueryFilter.isRelevant(column, container, gcBefore))
                container.addColumn(column);
        }
    }

