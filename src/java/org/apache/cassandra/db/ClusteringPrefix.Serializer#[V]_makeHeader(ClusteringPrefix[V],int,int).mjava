        /**
         * Whatever the type of a given clustering column is, its value can always be either empty or null. So we at least need to distinguish those
         * 2 values, and because we want to be able to store fixed width values without appending their (fixed) size first, we need a way to encode
         * empty values too. So for that, every clustering prefix includes a "header" that contains 2 bits per element in the prefix. For each element,
         * those 2 bits encode whether the element is null, empty, or none of those.
         */
        private static <V> long makeHeader(ClusteringPrefix<V> clustering, int offset, int limit)
        {
            long header = 0;
            ValueAccessor<V> accessor = clustering.accessor();
            for (int i = offset ; i < limit ; i++)
            {
                V v = clustering.get(i);
                // no need to do modulo arithmetic for i, since the left-shift execute on the modulus of RH operand by definition
                if (v == null)
                    header |= (1L << (i * 2) + 1);
                else if (accessor.isEmpty(v))
                    header |= (1L << (i * 2));
            }
            return header;
        }

