    public static IDiskAtomFilter fromSCNamesFilter(CellNameType type, ByteBuffer scName, NamesQueryFilter filter)
    {
        if (scName == null)
        {
            ColumnSlice[] slices = new ColumnSlice[filter.columns.size()];
            int i = 0;
            for (CellName name : filter.columns)
            {
                // Note that, because the filter in argument is the one from thrift, 'name' are SimpleDenseCellName.
                // So calling name.slice() would be incorrect, as simple cell names don't handle the EOC properly.
                // This is why we call toByteBuffer() and rebuild a  Composite of the right type before call slice().
                slices[i++] = type.make(name.toByteBuffer()).slice();
            }
            return new SliceQueryFilter(slices, false, slices.length, 1);
        }
        else
        {
            SortedSet<CellName> newColumns = new TreeSet<>(type);
            for (CellName c : filter.columns)
                newColumns.add(type.makeCellName(scName, c.toByteBuffer()));
            return filter.withUpdatedColumns(newColumns);
        }
    }

