    /**
     * Sort a sortable.
     *
     * The actual algorithm is a direct adaptation of the standard sorting in golang
     * at http://golang.org/src/pkg/sort/sort.go (comments included).
     *
     * It makes one call to data.Len to determine n, and O(n*log(n)) calls to
     * data.Less and data.Swap. The sort is not guaranteed to be stable.
     */
    public static void sort(Sortable data)
    {
        // Switch to heapsort if depth of 2*ceil(lg(n+1)) is reached.
        int n = data.size();
        int maxDepth = 0;
        for (int i = n; i > 0; i >>= 1)
            maxDepth++;
        maxDepth *= 2;
        quickSort(data, 0, n, maxDepth);
    }

