    /**
     * Return a set of files that are temporary, that is they are involved with
     * a transaction that hasn't completed yet.
     *
     * Only return the files that exist and that are located in the folder
     * specified as a parameter or its sub-folders.
     */
    static Set<File> getTemporaryFiles(CFMetaData metadata, File folder)
    {
        Set<File> ret = new HashSet<>();
        Set<UUID> ids = new HashSet<>();

        for (File dir : getFolders(metadata, folder))
        {
            File[] logs = dir.listFiles((dir1, name) -> {
                return TransactionData.isLogFile(name);
            });

            for (File log : logs)
            {
                try(TransactionData data = TransactionData.make(log))
                {
                    // we need to check this because there are potentially 2 log files per transaction
                    if (ids.contains(data.id))
                        continue;

                    ids.add(data.id);
                    ret.addAll(data.getTemporaryFiles()
                                   .stream()
                                   .filter(file -> FileUtils.isContained(folder, file))
                                   .collect(Collectors.toSet()));
                }
            }
        }

        return ret;
    }

