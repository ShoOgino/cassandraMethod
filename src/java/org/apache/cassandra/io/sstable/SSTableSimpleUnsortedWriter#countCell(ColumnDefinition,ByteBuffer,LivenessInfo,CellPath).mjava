    private void countCell(ColumnDefinition column, ByteBuffer value, LivenessInfo info, CellPath path)
    {
        // Note that the accounting of a cell is a bit inaccurate (it doesn't take some of the file format optimization into account)
        // and the maintaining of the bufferSize is in general not perfect. This has always been the case for this class but we should
        // improve that. In particular, what we count is closer to the serialized value, but it's debatable that it's the right thing
        // to count since it will take a lot more space in memory and the bufferSize if first and foremost used to avoid OOM when
        // using this writer.

        count(1); // Each cell has a byte flag on disk

        if (value.hasRemaining())
            count(column.type.writtenLength(value, TypeSizes.NATIVE));

        count(8); // timestamp
        if (info.hasLocalDeletionTime())
            count(4);
        if (info.hasTTL())
            count(4);

        if (path != null)
        {
            assert path.size() == 1;
            count(2 + path.get(0).remaining());
        }
    }

