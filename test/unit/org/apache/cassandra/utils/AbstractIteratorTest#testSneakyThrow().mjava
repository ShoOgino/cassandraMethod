    @Test
    public void testSneakyThrow() throws Exception
    {
        Iterator<Integer> iter = new AbstractIterator<Integer>()
        {
            boolean haveBeenCalled;

            @Override
            public Integer computeNext()
            {
                if (haveBeenCalled)
                {
                    Assert.fail("Should not have been called again");
                }
                else
                {
                    haveBeenCalled = true;
                    sneakyThrow(new SomeCheckedException());
                }
                return null; // never reached
            }
        };

        // The first time, the sneakily-thrown exception comes out
        try
        {
            iter.hasNext();
            Assert.fail("No exception thrown");
        }
        catch (Exception e)
        {
            if (!(e instanceof SomeCheckedException))
            {
                throw e;
            }
        }

        // But the second time, AbstractIterator itself throws an ISE
        try
        {
            iter.hasNext();
            Assert.fail("No exception thrown");
        }
        catch (IllegalStateException expected)
        {
        }
    }

