    /**
     * Creates an {@code ArrayBackedPartition} holding all the data of the provided iterator.
     *
     * Warning: Note that this method does not close the provided iterator and it is
     * up to the caller to do so.
     *
     * @param iterator the iterator to gather in memory.
     * @param initialRowCapacity sizing hint (in rows) to use for the created partition. It should ideally
     * correspond or be a good estimation of the number or rows in {@code iterator}.
     * @return the created partition.
     */
    public static ArrayBackedPartition create(UnfilteredRowIterator iterator, int initialRowCapacity)
    {
        ArrayBackedPartition partition = new ArrayBackedPartition(iterator.metadata(),
                                                                  iterator.partitionKey(),
                                                                  iterator.partitionLevelDeletion(),
                                                                  iterator.columns(),
                                                                  initialRowCapacity,
                                                                  iterator.isReverseOrder());

        partition.staticRow = iterator.staticRow().takeAlias();

        Writer writer = partition.new Writer(true);
        RangeTombstoneCollector markerCollector = partition.new RangeTombstoneCollector(iterator.isReverseOrder());

        copyAll(iterator, writer, markerCollector, partition);

        return partition;
    }

