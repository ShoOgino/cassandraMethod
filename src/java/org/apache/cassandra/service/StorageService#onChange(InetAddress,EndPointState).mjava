    /**
     *  Called when there is a change in application state. In particular
     *  we are interested in new tokens as a result of a new node or an
     *  existing node moving to a new location on the ring.
    */
    public void onChange(InetAddress endpoint, EndPointState epState)
    {
        /* node identifier for this endpoint on the identifier space */
        ApplicationState nodeIdState = epState.getApplicationState(StorageService.NODE_ID);
        /* Check if this has a bootstrapping state message */
        ApplicationState modeState = epState.getApplicationState(StorageService.MODE);
        if (modeState != null)
        {
            String mode = modeState.getState();
            if (logger_.isDebugEnabled())
                logger_.debug(endpoint + " is in " + mode + " mode");
            boolean bootstrapState = mode.equals(MODE_MOVING);
            tokenMetadata_.setBootstrapping(endpoint,  bootstrapState);
        }

        if (nodeIdState == null)
        {
            /*
             * If we are here and if this node is UP and already has an entry
             * in the token map. It means that the node was behind a network partition.
            */
            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))
            {
                if (logger_.isDebugEnabled())
                    logger_.debug("InetAddress " + endpoint + " just recovered from a partition. Sending hinted data.");
                deliverHints(endpoint);
            }
        }
        else
        {
            Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());
            if (logger_.isDebugEnabled())
              logger_.debug("CHANGE IN STATE FOR " + endpoint + " - has token " + nodeIdState.getState());

            if (tokenMetadata_.isMember(endpoint))
            {
                Token oldToken = tokenMetadata_.getToken(endpoint);

                /*
                 * If oldToken equals the newToken then the node had crashed
                 * and is coming back up again. If oldToken is not equal to
                 * the newToken this means that the node is being relocated
                 * to another position in the ring.
                */
                if (!oldToken.equals(newToken))
                {
                    if (logger_.isDebugEnabled())
                        logger_.debug("Relocation for endpoint " + endpoint);
                    updateForeignToken(newToken, endpoint);
                }
                else
                {
                    /*
                     * This means the node crashed and is coming back up.
                     * Deliver the hints that we have for this endpoint.
                    */
                    if (logger_.isDebugEnabled())
                        logger_.debug("Sending hinted data to " + endpoint);
                    deliverHints(endpoint);
                }
            }
            else
            {
                /*
                 * This is a new node and we just update the token map.
                */
                updateForeignToken(newToken, endpoint);
            }
        }
    }

