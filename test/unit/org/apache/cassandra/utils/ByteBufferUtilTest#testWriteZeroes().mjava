    @Test
    public void testWriteZeroes()
    {
        byte[] initial = new byte[1024];
        Arrays.fill(initial, (byte) 1);
        for (ByteBuffer b : new ByteBuffer[] { ByteBuffer.allocate(1024), ByteBuffer.allocateDirect(1024) })
        {
            for (int i = 0; i <= 32; ++i)
                for (int j = 1024; j >= 1024 - 32; --j)
                {
                    b.clear();
                    b.put(initial);
                    b.flip();
                    b.position(i);
                    ByteBufferUtil.writeZeroes(b, j-i);
                    assertEquals(j, b.position());
                    int ii = 0;
                    for (; ii < i; ++ii)
                        assertEquals(initial[ii], b.get(ii));
                    for (; ii < j; ++ii)
                        assertEquals(0, b.get(ii));
                    for (; ii < 1024; ++ii)
                        assertEquals(initial[ii], b.get(ii));

                    b.clear();
                    b.put(initial);
                    b.limit(j).position(i);
                    ByteBuffer slice = b.slice();
                    ByteBufferUtil.writeZeroes(slice, slice.capacity());
                    assertFalse(slice.hasRemaining());
                    b.clear();  // reset position and limit for check
                    ii = 0;
                    for (; ii < i; ++ii)
                        assertEquals(initial[ii], b.get(ii));
                    for (; ii < j; ++ii)
                        assertEquals(0, b.get(ii));
                    for (; ii < 1024; ++ii)
                        assertEquals(initial[ii], b.get(ii));

                    slice.clear();
                    try
                    {
                        ByteBufferUtil.writeZeroes(slice, slice.capacity() + 1);
                        fail("Line above should throw.");
                    }
                    catch (BufferOverflowException | IndexOutOfBoundsException e)
                    {
                        // correct path
                    }
                }
        }
    }

