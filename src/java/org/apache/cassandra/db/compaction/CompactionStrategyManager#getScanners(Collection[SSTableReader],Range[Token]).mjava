    /**
     * Create ISSTableScanner from the given sstables
     *
     * Delegates the call to the compaction strategies to allow LCS to create a scanner
     * @param sstables
     * @param range
     * @return
     */
    public synchronized AbstractCompactionStrategy.ScannerList getScanners(Collection<SSTableReader> sstables, Range<Token> range)
    {
        List<SSTableReader> repairedSSTables = new ArrayList<>();
        List<SSTableReader> unrepairedSSTables = new ArrayList<>();

        for (SSTableReader sstable : sstables)
        {
            if (sstable.isRepaired())
                repairedSSTables.add(sstable);
            else
                unrepairedSSTables.add(sstable);
        }

        List<ISSTableScanner> scanners = new ArrayList<>();

        if (!repairedSSTables.isEmpty())
            scanners.addAll(repaired.getScanners(repairedSSTables, range).scanners);
        if (!unrepairedSSTables.isEmpty())
            scanners.addAll(unrepaired.getScanners(unrepairedSSTables, range).scanners);

        return new AbstractCompactionStrategy.ScannerList(scanners);
    }

