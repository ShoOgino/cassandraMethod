    public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata, String table)
    {
        int startIndex;
        List<Token> tokenList = new ArrayList<Token>();
        List tokens = new ArrayList<Token>(metadata.sortedTokens());
        ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(tokenList.size());

        if (tokens.isEmpty())
            return endpoints;

        int index = Collections.binarySearch(tokens, token);
        if (index < 0)
        {
            index = (index + 1) * (-1);
            if (index >= tokens.size())
                index = 0;
        }
        int totalNodes = tokens.size();
        // Add the token at the index by default
        tokenList.add((Token) tokens.get(index));
        startIndex = (index + 1) % totalNodes;
        // If we found N number of nodes we are good. This loop will just exit. Otherwise just
        // loop through the list and add until we have N nodes.
        final int replicas = DatabaseDescriptor.getReplicationFactor(table);
        for (int i = startIndex, count = 1; count < totalNodes && tokenList.size() < replicas; ++count, i = (i + 1) % totalNodes)
        {
            assert !tokenList.contains(tokens.get(i));
            tokenList.add((Token) tokens.get(i));
        }
        for (Token t : tokenList)
            endpoints.add(metadata.getEndPoint(t));
        return endpoints;
    }

