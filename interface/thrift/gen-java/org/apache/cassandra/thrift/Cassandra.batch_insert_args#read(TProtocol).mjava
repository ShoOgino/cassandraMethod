    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYSPACE
            if (field.type == TType.STRING) {
              this.keyspace = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CFMAP
            if (field.type == TType.MAP) {
              {
                TMap _map55 = iprot.readMapBegin();
                this.cfmap = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map55.size);
                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
                {
                  String _key57;
                  List<ColumnOrSuperColumn> _val58;
                  _key57 = iprot.readString();
                  {
                    TList _list59 = iprot.readListBegin();
                    _val58 = new ArrayList<ColumnOrSuperColumn>(_list59.size);
                    for (int _i60 = 0; _i60 < _list59.size; ++_i60)
                    {
                      ColumnOrSuperColumn _elem61;
                      _elem61 = new ColumnOrSuperColumn();
                      _elem61.read(iprot);
                      _val58.add(_elem61);
                    }
                    iprot.readListEnd();
                  }
                  this.cfmap.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

