        // returns 0 if we are currently on the last row we are allocated to visit; 1 if it is after, -1 if it is before
        // this is defined by _limit_, which is wired up from expected (mean) row counts
        // the last row is where position == lastRow, except the last index is 1 less;
        // OR if that row does not exist, it is the last row prior to it
        private int compareToLastRow(int depth)
        {
            for (int i = 0 ; i <= depth ; i++)
            {
                int p = currentRow[i], l = lastRow[i], r = clusteringComponents[i].size();
                if ((p == l) | (r == 1))
                    continue;
                return p - l;
            }
            return 0;
        }

