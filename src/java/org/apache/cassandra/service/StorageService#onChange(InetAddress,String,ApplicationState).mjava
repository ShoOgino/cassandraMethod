    /**
     *  Called when there is a change in application state. In particular
     *  we are interested in new tokens as a result of a new node or an
     *  existing node moving to a new location on the ring.
    */
    public void onChange(InetAddress endpoint, String stateName, ApplicationState state)
    {
        if (StorageService.MODE.equals(stateName))
        {
            String mode = state.getValue();
            if (logger_.isDebugEnabled())
                logger_.debug(endpoint + " is in " + mode + " mode");
            boolean bootstrapState = mode.equals(MODE_MOVING);
            tokenMetadata_.setBootstrapping(endpoint,  bootstrapState);
        }

        if (StorageService.NODE_ID.equals(stateName))
        {
            Token newToken = getPartitioner().getTokenFactory().fromString(state.getValue());
            if (logger_.isDebugEnabled())
              logger_.debug("CHANGE IN STATE FOR " + endpoint + " - has token " + newToken);

            if (tokenMetadata_.isMember(endpoint))
            {
                Token oldToken = tokenMetadata_.getToken(endpoint);

                /*
                 * If oldToken is not equal to
                 * the newToken this means that the node is being relocated
                 * to another position in the ring.
                */
                if (!oldToken.equals(newToken))
                {
                    if (logger_.isDebugEnabled())
                        logger_.debug("Relocation for endpoint " + endpoint);
                    updateForeignToken(newToken, endpoint);
                }
            }
            else
            {
                /*
                 * This is a new node and we just update the token map.
                */
                updateForeignToken(newToken, endpoint);
            }
        }
    }

