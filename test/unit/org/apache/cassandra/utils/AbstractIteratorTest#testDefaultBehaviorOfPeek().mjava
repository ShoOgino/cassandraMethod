    @Test
    public void testDefaultBehaviorOfPeek()
    {
    /*
     * This sample AbstractIterator returns 0 on the first call, 1 on the
     * second, then signals that it's reached the end of the data
     */
        AbstractIterator<Integer> iter = new AbstractIterator<Integer>()
        {
            private int rep;

            @Override
            public Integer computeNext()
            {
                switch (rep++)
                {
                    case 0:
                        return 0;
                    case 1:
                        return 1;
                    case 2:
                        return endOfData();
                    default:
                        Assert.fail("Should not have been invoked again");
                        return null;
                }
            }
        };

        Assert.assertEquals(0, (int) iter.peek());
        Assert.assertEquals(0, (int) iter.peek());
        Assert.assertTrue(iter.hasNext());
        Assert.assertEquals(0, (int) iter.peek());
        Assert.assertEquals(0, (int) iter.next());

        Assert.assertEquals(1, (int) iter.peek());
        Assert.assertEquals(1, (int) iter.next());

        try
        {
            iter.peek();
            Assert.fail("peek() should throw NoSuchElementException at end");
        }
        catch (NoSuchElementException expected)
        {
        }

        try
        {
            iter.peek();
            Assert.fail("peek() should continue to throw NoSuchElementException at end");
        }
        catch (NoSuchElementException expected)
        {
        }

        try
        {
            iter.next();
            Assert.fail("next() should throw NoSuchElementException as usual");
        }
        catch (NoSuchElementException expected)
        {
        }

        try
        {
            iter.peek();
            Assert.fail("peek() should still throw NoSuchElementException after next()");
        }
        catch (NoSuchElementException expected)
        {
        }
    }

