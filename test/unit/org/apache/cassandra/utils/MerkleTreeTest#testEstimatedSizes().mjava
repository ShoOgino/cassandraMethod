    @Test
    public void testEstimatedSizes()
    {
        // With no or negative allowed space we should still get a depth of 1
        Assert.assertEquals(1, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance, -20, 32));
        Assert.assertEquals(1, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance, 0, 32));
        Assert.assertEquals(1, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance, 1, 32));

        // The minimum of 1 megabyte split between RF=3 should yield trees of around 10
        Assert.assertEquals(10, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance,
                                                                     1048576 / 3, 32));

        // With a single megabyte of space we should get 12
        Assert.assertEquals(12, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance,
                                                                     1048576, 32));

        // With 100 megabytes we should get a limit of 19
        Assert.assertEquals(19, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance,
                                                                     100 * 1048576, 32));

        // With 300 megabytes we should get the old limit of 20
        Assert.assertEquals(20, MerkleTree.estimatedMaxDepthForBytes(Murmur3Partitioner.instance,
                                                                     300 * 1048576, 32));
        Assert.assertEquals(20, MerkleTree.estimatedMaxDepthForBytes(RandomPartitioner.instance,
                                                                     300 * 1048576, 32));
        Assert.assertEquals(20, MerkleTree.estimatedMaxDepthForBytes(ByteOrderedPartitioner.instance,
                                                                     300 * 1048576, 32));
    }

