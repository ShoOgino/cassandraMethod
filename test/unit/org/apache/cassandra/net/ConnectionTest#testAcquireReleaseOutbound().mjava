    @Test
    public void testAcquireReleaseOutbound() throws Throwable
    {
        test((inbound, outbound, endpoint) -> {
            ExecutorService executor = Executors.newFixedThreadPool(100);
            int acquireStep = 123;
            Assert.assertTrue(outbound.unsafeAcquireCapacity(100 * 10000, 100 * 10000 * acquireStep));
            AtomicLong acquisitionFailures = new AtomicLong();
            for (int i = 0; i < 100; i++)
            {
                executor.submit(() -> {
                    for (int j = 0; j < 10000; j++)
                    {
                        if (!outbound.unsafeAcquireCapacity(acquireStep))
                            acquisitionFailures.incrementAndGet();
                    }

                });
            }

            for (int i = 0; i < 100; i++)
            {
                executor.submit(() -> {
                    for (int j = 0; j < 10000; j++)
                        outbound.unsafeReleaseCapacity(acquireStep);
                });
            }

            executor.shutdown();
            executor.awaitTermination(10, TimeUnit.SECONDS);

            // We can release more than we acquire, which certainly should not happen in
            // real life, but since it's a test just for acquisition and release, it is fine
            Assert.assertEquals(100 * 10000 * acquireStep - (acquisitionFailures.get() * acquireStep), outbound.pendingBytes());
        });
    }

