    /**
     * Build a CQL String representation of User Types used in the given table.
     *
     * Type order is ensured as types are built incrementally: from the innermost (most nested)
     * to the outermost.
     *
     * @param metadata the table for which to extract the user types CQL statements.
     * @param types the user types defined in the keyspace of the dumped table (which will thus contain any user type
     * used by {@code metadata}).
     * @param ifNotExists set to true if IF NOT EXISTS should be appended after CREATE TYPE string.
     * @return a list of {@code CREATE TYPE} statements corresponding to all the types used in {@code metadata}.
     */
    @VisibleForTesting
    public static Stream<String> getUserTypesAsCQL(TableMetadata metadata, Types types, boolean ifNotExists)
    {
        /*
         * Implementation note: at first approximation, it may seem like we don't need the Types argument and instead
         * directly extract the user types from the provided TableMetadata. Indeed, full user types definitions are
         * contained in UserType instances.
         *
         * However, the UserType instance found within the TableMetadata may have been frozen in such a way that makes
         * it challenging.
         *
         * Consider the user has created:
         *   CREATE TYPE inner (a set<int>);
         *   CREATE TYPE outer (b inner);
         *   CREATE TABLE t (k int PRIMARY KEY, c1 frozen<outer>, c2 set<frozen<inner>>)
         * The corresponding TableMetadata would have, as types (where 'mc=true' means that the type has his isMultiCell
         * set to true):
         *   c1: UserType(mc=false, "outer", b->UserType(mc=false, "inner", a->SetType(mc=fase, Int32Type)))
         *   c2: SetType(mc=true, UserType(mc=false, "inner", a->SetType(mc=fase, Int32Type)))
         * From which, it's impossible to decide if we should dump the types above, or instead:
         *   CREATE TYPE inner (a frozen<set<int>>);
         *   CREATE TYPE outer (b frozen<inner>);
         * or anything in-between.
         *
         * And while, as of the current limitation around multi-cell types (that are only support non-frozen at
         * top-level), any of the generated definition would kind of "work", 1) this could confuse users and 2) this
         * would break if we do lift the limitation, which wouldn't be future proof.
         */
        return metadata.getReferencedUserTypes()
                       .stream()
                       .map(name -> getType(metadata, types, name).toCqlString(false, ifNotExists));
    }

