    private static TableMetadata createTableMetadata(String ks, RandomnessSource rnd)
    {
        String tableName = IDENTIFIER_GEN.generate(rnd);
        TableMetadata.Builder builder = TableMetadata.builder(ks, tableName, TableId.fromUUID(Generators.UUID_RANDOM_GEN.generate(rnd)))
                                                     .partitioner(PARTITIONER_GEN.generate(rnd))
                                                     .kind(TABLE_KIND_GEN.generate(rnd))
                                                     .isCounter(BOOLEAN_GEN.generate(rnd))
                                                     .params(TableParams.builder().build());

        // generate columns
        // must have a non-zero amount of partition columns, but may have 0 for the rest; SMALL_POSSITIVE_SIZE_GEN won't return 0
        int numPartitionColumns = SMALL_POSITIVE_SIZE_GEN.generate(rnd);
        int numClusteringColumns = SMALL_POSITIVE_SIZE_GEN.generate(rnd) - 1;
        int numRegularColumns = SMALL_POSITIVE_SIZE_GEN.generate(rnd) - 1;
        int numStaticColumns = SMALL_POSITIVE_SIZE_GEN.generate(rnd) - 1;

        Set<String> createdColumnNames = new HashSet<>();
        for (int i = 0; i < numPartitionColumns; i++)
            builder.addColumn(createColumnDefinition(ks, tableName, ColumnMetadata.Kind.PARTITION_KEY, createdColumnNames, rnd));
        for (int i = 0; i < numClusteringColumns; i++)
            builder.addColumn(createColumnDefinition(ks, tableName, ColumnMetadata.Kind.CLUSTERING, createdColumnNames, rnd));
        for (int i = 0; i < numStaticColumns; i++)
            builder.addColumn(createColumnDefinition(ks, tableName, ColumnMetadata.Kind.STATIC, createdColumnNames, rnd));
        for (int i = 0; i < numRegularColumns; i++)
            builder.addColumn(createColumnDefinition(ks, tableName, ColumnMetadata.Kind.REGULAR, createdColumnNames, rnd));

        return builder.build();
    }

