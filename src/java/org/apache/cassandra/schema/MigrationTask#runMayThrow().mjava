    public void runMayThrow() throws Exception
    {
        if (!FailureDetector.instance.isAlive(endpoint))
        {
            logger.warn("Can't send schema pull request: node {} is down.", endpoint);
            SchemaMigrationDiagnostics.taskSendAborted(endpoint);
            return;
        }

        // There is a chance that quite some time could have passed between now and the MM#maybeScheduleSchemaPull(),
        // potentially enough for the endpoint node to restart - which is an issue if it does restart upgraded, with
        // a higher major.
        if (!MigrationManager.shouldPullSchemaFrom(endpoint))
        {
            logger.info("Skipped sending a migration request: node {} has a higher major version now.", endpoint);
            SchemaMigrationDiagnostics.taskSendAborted(endpoint);
            return;
        }

        Message message = Message.out(SCHEMA_PULL_REQ, noPayload);

        final CountDownLatch completionLatch = new CountDownLatch(1);

        RequestCallback<Collection<Mutation>> cb = msg ->
        {
            try
            {
                Schema.instance.mergeAndAnnounceVersion(msg.payload);
            }
            catch (ConfigurationException e)
            {
                logger.error("Configuration exception merging remote schema", e);
            }
            finally
            {
                completionLatch.countDown();
            }
        };

        // Only save the latches if we need bootstrap or are bootstrapping
        if (monitoringBootstrapStates.contains(SystemKeyspace.getBootstrapState()))
            inflightTasks.offer(completionLatch);

        MessagingService.instance().sendWithCallback(message, endpoint, cb);

        SchemaMigrationDiagnostics.taskRequestSend(endpoint);
    }

