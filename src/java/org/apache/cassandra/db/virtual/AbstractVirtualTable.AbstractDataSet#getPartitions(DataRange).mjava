        public Iterator<Partition> getPartitions(DataRange dataRange)
        {
            AbstractBounds<PartitionPosition> keyRange = dataRange.keyRange();
            PartitionPosition startKey = keyRange.left;
            PartitionPosition endKey = keyRange.right;

            NavigableMap<DecoratedKey, Partition> selection = partitions;

            if (startKey.isMinimum() && endKey.isMinimum())
                return selection.values().iterator();

            if (startKey.isMinimum() && endKey instanceof DecoratedKey)
                return selection.headMap((DecoratedKey) endKey, keyRange.isEndInclusive()).values().iterator();

            if (startKey instanceof DecoratedKey && endKey instanceof DecoratedKey)
            {
                return selection.subMap((DecoratedKey) startKey, keyRange.isStartInclusive(), (DecoratedKey) endKey, keyRange.isEndInclusive())
                                .values()
                                .iterator();
            }

            if (startKey instanceof DecoratedKey)
                selection = selection.tailMap((DecoratedKey) startKey, keyRange.isStartInclusive());

            if (endKey instanceof DecoratedKey)
                selection = selection.headMap((DecoratedKey) endKey, keyRange.isEndInclusive());

            // If we have reach this point it means that one of the PartitionPosition is a KeyBound and we have
            // to use filtering for eliminating the unwanted partitions.
            Iterator<Partition> iterator = selection.values().iterator();

            return new AbstractIterator<Partition>()
            {
                private boolean encounteredPartitionsWithinRange;

                @Override
                protected Partition computeNext()
                {
                    while (iterator.hasNext())
                    {
                        Partition partition = iterator.next();
                        if (dataRange.contains(partition.key()))
                        {
                            encounteredPartitionsWithinRange = true;
                            return partition;
                        }

                        // we encountered some partitions within the range, but the last one is outside of the range: we are done
                        if (encounteredPartitionsWithinRange)
                            return endOfData();
                    }

                    return endOfData();
                }
            };
        }

