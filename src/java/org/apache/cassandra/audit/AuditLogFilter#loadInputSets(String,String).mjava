    /**
     * Constructs mutually exclusive sets of included and excluded data. When there is a conflict,
     * the entry is put into the excluded set (and removed fron the included).
     */
    private static IncludeExcludeHolder loadInputSets(String includedInput, String excludedInput)
    {
        final ImmutableSet<String> excludedSet;
        if (StringUtils.isEmpty(excludedInput))
        {
            excludedSet = EMPTY_FILTERS;
        }
        else
        {
            String[] excludes = excludedInput.split(",");
            ImmutableSet.Builder<String> builder = ImmutableSet.builderWithExpectedSize(excludes.length);
            for (String exclude : excludes)
            {
                if (!exclude.isEmpty())
                {
                    builder.add(exclude);
                }
            }
            excludedSet = builder.build();
        }

        final ImmutableSet<String> includedSet;
        if (StringUtils.isEmpty(includedInput))
        {
            includedSet = EMPTY_FILTERS;
        }
        else
        {
            String[] includes = includedInput.split(",");
            ImmutableSet.Builder<String> builder = ImmutableSet.builderWithExpectedSize(includes.length);
            for (String include : includes)
            {
                //Ensure both included and excluded sets are mutually exclusive
                if (!include.isEmpty() && !excludedSet.contains(include))
                {
                    builder.add(include);
                }
            }
            includedSet = builder.build();
        }

        return new IncludeExcludeHolder(includedSet, excludedSet);
    }

