    private boolean applyAssumption(String cfName, String assumptionElement, String defaultType)
    {
        CfDef columnFamily;

        try
        {
            columnFamily = getCfDef(cfName);
        }
        catch (RuntimeException e)
        {
            return false; // just fail if CF does not exist
        }

        // used to store in this.cfKeysComparator
        AbstractType<?> comparator;
        
        try
        {
            comparator = TypeParser.parse(defaultType);
        }
        catch (ConfigurationException e)
        {
            try
            {
                comparator = Function.valueOf(defaultType.toUpperCase()).getValidator();
            }
            catch (Exception ne)
            {
                String functions = Function.getFunctionNames();
                sessionState.out.println("Type '" + defaultType + "' was not found. Available: " + functions
                                         + " Or any class which extends o.a.c.db.marshal.AbstractType.");
                return false;
            }
        }

        // making string representation look property e.g. o.a.c.db.marshal.UTF8Type
        defaultType = comparator.getClass().getName();

        if (assumptionElement.equals("COMPARATOR"))
        {
            columnFamily.setComparator_type(defaultType);
        }
        else if (assumptionElement.equals("SUB_COMPARATOR"))
        {
            columnFamily.setSubcomparator_type(defaultType);
        }
        else if (assumptionElement.equals("VALIDATOR"))
        {
            columnFamily.setDefault_validation_class(defaultType);
        }
        else if (assumptionElement.equals("KEYS"))
        {
            this.cfKeysComparators.put(columnFamily.getName(), comparator);
        }
        else
        {
            String elements = "VALIDATOR, COMPARATOR, KEYS, SUB_COMPARATOR.";
            sessionState.out.println(String.format("'%s' is invalid. Available: %s", assumptionElement, elements));
            return false;
        }

        return true;
    }

