    /**
     * Deserialize CF metadata from low-level representation
     *
     * @param serializedCfDef The data to use for deserialization
     *
     * @return Thrift-based metadata deserialized from schema
     *
     * @throws IOException on any I/O related error
     */
    public static CfDef fromSchema(ColumnFamily serializedCfDef) throws IOException
    {
        assert serializedCfDef != null;

        CfDef cfDef = new CfDef();

        AbstractType sysComparator = serializedCfDef.getComparator();

        for (IColumn cfAttr : serializedCfDef.getSortedColumns())
        {
            if (cfAttr == null || cfAttr.isMarkedForDelete())
                continue;

            // column name format is <cf>:<attribute name>
            String[] attr = sysComparator.getString(cfAttr.name()).split(":");
            assert attr.length == 2;

            CfDef._Fields field = CfDef._Fields.findByName(attr[1]);
            cfDef.setFieldValue(field, deserializeValue(cfAttr.value(), getValueClass(CfDef.class, field.getFieldName())));
        }

        for (ColumnDef columnDef : ColumnDefinition.fromSchema(cfDef.keyspace, cfDef.name))
            cfDef.addToColumn_metadata(columnDef);

        return cfDef;
    }

