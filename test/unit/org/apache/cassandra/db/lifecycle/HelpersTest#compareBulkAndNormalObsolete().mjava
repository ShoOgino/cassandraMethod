    @Test
    public void compareBulkAndNormalObsolete() throws IOException
    {
        ColumnFamilyStore cfs = MockSchema.newCFS();
        LogTransaction txnLogs = new LogTransaction(OperationType.UNKNOWN);
        LogTransaction txnLogs2 = new LogTransaction(OperationType.UNKNOWN);

        Collection<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs));
        // add a few readers that should not be removed:
        Lists.newArrayList(MockSchema.sstable(3, cfs), MockSchema.sstable(4, cfs));

        List<LogTransaction.Obsoletion> normalObsoletions = new ArrayList<>();
        List<LogTransaction.Obsoletion> bulkObsoletions = new ArrayList<>();

        Assert.assertNull(Helpers.prepareForBulkObsoletion(readers, txnLogs, normalObsoletions, null));
        Assert.assertNull(Helpers.prepareForObsoletion(readers, txnLogs2, bulkObsoletions, null));

        assertEquals(Sets.newHashSet(readers), normalObsoletions.stream().map(obs -> obs.reader).collect(Collectors.toSet()));
        assertEquals(Sets.newHashSet(readers), bulkObsoletions.stream().map(obs -> obs.reader).collect(Collectors.toSet()));

        Set<String> normalLogRecords = new HashSet<>();
        Set<String> bulkLogRecords = new HashSet<>();

        for (File f : txnLogs.logFiles())
            Files.lines(f.toPath()).forEach(bulkLogRecords::add);
        for (File f : txnLogs2.logFiles())
            Files.lines(f.toPath()).forEach(normalLogRecords::add);

        Assert.assertEquals(readers.size(), normalLogRecords.size());
        Assert.assertEquals(bulkLogRecords, normalLogRecords);

        txnLogs.finish();
        txnLogs2.finish();
    }

