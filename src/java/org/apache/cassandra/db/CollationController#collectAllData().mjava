    /**
     * Collects data the brute-force way: gets an iterator for the filter in question
     * from every memtable and sstable, then merges them together.
     */
    private ColumnFamily collectAllData()
    {
        logger.debug("collectAllData");
        List<IColumnIterator> iterators = new ArrayList<IColumnIterator>();
        ColumnFamily returnCF = ColumnFamily.create(cfs.metadata, factory, filter.filter.isReversed());
        List<SSTableReader> sstables;

        while (true)
        {
            DataTracker.View dataview = cfs.getDataTracker().getView();
            for (Memtable memtable : Iterables.concat(dataview.memtablesPendingFlush, Collections.singleton(dataview.memtable)))
            {
                IColumnIterator iter = filter.getMemtableColumnIterator(memtable, cfs.metadata.comparator);
                if (iter != null)
                {
                    returnCF.delete(iter.getColumnFamily());
                    iterators.add(iter);
                }
            }

            /* add the SSTables on disk */
            sstables = dataview.intervalTree.search(new Interval(filter.key, filter.key));
            if (!SSTableReader.acquireReferences(sstables))
                continue; // retry w/ new view

            try
            {
                for (SSTableReader sstable : sstables)
                {
                    IColumnIterator iter = filter.getSSTableColumnIterator(sstable);
                    iterators.add(iter);
                    if (iter.getColumnFamily() != null)
                    {
                        returnCF.delete(iter.getColumnFamily());
                        sstablesIterated++;
                    }
                }
            }
            finally
            {
                SSTableReader.releaseReferences(sstables);
                for (IColumnIterator iter : iterators)
                    FileUtils.closeQuietly(iter);
            }

            break; // sstable reference acquisition was successful
        }

        // we need to distinguish between "there is no data at all for this row" (BF will let us rebuild that efficiently)
        // and "there used to be data, but it's gone now" (we should cache the empty CF so we don't need to rebuild that slower)
        if (iterators.isEmpty())
            return null;

        filter.collateColumns(returnCF, iterators, cfs.metadata.comparator, gcBefore);

        // Caller is responsible for final removeDeletedCF.  This is important for cacheRow to work correctly:
        return returnCF;
    }

