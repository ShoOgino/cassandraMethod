        /**
         * Drain the temporary spool into the final bins
         */
        public void flushHistogram()
        {
            if (spool.size() > 0)
            {
                long[] spoolValue;
                long[] binValue;

                // Iterate over the spool, copying the value into the primary bin map
                // and compacting that map as necessary
                for (Map.Entry<Number, long[]> entry : spool.entrySet())
                {
                    Number key = entry.getKey();
                    spoolValue = entry.getValue();
                    binValue = bin.get(key);

                    // If this value is already in the final histogram bins
                    // Simply increment and update, otherwise, insert a new long[1] value
                    if(binValue != null)
                    {
                        binValue[0] += spoolValue[0];
                        bin.put(key, binValue);
                    }
                    else
                    {
                        bin.put(key, new long[]{spoolValue[0]});
                    }

                    if (bin.size() > maxBinSize)
                    {
                        // find points p1, p2 which have smallest difference
                        Iterator<Number> keys = bin.keySet().iterator();
                        double p1 = keys.next().doubleValue();
                        double p2 = keys.next().doubleValue();
                        double smallestDiff = p2 - p1;
                        double q1 = p1, q2 = p2;
                        while (keys.hasNext())
                        {
                            p1 = p2;
                            p2 = keys.next().doubleValue();
                            double diff = p2 - p1;
                            if (diff < smallestDiff)
                            {
                                smallestDiff = diff;
                                q1 = p1;
                                q2 = p2;
                            }
                        }
                        // merge those two
                        long[] a1 = bin.remove(q1);
                        long[] a2 = bin.remove(q2);
                        long k1 = a1[0];
                        long k2 = a2[0];

                        a1[0] += k2;
                        bin.put((q1 * k1 + q2 * k2) / (k1 + k2), a1);

                    }
                }
                spool.clear();
            }
        }

