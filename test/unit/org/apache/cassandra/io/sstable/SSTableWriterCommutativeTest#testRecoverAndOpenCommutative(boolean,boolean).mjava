    /**
     * test recovery and opening of commutative columns
     * @param superColumns whether to test with super columns
     * @param forceExceedMemoryLimit if true, sets "in_memory_compaction_limit_in_mb" to 0 to force use of LazilyCompactedRow, otherwise, PreCompactedRow is used
     */
    public void testRecoverAndOpenCommutative(boolean superColumns, boolean forceExceedMemoryLimit) throws IOException, ExecutionException, InterruptedException, UnknownHostException
    {
        String keyspace = "Keyspace1";
        String cfname   = superColumns ? "SuperCounter1" : "Counter1";

        Map<String, ColumnFamily> entries = new HashMap<String, ColumnFamily>();
        Map<String, ColumnFamily> cleanedEntries = new HashMap<String, ColumnFamily>();

        ColumnFamily cf;
        ColumnFamily cfCleaned;
        CounterContext.ContextState state;
        IColumn column;
        IColumn columnCleaned;
        ByteBuffer superColumnName;

        // key: k
        cf = ColumnFamily.create(keyspace, cfname);
        cfCleaned = ColumnFamily.create(keyspace, cfname);
        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(2), 9L, 3L, true);
        state.writeElement(NodeId.fromInt(4), 4L, 2L);
        state.writeElement(NodeId.fromInt(6), 3L, 3L);
        state.writeElement(NodeId.fromInt(8), 2L, 4L);
        column = new CounterColumn( ByteBufferUtil.bytes("x"), state.context, 0L);
        columnCleaned = new CounterColumn( ByteBufferUtil.bytes("x"), cc.clearAllDelta(state.context), 0L);

        if (superColumns)
        {
            superColumnName = ByteBufferUtil.bytes("TestSuperColumn1");
            column = superCounterColumnify(superColumnName, column);
            columnCleaned = superCounterColumnify(superColumnName, columnCleaned);
        }

        cf.addColumn(column);
        cfCleaned.addColumn(columnCleaned);

        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(1), 7L, 12L);
        state.writeElement(NodeId.fromInt(2), 5L, 3L, true);
        state.writeElement(NodeId.fromInt(3), 2L, 33L);
        state.writeElement(NodeId.fromInt(9), 1L, 24L);
        column = new CounterColumn( ByteBufferUtil.bytes("y"), state.context, 0L);
        columnCleaned = new CounterColumn( ByteBufferUtil.bytes("y"), cc.clearAllDelta(state.context), 0L);

        if (superColumns)
        {
            superColumnName = ByteBufferUtil.bytes("TestSuperColumn2");
            column = superCounterColumnify(superColumnName, column);
            columnCleaned = superCounterColumnify(superColumnName, columnCleaned);
        }

        cf.addColumn(column);
        cfCleaned.addColumn(columnCleaned);

        entries.put("k", cf);
        cleanedEntries.put("k", cfCleaned);

        // key: l
        cf = ColumnFamily.create(keyspace, cfname);
        cfCleaned = ColumnFamily.create(keyspace, cfname);
        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(2), 9L, 3L, true);
        state.writeElement(NodeId.fromInt(4), 4L, 2L);
        state.writeElement(NodeId.fromInt(6), 3L, 3L);
        state.writeElement(NodeId.fromInt(8), 2L, 4L);
        column = new CounterColumn( ByteBufferUtil.bytes("x"), state.context, 0L);
        columnCleaned = new CounterColumn( ByteBufferUtil.bytes("x"), cc.clearAllDelta(state.context), 0L);

        if (superColumns)
        {
            superColumnName = ByteBufferUtil.bytes("TestSuperColumn3");
            column = superCounterColumnify(superColumnName, column);
            columnCleaned = superCounterColumnify(superColumnName, columnCleaned);
        }

        cf.addColumn(column);
        cfCleaned.addColumn(columnCleaned);

        state = CounterContext.ContextState.allocate(3, 0);
        state.writeElement(NodeId.fromInt(1), 7L, 12L);
        state.writeElement(NodeId.fromInt(3), 2L, 33L);
        state.writeElement(NodeId.fromInt(9), 1L, 24L);
        column = new CounterColumn( ByteBufferUtil.bytes("y"), state.context, 0L);
        columnCleaned = new CounterColumn( ByteBufferUtil.bytes("y"), cc.clearAllDelta(state.context), 0L);

        if (superColumns)
        {
            superColumnName = ByteBufferUtil.bytes("TestSuperColumn4");
            column = superCounterColumnify(superColumnName, column);
            columnCleaned = superCounterColumnify(superColumnName, columnCleaned);
        }

        cf.addColumn(column);
        cfCleaned.addColumn(columnCleaned);

        entries.put("l", cf);
        cleanedEntries.put("l", cfCleaned);

        // write out unmodified CF
        SSTableReader orig = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).write(entries);
        long origMaxTimestamp = orig.getMaxTimestamp();

        // whack the index to trigger the recover
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.FILTER));

        // set in_memory_compaction_limit_in_mb small to force use of LazilyCompactedRow, otherwise, PreCompactedRow is used
        DatabaseDescriptor.setInMemoryCompactionLimit(forceExceedMemoryLimit ? 0 : 256);

        // re-build inline
        SSTableReader rebuilt = CompactionManager.instance.submitSSTableBuild(
            orig.descriptor,
            OperationType.AES
            ).get();

        // ensure max timestamp is captured during rebuild
        assert rebuilt.getMaxTimestamp() == origMaxTimestamp;

        // write out cleaned CF
        SSTableReader cleaned = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).write(cleanedEntries);

        // verify
        RandomAccessReader origFile    = RandomAccessReader.open(new File(orig.descriptor.filenameFor(SSTable.COMPONENT_DATA)), 8 * 1024 * 1024);
        RandomAccessReader cleanedFile = RandomAccessReader.open(new File(cleaned.descriptor.filenameFor(SSTable.COMPONENT_DATA)), 8 * 1024 * 1024);

        while(origFile.getFilePointer() < origFile.length() && cleanedFile.getFilePointer() < cleanedFile.length())
        {
            assert origFile.readByte() == cleanedFile.readByte();
        }
        assert origFile.getFilePointer() == origFile.length();
        assert cleanedFile.getFilePointer() == cleanedFile.length();
    }

