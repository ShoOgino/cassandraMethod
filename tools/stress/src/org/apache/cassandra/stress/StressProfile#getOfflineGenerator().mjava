    public PartitionGenerator getOfflineGenerator()
    {
        org.apache.cassandra.schema.TableMetadata metadata = CreateTableStatement.parse(tableCql, keyspaceName).build();

        //Add missing column configs
        Iterator<ColumnMetadata> it = metadata.allColumnsInSelectOrder();
        while (it.hasNext())
        {
            ColumnMetadata c = it.next();
            if (!columnConfigs.containsKey(c.name.toString()))
                columnConfigs.put(c.name.toString(), new GeneratorConfig(seedStr + c.name.toString(), null, null, null));
        }

        List<Generator> partitionColumns = metadata.partitionKeyColumns().stream()
                                                   .map(c -> new ColumnInfo(c.name.toString(), c.type.asCQL3Type().toString(), "", columnConfigs.get(c.name.toString())))
                                                   .map(c -> c.getGenerator())
                                                   .collect(Collectors.toList());

        List<Generator> clusteringColumns = metadata.clusteringColumns().stream()
                                                    .map(c -> new ColumnInfo(c.name.toString(), c.type.asCQL3Type().toString(), "", columnConfigs.get(c.name.toString())))
                                                    .map(c -> c.getGenerator())
                                                    .collect(Collectors.toList());

        List<Generator> regularColumns = com.google.common.collect.Lists.newArrayList(metadata.regularAndStaticColumns().selectOrderIterator()).stream()
                                                                        .map(c -> new ColumnInfo(c.name.toString(), c.type.asCQL3Type().toString(), "", columnConfigs.get(c.name.toString())))
                                                                        .map(c -> c.getGenerator())
                                                                        .collect(Collectors.toList());

        return new PartitionGenerator(partitionColumns, clusteringColumns, regularColumns, PartitionGenerator.Order.ARBITRARY);
    }

