        public void tidy()
        {
            if (readMeterSyncFuture != null)
                readMeterSyncFuture.cancel(false);

            synchronized (replaceLock)
            {
                boolean closeBf = true, closeSummary = true, closeFiles = true, deleteFiles = isCompacted.get();

                if (replacedBy != null)
                {
                    closeBf = replacedBy.bf != bf;
                    closeSummary = replacedBy.indexSummary != indexSummary;
                    closeFiles = replacedBy.dfile != dfile;
                    // if the replacement sstablereader uses a different path, clean up our paths
                    deleteFiles = !dfile.path.equals(replacedBy.dfile.path);
                }

                if (replaces != null)
                {
                    closeBf &= replaces.bf != bf;
                    closeSummary &= replaces.indexSummary != indexSummary;
                    closeFiles &= replaces.dfile != dfile;
                    deleteFiles &= !dfile.path.equals(replaces.dfile.path);
                }

                boolean deleteAll = false;
                if (isCompacted.get())
                {
                    assert replacedBy == null;
                    if (replaces != null && !deleteFiles)
                    {
                        replaces.tidy.replacedBy = null;
                        replaces.tidy.deletingTask = deletingTask;
                        replaces.markObsolete();
                    }
                    else
                    {
                        deleteAll = true;
                    }
                }
                else
                {
                    closeSummary &= indexSummary != null;
                    if (replaces != null)
                        replaces.tidy.replacedBy = replacedBy;
                    if (replacedBy != null)
                        replacedBy.tidy.replaces = replaces;
                }

                scheduleTidy(closeBf, closeSummary, closeFiles, deleteFiles, deleteAll);
            }
        }

