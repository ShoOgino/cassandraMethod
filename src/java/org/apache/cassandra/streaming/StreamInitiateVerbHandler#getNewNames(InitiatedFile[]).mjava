    // todo: this method needs to be private, or package at the very least for easy unit testing.
    public Map<String, String> getNewNames(InitiatedFile[] initiatedFiles) throws IOException
    {
        /*
         * Mapping for each file with unique CF-i ---> new file name. For eg.
         * for a file with name <CF>-<i>-Data.db there is a corresponding
         * <CF>-<i>-Index.db. We maintain a mapping from <CF>-<i> to a newly
         * generated file name.
        */
        Map<String, String> fileNames = new HashMap<String, String>();
        /* Get the distinct entries from StreamContexts i.e have one entry per Data/Index/Filter file set */
        Set<String> distinctEntries = new HashSet<String>();
        for ( InitiatedFile initiatedFile : initiatedFiles)
        {
            String[] pieces = FBUtilities.strip(new File(initiatedFile.getTargetFile()).getName(), "-");
            distinctEntries.add(initiatedFile.getTable() + "-" + pieces[0] + "-" + pieces[1] );
        }

        /* Generate unique file names per entry */
        for ( String distinctEntry : distinctEntries )
        {
            String tableName;
            String[] pieces = FBUtilities.strip(distinctEntry, "-");
            tableName = pieces[0];
            Table table = Table.open( tableName );

            ColumnFamilyStore cfStore = table.getColumnFamilyStore(pieces[1]);
            if (logger.isDebugEnabled())
              logger.debug("Generating file name for " + distinctEntry + " ...");
            fileNames.put(distinctEntry, cfStore.getTempSSTableFileName());
        }

        return fileNames;
    }

