    @Test
    public void testIndexScan()
    {
        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_INDEX1);
        Mutation rm;
        CellName nobirthdate = cellname("notbirthdate");
        CellName birthdate = cellname("birthdate");

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("k1"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(1L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("k2"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(2L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("k3"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(1L), 0);
        rm.applyUnsafe();

        rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("k4aaaa"));
        rm.add(CF_INDEX1, nobirthdate, ByteBufferUtil.bytes(2L), 0);
        rm.add(CF_INDEX1, birthdate, ByteBufferUtil.bytes(3L), 0);
        rm.applyUnsafe();

        // basic single-expression query
        IndexExpression expr = new IndexExpression(ByteBufferUtil.bytes("birthdate"), IndexExpression.Operator.EQ, ByteBufferUtil.bytes(1L));
        List<IndexExpression> clause = Arrays.asList(expr);
        IDiskAtomFilter filter = new IdentityQueryFilter();
        Range<RowPosition> range = Util.range("", "");
        List<Row> rows = cfs.search(range, clause, filter, 100);

        assert rows != null;
        assert rows.size() == 2 : StringUtils.join(rows, ",");

        String key = new String(rows.get(0).key.getKey().array(), rows.get(0).key.getKey().position(), rows.get(0).key.getKey().remaining());
        assert "k1".equals( key ) : key;

        key = new String(rows.get(1).key.getKey().array(), rows.get(1).key.getKey().position(), rows.get(1).key.getKey().remaining());
        assert "k3".equals(key) : key;

        assert ByteBufferUtil.bytes(1L).equals( rows.get(0).cf.getColumn(birthdate).value());
        assert ByteBufferUtil.bytes(1L).equals( rows.get(1).cf.getColumn(birthdate).value());

        // add a second expression
        IndexExpression expr2 = new IndexExpression(ByteBufferUtil.bytes("notbirthdate"), IndexExpression.Operator.GTE, ByteBufferUtil.bytes(2L));
        clause = Arrays.asList(expr, expr2);
        rows = cfs.search(range, clause, filter, 100);

        assert rows.size() == 1 : StringUtils.join(rows, ",");
        key = new String(rows.get(0).key.getKey().array(), rows.get(0).key.getKey().position(), rows.get(0).key.getKey().remaining());
        assert "k3".equals( key );

        // same query again, but with resultset not including the subordinate expression
        rows = cfs.search(range, clause, Util.namesFilter(cfs, "birthdate"), 100);

        assert rows.size() == 1 : StringUtils.join(rows, ",");
        key = new String(rows.get(0).key.getKey().array(), rows.get(0).key.getKey().position(), rows.get(0).key.getKey().remaining());
        assert "k3".equals( key );

        assert rows.get(0).cf.getColumnCount() == 1 : rows.get(0).cf;

        // once more, this time with a slice rowset that needs to be expanded
        SliceQueryFilter emptyFilter = new SliceQueryFilter(Composites.EMPTY, Composites.EMPTY, false, 0);
        rows = cfs.search(range, clause, emptyFilter, 100);

        assert rows.size() == 1 : StringUtils.join(rows, ",");
        key = new String(rows.get(0).key.getKey().array(), rows.get(0).key.getKey().position(), rows.get(0).key.getKey().remaining());
        assert "k3".equals( key );

        assertFalse(rows.get(0).cf.hasColumns());

        // query with index hit but rejected by secondary clause, with a small enough count that just checking count
        // doesn't tell the scan loop that it's done
        IndexExpression expr3 = new IndexExpression(ByteBufferUtil.bytes("notbirthdate"), IndexExpression.Operator.EQ, ByteBufferUtil.bytes(-1L));
        clause = Arrays.asList(expr, expr3);
        rows = cfs.search(range, clause, filter, 100);

        assert rows.isEmpty();
    }

