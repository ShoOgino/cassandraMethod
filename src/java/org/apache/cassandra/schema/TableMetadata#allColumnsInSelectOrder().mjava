    /*
     * An iterator over all column definitions but that respect the order of a SELECT *.
     * This also "hide" the clustering/regular columns for a non-CQL3 non-dense table for backward compatibility
     * sake.
     */
    public Iterator<ColumnMetadata> allColumnsInSelectOrder()
    {
        final boolean isStaticCompactTable = isStaticCompactTable();
        final boolean noNonPkColumns = isCompactTable() && CompactTables.hasEmptyCompactValue(this);

        return new AbstractIterator<ColumnMetadata>()
        {
            private final Iterator<ColumnMetadata> partitionKeyIter = partitionKeyColumns.iterator();
            private final Iterator<ColumnMetadata> clusteringIter =
                isStaticCompactTable ? Collections.emptyIterator() : clusteringColumns.iterator();
            private final Iterator<ColumnMetadata> otherColumns =
                noNonPkColumns
              ? Collections.emptyIterator()
              : (isStaticCompactTable ? staticColumns().selectOrderIterator()
                                      : regularAndStaticColumns.selectOrderIterator());

            protected ColumnMetadata computeNext()
            {
                if (partitionKeyIter.hasNext())
                    return partitionKeyIter.next();

                if (clusteringIter.hasNext())
                    return clusteringIter.next();

                return otherColumns.hasNext() ? otherColumns.next() : endOfData();
            }
        };
    }

