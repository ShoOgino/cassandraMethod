        public void onStreamCompletion(String host, StreamContextManager.StreamContext streamContext, StreamContextManager.StreamStatus streamStatus) throws IOException
        {
            /* Parse the stream context and the file to the list of SSTables in the associated Column Family Store. */
            if (streamContext.getTargetFile().contains("-Data.db"))
            {
                String tableName = streamContext.getTable();
                File file = new File( streamContext.getTargetFile() );
                String fileName = file.getName();
                String [] temp = fileName.split("-");

                //Open the file to see if all parts are now here
                SSTableReader sstable = null;
                try
                {
                    sstable = SSTableWriter.renameAndOpen(streamContext.getTargetFile());

                    //TODO add a sanity check that this sstable has all its parts and is ok
                    Table.open(tableName).getColumnFamilyStore(temp[0]).addSSTable(sstable);
                    logger_.info("Bootstrap added " + sstable.getFilename());
                }
                catch (IOException e)
                {
                    logger_.error("Not able to bootstrap with file " + streamContext.getTargetFile(), e);
                }
            }

            EndPoint to = new EndPoint(host, DatabaseDescriptor.getStoragePort());
            if (logger_.isDebugEnabled())
              logger_.debug("Sending a bootstrap terminate message with " + streamStatus + " to " + to);
            /* Send a StreamStatusMessage object which may require the source node to re-stream certain files. */
            StreamContextManager.StreamStatusMessage streamStatusMessage = new StreamContextManager.StreamStatusMessage(streamStatus);
            Message message = StreamContextManager.StreamStatusMessage.makeStreamStatusMessage(streamStatusMessage);
            MessagingService.instance().sendOneWay(message, to);
            /* If we're done with everything for this host, remove from bootstrap sources */
            if (StreamContextManager.isDone(to.getHost()))
                StorageService.instance().removeBootstrapSource(to);
        }

