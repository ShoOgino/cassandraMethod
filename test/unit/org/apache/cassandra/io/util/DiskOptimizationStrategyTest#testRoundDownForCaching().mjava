    @Test
    public void testRoundDownForCaching()
    {
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(-1, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(0, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(1, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4095, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4096, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4097, false));
        assertEquals(4096, DiskOptimizationStrategy.roundForCaching(4098, false));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(8192, false));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(8193, false));
        assertEquals(8192, DiskOptimizationStrategy.roundForCaching(12288, false));
        assertEquals(16384, DiskOptimizationStrategy.roundForCaching(16384, false));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(65536, false));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(65537, false));
        assertEquals(65536, DiskOptimizationStrategy.roundForCaching(131072, false));

        for (int cs = 4096; cs < 65536; cs <<= 1) // 4096, 8192, 12288, ..., 65536
        {
            for (int i = cs; i < cs * 2 - 1; i++) // 4096 -> 8191, 8192 -> 12287, ...
            {
                assertEquals(cs, DiskOptimizationStrategy.roundForCaching(i, false));
            }
        }
    }

