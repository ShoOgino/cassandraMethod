    @Test
    public void testDifferencer() throws Throwable
    {
        // generate a tree
        Validator validator = new Validator(request);
        validator.prepare(store);
        validator.complete();
        MerkleTree ltree = validator.tree;

        // and a clone
        validator = new Validator(request);
        validator.prepare(store);
        validator.complete();
        MerkleTree rtree = validator.tree;

        // change a range we own in one of the trees
        Token ltoken = StorageService.instance.getLocalToken();
        ltree.invalidate(ltoken);
        MerkleTree.TreeRange changed = ltree.invalids(StorageService.instance.getLocalPrimaryRange()).next();
        changed.hash("non-empty hash!".getBytes());
        // the changed range has two halves, split on our local token: both will be repaired
        // (since this keyspace has RF > N, so every node is responsible for the entire ring)
        Set<Range> interesting = new HashSet<Range>();
        interesting.add(new Range(changed.left, ltoken));
        interesting.add(new Range(ltoken, changed.right));

        // difference the trees
        Differencer diff = new Differencer(request, ltree, rtree);
        diff.run();
        
        // ensure that the changed range was recorded
        assertEquals("Wrong differing ranges", interesting, new HashSet<Range>(diff.differences));
    }

