    /**
     * Checks that the provided data resolver has the expected number of repair futures created.
     * This method also "release" those future by faking replica responses to those repair, which is necessary or
     * every test would timeout when closing the result of resolver.resolve(), since it waits on those futures.
     */
    private void assertRepairFuture(DataResolver resolver, int expectedRepairs)
    {
        assertEquals(expectedRepairs, resolver.repairResults.size());

        // Signal all future. We pass a completely fake response message, but it doesn't matter as we just want
        // AsyncOneResponse to signal success, and it only cares about a non-null MessageIn (it collects the payload).
        for (AsyncOneResponse<?> future : resolver.repairResults)
            future.response(MessageIn.create(null, null, null, null, -1));
    }

