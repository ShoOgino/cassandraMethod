    public void run()
    {
        TokenMetadata metadata = StorageService.instance.getTokenMetadata().cloneOnlyTokenMap();
        if (!metadata.isMember(FBUtilities.getBroadcastAddressAndPort()))
        {
            logger.debug("Node is not part of the ring; not recording size estimates");
            return;
        }

        logger.trace("Recording size estimates");

        for (Keyspace keyspace : Keyspace.nonLocalStrategy())
        {
            // In tools the call to describe_splits_ex() used to be coupled with the call to describe_local_ring() so
            // most access was for the local primary range; after creating the size_estimates table this was changed
            // to be the primary range.
            // In a multi-dc setup its not uncommon for the local ring to be offset by 1 for the next DC; example:
            // DC1: [0, 10, 20, 30]
            // DC2: [1, 11, 21, 31]
            // DC3: [2, 12, 22, 32]
            // When working with the primary ring we have:
            // [0, 1, 2, 10, 11, 12, 20, 21, 22, 30, 31, 32]
            // this then leads to primrary ranges with one token in it, which cause the estimates to be less useful.
            // Since only one range was published some tools make this assumption; for this reason we can't publish
            // all ranges (including the replica ranges) nor can we keep backwards compatability and publish primary
            // range.  If we publish multiple ranges downstream integrations may start to see duplicate data.
            // See CASSANDRA-15637
            Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRanges(keyspace.getName());
            Collection<Range<Token>> localPrimaryRanges = StorageService.instance.getLocalPrimaryRange();
            boolean rangesAreEqual = primaryRanges.equals(localPrimaryRanges);
            for (ColumnFamilyStore table : keyspace.getColumnFamilyStores())
            {
                long start = System.nanoTime();

                // compute estimates for primary ranges for backwards compatability
                Map<Range<Token>, Pair<Long, Long>> estimates = computeSizeEstimates(table, primaryRanges);
                SystemKeyspace.updateSizeEstimates(table.metadata.keyspace, table.metadata.name, estimates);
                SystemKeyspace.updateTableEstimates(table.metadata.keyspace, table.metadata.name, SystemKeyspace.TABLE_ESTIMATES_TYPE_PRIMARY, estimates);

                if (!rangesAreEqual)
                {
                    // compute estimate for local primary range
                    estimates = computeSizeEstimates(table, localPrimaryRanges);
                }
                SystemKeyspace.updateTableEstimates(table.metadata.keyspace, table.metadata.name, SystemKeyspace.TABLE_ESTIMATES_TYPE_LOCAL_PRIMARY, estimates);

                long passed = System.nanoTime() - start;
                if (logger.isTraceEnabled())
                    logger.trace("Spent {} milliseconds on estimating {}.{} size",
                                 TimeUnit.NANOSECONDS.toMillis(passed),
                                 table.metadata.keyspace,
                                 table.metadata.name);
            }
        }
    }

