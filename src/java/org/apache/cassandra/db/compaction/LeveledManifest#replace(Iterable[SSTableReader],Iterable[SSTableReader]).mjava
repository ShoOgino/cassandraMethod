    public synchronized void replace(Iterable<SSTableReader> removed, Iterable<SSTableReader> added)
    {
        assert !Iterables.isEmpty(removed); // use add() instead of promote when adding new sstables
        logDistribution();
        if (logger.isDebugEnabled())
            logger.debug("Replacing [" + toString(removed) + "]");

        // the level for the added sstables is the max of the removed ones,
        // plus one if the removed were all on the same level
        for (SSTableReader sstable : removed)
        {
            remove(sstable);
        }

        // it's valid to do a remove w/o an add (e.g. on truncate)
        if (!added.iterator().hasNext())
            return;

        if (logger.isDebugEnabled())
            logger.debug("Adding [{}]", toString(added));

        int minLevel = Integer.MAX_VALUE;
        for (SSTableReader ssTableReader : added)
        {
            minLevel = Math.min(minLevel, ssTableReader.getSSTableLevel());
            add(ssTableReader);
        }
        lastCompactedKeys[minLevel] = SSTable.sstableOrdering.max(added).last;
    }

