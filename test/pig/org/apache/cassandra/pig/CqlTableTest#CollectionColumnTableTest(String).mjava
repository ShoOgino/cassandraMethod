    private void CollectionColumnTableTest(String initialQuery)
    throws AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, SchemaDisagreementException, IOException
    {
        pig.setBatchOn();
        pig.registerQuery(initialQuery);
        pig.registerQuery("recs= FOREACH collectiontable GENERATE TOTUPLE(TOTUPLE('m', m) ), TOTUPLE(TOTUPLE('map', TOTUPLE('m', 'mm'), TOTUPLE('n', 'nn')));");
        pig.registerQuery("STORE recs INTO 'cql://cql3ks/collectiontable?" + defaultParameters + nativeParameters + "&output_query=update+cql3ks.collectiontable+set+n+%3D+%3F' USING CqlNativeStorage();");
        pig.executeBatch();

        //(book2,((m,mm),(n,nn)))
        //(book3,((m,mm),(n,nn)))
        //(book4,((m,mm),(n,nn)))
        //(book1,((m,mm),(n,nn)))
        //input_cql=select * from collectiontable where token(m) > ? and token(m) <= ?
        pig.registerQuery("result= LOAD 'cql://cql3ks/collectiontable?" + defaultParameters + nativeParameters + "&input_cql=select%20*%20from%20collectiontable%20where%20token(m)%20%3E%20%3F%20and%20token(m)%20%3C%3D%20%3F' USING CqlNativeStorage();");
        Iterator<Tuple> it = pig.openIterator("result");
        if (it.hasNext()) {
            Tuple t = it.next();
            Tuple t1 = (Tuple) t.get(1);
            Assert.assertEquals(t1.size(), 2);
            Tuple element1 = (Tuple) t1.get(0);
            Tuple element2 = (Tuple) t1.get(1);
            Assert.assertEquals(element1.get(0), "m");
            Assert.assertEquals(element1.get(1), "mm");
            Assert.assertEquals(element2.get(0), "n");
            Assert.assertEquals(element2.get(1), "nn");
        }
        else
        {
            Assert.fail("Can't fetch any data");
        }
    }

