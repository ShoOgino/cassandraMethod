      public void read(org.apache.thrift.protocol.TProtocol iprot, multiget_slice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map234 = iprot.readMapBegin();
                  struct.success = new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2*_map234.size);
                  for (int _i235 = 0; _i235 < _map234.size; ++_i235)
                  {
                    ByteBuffer _key236; // required
                    List<ColumnOrSuperColumn> _val237; // required
                    _key236 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                      _val237 = new ArrayList<ColumnOrSuperColumn>(_list238.size);
                      for (int _i239 = 0; _i239 < _list238.size; ++_i239)
                      {
                        ColumnOrSuperColumn _elem240; // required
                        _elem240 = new ColumnOrSuperColumn();
                        _elem240.read(iprot);
                        _val237.add(_elem240);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key236, _val237);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TimedOutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

