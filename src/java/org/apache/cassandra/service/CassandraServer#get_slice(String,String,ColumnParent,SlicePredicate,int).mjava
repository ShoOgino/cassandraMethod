    public List<ColumnOrSuperColumn> get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, int consistency_level)
    throws InvalidRequestException, NotFoundException
    {
        if (logger.isDebugEnabled())
            logger.debug("get_slice_from");
        ThriftValidation.validateColumnParent(keyspace, column_parent);

        if (predicate.column_names != null)
        {
            return getSlice(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names), consistency_level);
        }
        else
        {
            SliceRange range = predicate.slice_range;
            if (range.count < 0)
                throw new InvalidRequestException("get_slice requires non-negative count");
            return getSlice(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.is_ascending, range.count), consistency_level);
        }
    }

