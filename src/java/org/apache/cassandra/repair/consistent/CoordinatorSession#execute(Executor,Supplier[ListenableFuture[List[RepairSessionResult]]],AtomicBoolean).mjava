    /**
     * Runs the asynchronous consistent repair session. Actual repair sessions are scheduled via a submitter to make unit testing easier
     */
    public ListenableFuture execute(Executor executor, Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSubmitter, AtomicBoolean hasFailure)
    {
        logger.debug("Executing consistent repair {}", sessionID);

        ListenableFuture<Boolean> prepareResult = prepare(executor);

        // run repair sessions normally
        ListenableFuture<List<RepairSessionResult>> repairSessionResults = Futures.transform(prepareResult, new AsyncFunction<Boolean, List<RepairSessionResult>>()
        {
            public ListenableFuture<List<RepairSessionResult>> apply(Boolean success) throws Exception
            {
                if (success)
                {
                    setRepairing();
                    return sessionSubmitter.get();
                }
                else
                {
                    return Futures.immediateFuture(null);
                }

            }
        });

        // mark propose finalization
        ListenableFuture<Boolean> proposeFuture = Futures.transform(repairSessionResults, new AsyncFunction<List<RepairSessionResult>, Boolean>()
        {
            public ListenableFuture<Boolean> apply(List<RepairSessionResult> results) throws Exception
            {
                if (results == null || results.isEmpty() || Iterables.any(results, r -> r == null))
                {
                    return Futures.immediateFailedFuture(new RuntimeException());
                }
                else
                {
                    return finalizePropose(executor);
                }
            }
        });

        // commit repaired data
        Futures.addCallback(proposeFuture, new FutureCallback<Boolean>()
        {
            public void onSuccess(@Nullable Boolean result)
            {
                if (result != null && result)
                {
                    finalizeCommit(executor);
                }
                else
                {
                    hasFailure.set(true);
                    fail(executor);
                }
            }

            public void onFailure(Throwable t)
            {
                hasFailure.set(true);
                fail(executor);
            }
        });

        return proposeFuture;
    }

