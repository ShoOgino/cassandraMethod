        /**
         * Creates the table according to schema statement
         * with specified data directories
         */
        public static ColumnFamilyStore createOfflineTable(CreateTableStatement.RawStatement schemaStatement, List<CreateTypeStatement> typeStatements, List<File> directoryList)
        {
            String keyspace = schemaStatement.keyspace();

            if (Schema.instance.getKeyspaceMetadata(keyspace) == null)
                Schema.instance.load(KeyspaceMetadata.create(keyspace, KeyspaceParams.simple(1)));

            createTypes(keyspace, typeStatements);

            KeyspaceMetadata ksm = Schema.instance.getKeyspaceMetadata(keyspace);

            TableMetadata tableMetadata = ksm.tables.getNullable(schemaStatement.columnFamily());
            if (tableMetadata != null)
                return Schema.instance.getColumnFamilyStoreInstance(tableMetadata.id);

            CreateTableStatement statement = (CreateTableStatement) schemaStatement.prepare(ksm.types).statement;
            statement.validate(ClientState.forInternalCalls());

            //Build metadata with a portable tableId
            tableMetadata = statement.builder()
                                     .id(deterministicId(statement.keyspace(), statement.columnFamily()))
                                     .build();

            Keyspace.setInitialized();
            Directories directories = new Directories(tableMetadata, directoryList.stream().map(Directories.DataDirectory::new).collect(Collectors.toList()));

            Keyspace ks = Keyspace.openWithoutSSTables(keyspace);
            ColumnFamilyStore cfs =  ColumnFamilyStore.createColumnFamilyStore(ks, tableMetadata.name, TableMetadataRef.forOfflineTools(tableMetadata), directories, false, false, true);

            ks.initCfCustom(cfs);
            Schema.instance.load(ksm.withSwapped(ksm.tables.with(cfs.metadata())));

            return cfs;
        }

