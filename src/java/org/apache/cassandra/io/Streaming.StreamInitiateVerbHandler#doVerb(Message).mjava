        /*
         * Here we handle the StreamInitiateMessage. Here we get the
         * array of StreamContexts. We get file names for the column
         * families associated with the files and replace them with the
         * file names as obtained from the column family store on the
         * receiving end.
        */
        public void doVerb(Message message)
        {
            byte[] body = message.getMessageBody();
            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);

            try
            {
                StreamInitiateMessage biMsg = StreamInitiateMessage.serializer().deserialize(new DataInputStream(bufIn));
                StreamContextManager.StreamContext[] streamContexts = biMsg.getStreamContext();

                if (streamContexts.length == 0 && StorageService.instance.isBootstrapMode())
                {
                    if (logger.isDebugEnabled())
                        logger.debug("no data needed from " + message.getFrom());
                    StorageService.instance.removeBootstrapSource(message.getFrom());
                    return;
                }

                Map<String, String> fileNames = getNewNames(streamContexts);
                /*
                 * For each of stream context's in the incoming message
                 * generate the new file names and store the new file names
                 * in the StreamContextManager.
                */
                for (StreamContextManager.StreamContext streamContext : streamContexts )
                {
                    StreamContextManager.StreamStatus streamStatus = new StreamContextManager.StreamStatus(streamContext.getTargetFile(), streamContext.getExpectedBytes() );
                    String file = getNewFileNameFromOldContextAndNames(fileNames, streamContext);

                    if (logger.isDebugEnabled())
                      logger.debug("Received Data from  : " + message.getFrom() + " " + streamContext.getTargetFile() + " " + file);
                    streamContext.setTargetFile(file);
                    addStreamContext(message.getFrom(), streamContext, streamStatus);
                }

                StreamContextManager.registerStreamCompletionHandler(message.getFrom(), new StreamCompletionHandler());
                if (logger.isDebugEnabled())
                  logger.debug("Sending a stream initiate done message ...");
                Message doneMessage = new Message(FBUtilities.getLocalAddress(), "", StorageService.streamInitiateDoneVerbHandler_, new byte[0] );
                MessagingService.instance().sendOneWay(doneMessage, message.getFrom());
            }
            catch (IOException ex)
            {
                throw new IOError(ex);
            }
        }

