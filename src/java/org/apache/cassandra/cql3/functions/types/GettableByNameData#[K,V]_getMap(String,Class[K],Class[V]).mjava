    /**
     * Returns the value for {@code name} as a map.
     *
     * <p>This method uses the {@link CodecRegistry} to find a codec to convert the underlying CQL
     * type to a map of the specified types.
     *
     * <p>If the type of the keys and/or values is generic, use {@link #getMap(String, TypeToken,
     * TypeToken)}.
     *
     * <p>Implementation note: the actual {@link Map} implementation will depend on the {@link
     * TypeCodec codec} being used; therefore, callers should make no assumptions concerning its
     * mutability nor its thread-safety. Furthermore, the behavior of this method in respect to CQL
     * {@code NULL} values is also codec-dependent. By default, the driver will return mutable
     * instances, and a CQL {@code NULL} will mapped to an empty collection (note that Cassandra makes
     * no distinction between {@code NULL} and an empty collection).
     *
     * @param name        the name to retrieve.
     * @param keysClass   the class for the keys of the map to retrieve.
     * @param valuesClass the class for the values of the map to retrieve.
     * @return the value of {@code name} as a map of {@code K} to {@code V} objects.
     * @throws IllegalArgumentException if {@code name} is not valid name for this object.
     * @throws CodecNotFoundException   if there is no registered codec to convert the underlying CQL
     *                                  type to a map.
     */
    public <K, V> Map<K, V> getMap(String name, Class<K> keysClass, Class<V> valuesClass);

