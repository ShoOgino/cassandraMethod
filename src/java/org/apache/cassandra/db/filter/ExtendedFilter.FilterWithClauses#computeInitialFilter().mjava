        /** Sets up the initial filter. */
        protected IDiskAtomFilter computeInitialFilter()
        {
            if (originalFilter instanceof SliceQueryFilter)
            {
                // if we have a high chance of getting all the columns in a single index slice (and it's not too costly), do that.
                // otherwise, the extraFilter (lazily created) will fetch by name the columns referenced by the additional expressions.
                if (cfs.getMaxRowSize() < DatabaseDescriptor.getColumnIndexSize())
                {
                    logger.trace("Expanding slice filter to entire row to cover additional expressions");
                    return new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                ((SliceQueryFilter) originalFilter).reversed,
                                                Integer.MAX_VALUE);
                }
            }
            else
            {
                logger.trace("adding columns to original Filter to cover additional expressions");
                assert originalFilter instanceof NamesQueryFilter;
                if (!clause.isEmpty())
                {
                    SortedSet<ByteBuffer> columns = new TreeSet<ByteBuffer>(cfs.getComparator());
                    for (IndexExpression expr : clause)
                    {
                        columns.add(expr.column_name);
                    }
                    columns.addAll(((NamesQueryFilter) originalFilter).columns);
                    return new NamesQueryFilter(columns);
                }
            }
            return originalFilter;
        }

