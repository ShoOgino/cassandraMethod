    /**
     * Returns the value for {@code name} as a list.
     *
     * <p>This method uses the {@link CodecRegistry} to find a codec to convert the underlying CQL
     * type to a list of the specified type.
     *
     * <p>Use this variant with nested collections, which produce a generic element type:
     *
     * <pre>
     * {@code List<List<String>> l = row.getList("theColumn", new TypeToken<List<String>>() {});}
     * </pre>
     *
     * <p>Implementation note: the actual {@link List} implementation will depend on the {@link
     * TypeCodec codec} being used; therefore, callers should make no assumptions concerning its
     * mutability nor its thread-safety. Furthermore, the behavior of this method in respect to CQL
     * {@code NULL} values is also codec-dependent. By default, the driver will return mutable
     * instances, and a CQL {@code NULL} will mapped to an empty collection (note that Cassandra makes
     * no distinction between {@code NULL} and an empty collection).
     *
     * @param name         the name to retrieve.
     * @param elementsType the type for the elements of the list to retrieve.
     * @return the value of the {@code i}th element as a list of {@code T} objects.
     * @throws IllegalArgumentException if {@code name} is not valid name for this object.
     * @throws CodecNotFoundException   if there is no registered codec to convert the underlying CQL
     *                                  type to a list.
     */
    public <T> List<T> getList(String name, TypeToken<T> elementsType);

