    @Test
    public void testPendingEndpoints() throws UnknownHostException
    {
        PendingRangeMaps pendingRangeMaps = new PendingRangeMaps();

        addPendingRange(pendingRangeMaps, genRange("5", "15"), "127.0.0.1");
        addPendingRange(pendingRangeMaps, genRange("15", "25"), "127.0.0.2");
        addPendingRange(pendingRangeMaps, genRange("25", "35"), "127.0.0.3");
        addPendingRange(pendingRangeMaps, genRange("35", "45"), "127.0.0.4");
        addPendingRange(pendingRangeMaps, genRange("45", "55"), "127.0.0.5");
        addPendingRange(pendingRangeMaps, genRange("45", "65"), "127.0.0.6");

        assertEquals(0, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("0")).size());
        assertEquals(0, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("5")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("10")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("15")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("20")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("25")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("35")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("45")).size());
        assertEquals(2, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("55")).size());
        assertEquals(1, pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("65")).size());

        EndpointsForToken replicas = pendingRangeMaps.pendingEndpointsFor(new BigIntegerToken("15"));
        assertTrue(replicas.endpoints().contains(InetAddressAndPort.getByName("127.0.0.1")));
    }

