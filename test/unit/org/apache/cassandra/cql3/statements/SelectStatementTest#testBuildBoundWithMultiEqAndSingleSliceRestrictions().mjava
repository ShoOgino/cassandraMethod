    /**
     * Test mixing multi equal restrictions with single-column slice restrictions
     * (e.g. clustering_0 = 1 AND (clustering_1, clustering_2) > (2, 3))
     */
    @Test
    public void testBuildBoundWithMultiEqAndSingleSliceRestrictions() throws InvalidRequestException
    {
        ByteBuffer value1 = ByteBufferUtil.bytes(1);
        ByteBuffer value2 = ByteBufferUtil.bytes(2);
        ByteBuffer value3 = ByteBufferUtil.bytes(3);

        // (clustering_0, clustering_1) = (1, 2) AND clustering_2 > 3
        MultiColumnRestriction.EQ multiEq = new MultiColumnRestriction.EQ(toMultiItemTerminal(value1, value2), false);
        SingleColumnRestriction.Slice singleSlice = new SingleColumnRestriction.Slice(false);
        singleSlice.setBound(Operator.GT, toTerm(value3));

        Restriction[] restrictions = new Restriction[] { multiEq, multiEq, singleSlice };

        List<Composite> bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.END);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(bounds.get(0),  value1, value2, EOC.END);
    }

