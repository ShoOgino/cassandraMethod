    /**
     * Handle node move to normal state. That is, node is entering token ring and participating
     * in reads.
     *
     * @param endpoint node
     * @param pieces STATE_NORMAL,token
     */
    private void handleStateNormal(InetAddress endpoint, String[] pieces)
    {
        assert pieces.length >= 2;

        // Parse versioned values according to end-point version:
        //   versions  < 1.2 .....: STATUS,TOKEN
        //   versions >= 1.2 .....: STATUS,HOST_ID,TOKEN,TOKEN,...
        int tokensPos;
        if (usesHostId(endpoint))
        {
            assert pieces.length >= 3;
            tokensPos = 2;
        }
        else
            tokensPos = 1;

        Token token = getPartitioner().getTokenFactory().fromString(pieces[tokensPos]);

        if (logger.isDebugEnabled())
            logger.debug("Node " + endpoint + " state normal, token " + token);

        if (tokenMetadata.isMember(endpoint))
            logger.info("Node " + endpoint + " state jump to normal");

        // Order Matters, TM.updateHostID() should be called before TM.updateNormalToken(), (see CASSANDRA-4300).
        if (usesHostId(endpoint))
            tokenMetadata.updateHostId(UUID.fromString(pieces[1]), endpoint);

        // we don't want to update if this node is responsible for the token and it has a later startup time than endpoint.
        InetAddress currentOwner = tokenMetadata.getEndpoint(token);
        if (currentOwner == null)
        {
            logger.debug("New node " + endpoint + " at token " + token);
            tokenMetadata.updateNormalToken(token, endpoint);
            if (!isClientMode)
                SystemTable.updateToken(endpoint, token);
        }
        else if (endpoint.equals(currentOwner))
        {
            // set state back to normal, since the node may have tried to leave, but failed and is now back up
            // no need to persist, token/ip did not change
            tokenMetadata.updateNormalToken(token, endpoint);
        }
        else if (Gossiper.instance.compareEndpointStartup(endpoint, currentOwner) > 0)
        {
            logger.info(String.format("Nodes %s and %s have the same token %s.  %s is the new owner",
                                       endpoint, currentOwner, token, endpoint));
            tokenMetadata.updateNormalToken(token, endpoint);
            Gossiper.instance.removeEndpoint(currentOwner);
            if (!isClientMode)
                SystemTable.updateToken(endpoint, token);
        }
        else
        {
            logger.info(String.format("Nodes %s and %s have the same token %s.  Ignoring %s",
                                       endpoint, currentOwner, token, endpoint));
        }

        if (tokenMetadata.isMoving(endpoint)) // if endpoint was moving to a new token
            tokenMetadata.removeFromMoving(endpoint);

        calculatePendingRanges();
    }

