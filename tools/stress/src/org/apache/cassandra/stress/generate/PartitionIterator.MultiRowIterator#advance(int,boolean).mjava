        private boolean advance(int depth, boolean first)
        {
            // advance the leaf component
            clusteringComponents[depth].poll();
            position[depth]++;
            while (true)
            {
                if (clusteringComponents[depth].isEmpty())
                {
                    // if we've run out of clustering components at this level, ascend
                    if (depth == 0)
                        return false;
                    depth--;
                    clusteringComponents[depth].poll();
                    if (++position[depth] > limit[depth])
                        return false;
                    continue;
                }

                int compareToLastRow = compareToLastRow();
                if (compareToLastRow > 0 && !first)
                    return false;
                boolean forceReturnOne = first && compareToLastRow >= 0;

                // the chance of descending is the uniform usechance, multiplied by the number of children
                // we would on average generate (so if we have a 0.1 use chance, but should generate 10 children
                // then we will always descend), multiplied by 1/(compound roll), where (compound roll) is the
                // chance with which we reached this depth, i.e. if we already beat 50/50 odds, we double our
                // chance of beating this next roll
                double thischance = useChance * chancemodifier[depth];
                if (forceReturnOne || thischance > 0.99999f || thischance >= random.nextDouble())
                {
                    // if we're descending, we fill in our clustering component and increase our depth
                    row.row[depth] = clusteringComponents[depth].peek();
                    depth++;
                    if (depth == clusteringComponents.length)
                        return true;
                    // if we haven't reached the leaf, we update our probability statistics, fill in all of
                    // this level's clustering components, and repeat
                    if (useChance < 1d)
                    {
                        rollmodifier[depth] = rollmodifier[depth - 1] / Math.min(1d, thischance);
                        chancemodifier[depth] = generator.clusteringDescendantAverages[depth] * rollmodifier[depth];
                    }
                    position[depth] = 0;
                    fill(depth);
                    continue;
                }

                if (compareToLastRow >= 0)
                    return false;

                // if we don't descend, we remove the clustering suffix we've skipped and continue
                clusteringComponents[depth].poll();
                position[depth]++;
            }
        }

