    /** @param bytesDelta Bytes of throughput since the last call to throttle*(). */
    public void throttleDelta(long bytesDelta)
    {
        int newTargetBytesPerMS = fun.targetThroughput();
        if (newTargetBytesPerMS < 1)
            // throttling disabled
            return;

        // if the target changed, log
        if (newTargetBytesPerMS != targetBytesPerMS)
            logger.debug("{} target throughput now {} bytes/ms.", this, newTargetBytesPerMS);
        targetBytesPerMS = newTargetBytesPerMS;

        // time passed since last delay
        long msSinceLast = System.currentTimeMillis() - timeAtLastDelay;
        // the excess bytes in this period
        long excessBytes = bytesDelta - msSinceLast * targetBytesPerMS;

        // the time to delay to recap the deficit
        long timeToDelay = excessBytes / Math.max(1, targetBytesPerMS);
        if (timeToDelay > 0)
        {
            if (logger.isTraceEnabled())
                logger.trace(String.format("%s actual throughput was %d bytes in %d ms: throttling for %d ms",
                                           this, bytesDelta, msSinceLast, timeToDelay));
            try
            {
                Thread.sleep(timeToDelay);
            }
            catch (InterruptedException e)
            {
                throw new AssertionError(e);
            }
        }
        bytesAtLastDelay += bytesDelta;
        timeAtLastDelay = System.currentTimeMillis();
    }

