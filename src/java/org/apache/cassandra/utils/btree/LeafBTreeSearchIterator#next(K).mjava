    public V next(K key)
    {
        if (!hasNext)
            return null;
        V result = null;

        // first check the current position in case of sequential access
        if (comparator.compare(key, keys[nextPos]) == 0)
        {
            hasCurrent = true;
            result = (V) keys[nextPos];
            nextPos += forwards ? 1 : -1;
        }
        updateHasNext();

        if (result != null || !hasNext)
            return result;

        // otherwise search against the remaining values
        int find = searchNext(key);
        if (find >= 0)
        {
            hasCurrent = true;
            result = (V) keys[find];
            nextPos = find + (forwards ? 1 : -1);
        }
        else
        {
            nextPos = (forwards ? -1 : -2) - find;
            hasCurrent = false;
        }
        updateHasNext();
        return result;
    }

