    /**
     * Compare two byte[] at specified offsets for length. Compares the non equal bytes as unsigned.
     * @param bytes1 First array to compare.
     * @param offset1 Position to start the comparison at in the first array.
     * @param bytes2 Second array to compare.
     * @param offset2 Position to start the comparison at in the second array.
     * @param length How many bytes to compare?
     * @return -1 if byte1 is less than byte2, 1 if byte2 is less than byte1 or 0 if equal.
     */
    public static int compareByteSubArrays(byte[] bytes1, int offset1, byte[] bytes2, int offset2, int length)
    {
        if ( null == bytes1 )
        {
            if ( null == bytes2) return 0;
            else return -1;
        }
        if (null == bytes2 ) return 1;

        assert bytes1.length >= (offset1 + length) : "The first byte array isn't long enough for the specified offset and length.";
        assert bytes2.length >= (offset2 + length) : "The second byte array isn't long enough for the specified offset and length.";
        for ( int i = 0; i < length; i++ )
        {
            byte byte1 = bytes1[offset1+i];
            byte byte2 = bytes2[offset2+i];
            if ( byte1 == byte2 )
                continue;
            // compare non-equal bytes as unsigned
            return (byte1 & 0xFF) < (byte2 & 0xFF) ? -1 : 1;
        }
        return 0;
    }

