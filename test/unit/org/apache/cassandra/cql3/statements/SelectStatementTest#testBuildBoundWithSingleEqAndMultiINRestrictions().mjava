    /**
     * Test clustering_0 = 1 AND (clustering_1, clustering_2) IN ((2, 3), (4, 5))
     */
    @Test
    public void testBuildBoundWithSingleEqAndMultiINRestrictions() throws InvalidRequestException
    {
        ByteBuffer value1 = ByteBufferUtil.bytes(1);
        ByteBuffer value2 = ByteBufferUtil.bytes(2);
        ByteBuffer value3 = ByteBufferUtil.bytes(3);
        ByteBuffer value4 = ByteBufferUtil.bytes(4);
        ByteBuffer value5 = ByteBufferUtil.bytes(5);

        // clustering_0 = 1 AND (clustering_1, clustering_2) IN ((2, 3), (4, 5))
        SingleColumnRestriction.EQ singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        MultiColumnRestriction.IN multiIn =
                new MultiColumnRestriction.InWithValues(asList(toMultiItemTerminal(value2, value3),
                                                               toMultiItemTerminal(value4, value5)));

        Restriction[] restrictions = new Restriction[] { singleEq, multiIn, multiIn };

        List<Composite> bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.START);
        assertComposite(bounds.get(1), value1, value4, value5, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.END);
        assertComposite(bounds.get(1), value1, value4, value5, EOC.END);

        // clustering_0 = 1 AND (clustering_1, clustering_2) IN ((2, 3))
        singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        multiIn = new MultiColumnRestriction.InWithValues(asList(toMultiItemTerminal(value2, value3),
                                                                 toMultiItemTerminal(value4, value5)));

        restrictions = new Restriction[] { singleEq, multiIn, multiIn };

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value2, value3, EOC.START);
        assertComposite(bounds.get(1), value1, value4, value5, EOC.START);

        // clustering_0 = 1 AND clustering_1 = 5 AND (clustering_2, clustering_3) IN ((2, 3), (4, 5))
        singleEq = new SingleColumnRestriction.EQ(toTerm(value1), false);
        SingleColumnRestriction.EQ singleEq2 = new SingleColumnRestriction.EQ(toTerm(value5), false);
        multiIn = new MultiColumnRestriction.InWithValues(asList(toMultiItemTerminal(value2, value3),
                                                                 toMultiItemTerminal(value4, value5)));

        restrictions = new Restriction[] { singleEq, singleEq2, multiIn, multiIn };

        bounds = executeBuildBound(restrictions, Bound.START);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value5, value2, value3, EOC.START);
        assertComposite(bounds.get(1), value1, value5, value4, value5, EOC.START);

        bounds = executeBuildBound(restrictions, Bound.END);
        assertEquals(2, bounds.size());
        assertComposite(bounds.get(0), value1, value5, value2, value3, EOC.END);
        assertComposite(bounds.get(1), value1, value5, value4, value5, EOC.END);
    }

