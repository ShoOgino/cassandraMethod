    /**
     * Handle node being actively removed from the ring.
     *
     * @param endpoint node
     */
    private void handleStateRemoving(InetAddress endpoint, Token removeToken, String state)
    {
        InetAddress removeEndpoint = tokenMetadata_.getEndpoint(removeToken);
        
        if (removeEndpoint == null)
            return;
        
        if (removeEndpoint.equals(FBUtilities.getLocalAddress()))
        {
            logger_.info("Received removeToken gossip about myself. Is this node a replacement for a removed one?");
            return;
        }

        if (VersionedValue.REMOVED_TOKEN.equals(state))
        {
            Gossiper.instance.removeEndpoint(removeEndpoint);
            tokenMetadata_.removeEndpoint(removeEndpoint);
            HintedHandOffManager.deleteHintsForEndPoint(removeEndpoint);
            tokenMetadata_.removeBootstrapToken(removeToken);
        }
        else if (VersionedValue.REMOVING_TOKEN.equals(state))
        {
            if (logger_.isDebugEnabled())
                logger_.debug("Token " + removeToken + " removed manually (endpoint was " + removeEndpoint + ")");

            // Note that the endpoint is being removed
            tokenMetadata_.addLeavingEndpoint(removeEndpoint);
            calculatePendingRanges();

            // grab any data we are now responsible for and notify responsible node
            restoreReplicaCount(removeEndpoint, endpoint);
        }
        if (!isClientMode)
        {
            logger_.info("Removing token " + removeToken + " for " + removeEndpoint);
            SystemTable.removeToken(removeToken);
        }
    }

