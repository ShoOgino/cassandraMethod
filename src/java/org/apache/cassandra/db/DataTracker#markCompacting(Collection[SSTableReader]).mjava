    /**
     * @return true if we are able to mark the given @param sstables as compacted, before anyone else
     *
     * Note that we could acquire references on the marked sstables and release them in
     * unmarkCompacting, but since we will never call markCompacted on a sstable marked
     * as compacting (unless there is a serious bug), we can skip this.
     */
    public boolean markCompacting(Collection<SSTableReader> sstables)
    {
        assert sstables != null && !sstables.isEmpty();

        View currentView = view.get();
        Set<SSTableReader> inactive = Sets.difference(ImmutableSet.copyOf(sstables), currentView.compacting);
        if (inactive.size() < sstables.size())
            return false;

        if (Iterables.any(sstables, new Predicate<SSTableReader>()
        {
            @Override
            public boolean apply(SSTableReader sstable)
            {
                return sstable.isMarkedCompacted();
            }
        }))
        {
            return false;
        }

        View newView = currentView.markCompacting(inactive);
        return view.compareAndSet(currentView, newView);
    }

