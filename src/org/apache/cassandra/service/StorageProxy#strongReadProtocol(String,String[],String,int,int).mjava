    /**
     * This is a multiget version of the above method.
     * @param tablename
     * @param keys
     * @param columnFamily
     * @param start
     * @param count
     * @return
     * @throws IOException
     * @throws TimeoutException
     */
    public static Map<String, Row> strongReadProtocol(String tablename, String[] keys, String columnFamily, int start, int count) throws IOException, TimeoutException
    {       
        Map<String, Row> rows = new HashMap<String, Row>();
        long startTime = System.currentTimeMillis();        
        // TODO: throw a thrift exception if we do not have N nodes
        Map<String, ReadMessage[]> readMessages = new HashMap<String, ReadMessage[]>();        
        for (String key : keys )
        {
            ReadMessage[] readMessage = new ReadMessage[2];
            if( start >= 0 && count < Integer.MAX_VALUE)
            {
                readMessage[0] = new ReadMessage(tablename, key, columnFamily, start, count);
            }
            else
            {
                readMessage[0] = new ReadMessage(tablename, key, columnFamily);
            }            
            if( start >= 0 && count < Integer.MAX_VALUE)
            {
                readMessage[1] = new ReadMessage(tablename, key, columnFamily, start, count);
            }
            else
            {
                readMessage[1] = new ReadMessage(tablename, key, columnFamily);
            }
            readMessage[1].setIsDigestQuery(true);
        }        
        rows = doStrongReadProtocol(readMessages);         
        logger_.debug("readProtocol: " + (System.currentTimeMillis() - startTime) + " ms.");
        return rows;
    }

