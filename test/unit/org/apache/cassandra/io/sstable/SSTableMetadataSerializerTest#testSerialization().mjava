    @Test
    public void testSerialization() throws IOException
    {
        EstimatedHistogram rowSizes = new EstimatedHistogram(
            new long[] { 1L, 2L },
            new long[] { 3L, 4L, 5L });
        EstimatedHistogram columnCounts = new EstimatedHistogram(
            new long[] { 6L, 7L },
            new long[] { 8L, 9L, 10L });
        ReplayPosition rp = new ReplayPosition(11L, 12);
        long minTimestamp = 2162517136L;
        long maxTimestamp = 4162517136L;

        SSTableMetadata.Collector collector = SSTableMetadata.createCollector()
                                                             .estimatedRowSize(rowSizes)
                                                             .estimatedColumnCount(columnCounts)
                                                             .replayPosition(rp);
        collector.updateMinTimestamp(minTimestamp);
        collector.updateMaxTimestamp(maxTimestamp);
        SSTableMetadata originalMetadata = collector.finalizeMetadata(RandomPartitioner.class.getCanonicalName());

        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(byteOutput);

        SSTableMetadata.serializer.serialize(originalMetadata, dos);

        ByteArrayInputStream byteInput = new ByteArrayInputStream(byteOutput.toByteArray());
        DataInputStream dis = new DataInputStream(byteInput);
        Descriptor desc = new Descriptor(Descriptor.Version.CURRENT, new File("."), "", "", 0, false);
        SSTableMetadata stats = SSTableMetadata.serializer.deserialize(dis, desc);

        assert stats.estimatedRowSize.equals(originalMetadata.estimatedRowSize);
        assert stats.estimatedRowSize.equals(rowSizes);
        assert stats.estimatedColumnCount.equals(originalMetadata.estimatedColumnCount);
        assert stats.estimatedColumnCount.equals(columnCounts);
        assert stats.replayPosition.equals(originalMetadata.replayPosition);
        assert stats.replayPosition.equals(rp);
        assert stats.minTimestamp == minTimestamp;
        assert stats.maxTimestamp == maxTimestamp;
        assert stats.minTimestamp == originalMetadata.minTimestamp;
        assert stats.maxTimestamp == originalMetadata.maxTimestamp;
        assert RandomPartitioner.class.getCanonicalName().equals(stats.partitioner);
    }

