    // Basic BTree validation to check the values and sizeOffsets. Return tree size.
    private int validateBTree(Object[] tree, int[] startingPos, boolean isRoot)
    {
        if (BTree.isLeaf(tree))
        {
            int size = BTree.size(tree);
            if (!isRoot)
            {
                assertTrue(size >= FAN_FACTOR / 2);
                assertTrue(size <= FAN_FACTOR);
            }
            for (int i = 0; i < size; i++)
            {
                assertEquals((int)tree[i], startingPos[0]);
                startingPos[0]++;
            }
            return size;
        }

        int childNum = BTree.getChildCount(tree);
        assertTrue(childNum >= FAN_FACTOR / 2);
        assertTrue(childNum <= FAN_FACTOR + 1);

        int childStart = BTree.getChildStart(tree);
        int[] sizeOffsets = BTree.getSizeMap(tree);
        int pos = 0;
        for (int i = 0; i < childNum; i++)
        {
            int childSize = validateBTree((Object[])tree[i + childStart], startingPos, false);

            pos += childSize;
            assertEquals(sizeOffsets[i], pos);
            if (i != childNum - 1)
            {
                assertEquals((int)tree[i], startingPos[0]);
                pos++;
                startingPos[0]++;
            }

        }
        return BTree.size(tree);
    }

