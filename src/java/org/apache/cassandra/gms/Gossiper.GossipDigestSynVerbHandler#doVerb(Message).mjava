        public void doVerb(Message message)
        {
            InetAddress from = message.getFrom();
            if (logger_.isTraceEnabled())
                logger_.trace("Received a GossipDigestSynMessage from " + from);

            byte[] bytes = message.getMessageBody();
            DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );

            try
            {
                GossipDigestSynMessage gDigestMessage = GossipDigestSynMessage.serializer().deserialize(dis);
                /* If the message is from a different cluster throw it away. */
                if ( !gDigestMessage.clusterId_.equals(DatabaseDescriptor.getClusterName()) )
                    return;

                List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests();
                /* Notify the Failure Detector */
                Gossiper.instance.notifyFailureDetector(gDigestList);

                doSort(gDigestList);

                List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>();
                Map<InetAddress, EndPointState> deltaEpStateMap = new HashMap<InetAddress, EndPointState>();
                Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap);

                GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap);
                Message gDigestAckMessage = Gossiper.instance.makeGossipDigestAckMessage(gDigestAck);
                if (logger_.isTraceEnabled())
                    logger_.trace("Sending a GossipDigestAckMessage to " + from);
                MessagingService.instance.sendOneWay(gDigestAckMessage, from);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }

