    public void announceMigration() throws InvalidRequestException, ConfigurationException
    {
        KSMetaData ksm = Schema.instance.getKSMetaData(name.getKeyspace());
        if (ksm == null)
            throw new InvalidRequestException(String.format("Cannot alter type in unknown keyspace %s", name.getKeyspace()));

        UserType toUpdate = ksm.userTypes.getType(name.getUserTypeName());
        // Shouldn't happen, unless we race with a drop
        if (toUpdate == null)
            throw new InvalidRequestException(String.format("No user type named %s exists.", name));

        UserType updated = makeUpdatedType(toUpdate);

        // Now, we need to announce the type update to basically change it for new tables using this type,
        // but we also need to find all existing user types and CF using it and change them.
        MigrationManager.announceTypeUpdate(updated);

        for (KSMetaData ksm2 : Schema.instance.getKeyspaceDefinitions())
        {
            for (CFMetaData cfm : ksm2.cfMetaData().values())
            {
                CFMetaData copy = cfm.copy();
                boolean modified = false;
                for (ColumnDefinition def : copy.allColumns())
                    modified |= updateDefinition(copy, def, toUpdate.keyspace, toUpdate.name, updated);
                if (modified)
                    MigrationManager.announceColumnFamilyUpdate(copy, false);
            }

            // Other user types potentially using the updated type
            for (UserType ut : ksm2.userTypes.getAllTypes().values())
            {
                // Re-updating the type we've just updated would be harmless but useless so we avoid it.
                // Besides, we use the occasion to drop the old version of the type if it's a type rename
                if (ut.keyspace.equals(toUpdate.keyspace) && ut.name.equals(toUpdate.name))
                {
                    if (!ut.keyspace.equals(updated.keyspace) || !ut.name.equals(updated.name))
                        MigrationManager.announceTypeDrop(ut);
                    continue;
                }
                AbstractType<?> upd = updateWith(ut, toUpdate.keyspace, toUpdate.name, updated);
                if (upd != null)
                    MigrationManager.announceTypeUpdate((UserType)upd);
            }
        }
    }

