    @Test
    public void testCreateWithIdRestore() throws Throwable
    {
        createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY(a, b))");

        execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 0, 0);
        execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 1, 1);


        long time = System.currentTimeMillis();
        UUID id = currentTableMetadata().cfId;
        assertRows(execute("SELECT * FROM %s"), row(0, 0, 0), row(0, 1, 1));
        Thread.sleep(5);

        execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 0, 2);
        execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 1, 3);
        assertRows(execute("SELECT * FROM %s"), row(1, 0, 2), row(1, 1, 3), row(0, 0, 0), row(0, 1, 1));

        // Drop will flush and clean segments. Hard-link them so that they can be restored later.
        List<String> segments = CommitLog.instance.getActiveSegmentNames();
        File logPath = new File(DatabaseDescriptor.getCommitLogLocation());
        for (String segment: segments)
            FileUtils.createHardLink(new File(logPath, segment), new File(logPath, segment + ".save"));

        execute("DROP TABLE %s");

        assertInvalidThrow(InvalidRequestException.class, "SELECT * FROM %s");

        execute(String.format("CREATE TABLE %%s (a int, b int, c int, PRIMARY KEY(a, b)) WITH ID = %s", id));

        // Restore saved segments
        for (String segment: segments)
            FileUtils.renameWithConfirm(new File(logPath, segment + ".save"), new File(logPath, segment));
        try
        {
            // Restore to point in time.
            CommitLog.instance.archiver.restorePointInTime = time;
            CommitLog.instance.resetUnsafe();
            CommitLog.instance.recover();
        }
        finally
        {
            CommitLog.instance.archiver.restorePointInTime = Long.MAX_VALUE;
        }

        assertRows(execute("SELECT * FROM %s"), row(0, 0, 0), row(0, 1, 1));
    }

