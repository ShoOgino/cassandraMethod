    void testSliceableIterator(NavigableSet<Clusterable> sortedContent, AbstractBTreePartition partition, ColumnFilter cf, boolean reversed)
    {
        Function<? super Clusterable, ? extends Clusterable> colFilter = x -> x instanceof Row ? ((Row) x).filter(cf, cfm) : x;
        Slices slices = makeSlices();
        try (SliceableUnfilteredRowIterator sliceableIter = partition.sliceableUnfilteredIterator(cf, reversed))
        {
            for (Slice slice : (Iterable<Slice>) () -> directed(slices, reversed))
                assertIteratorsEqual(streamOf(directed(slice(sortedContent, slice), reversed)).map(colFilter).iterator(),
                                     sliceableIter.slice(slice));
        }

        // Try using sliceable as unfiltered iterator
        try (SliceableUnfilteredRowIterator sliceableIter = partition.sliceableUnfilteredIterator(cf, reversed))
        {
            assertIteratorsEqual((reversed ? sortedContent.descendingSet() : sortedContent).
                                     stream().map(colFilter).iterator(),
                                 sliceableIter);
        }
    }

