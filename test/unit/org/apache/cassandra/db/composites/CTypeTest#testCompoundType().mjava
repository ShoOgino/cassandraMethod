    @Test
    public void testCompoundType()
    {
        CompositeType baseType = CompositeType.getInstance(AsciiType.instance, UUIDType.instance, LongType.instance);

        ByteBuffer a1 = baseType.builder()
                .add(ByteBufferUtil.bytes("a"))
                .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
                .add(ByteBufferUtil.bytes(1)).build();
        ByteBuffer a2 = baseType.builder()
                .add(ByteBufferUtil.bytes("a"))
                .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
                .add(ByteBufferUtil.bytes(100)).build();
        ByteBuffer b1 = baseType.builder()
                .add(ByteBufferUtil.bytes("a"))
                .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
                .add(ByteBufferUtil.bytes(1)).build();
        ByteBuffer b2 = baseType.builder()
                .add(ByteBufferUtil.bytes("a"))
                .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
                .add(ByteBufferUtil.bytes(100)).build();
        ByteBuffer c1 = baseType.builder()
                .add(ByteBufferUtil.bytes("z"))
                .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
                .add(ByteBufferUtil.bytes(1)).build();
        ByteBuffer c2 = baseType.builder()
                .add(ByteBufferUtil.bytes("z"))
                .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
                .add(ByteBufferUtil.bytes(100)).build();
        ByteBuffer d1 = baseType.builder()
                .add(ByteBufferUtil.bytes("z"))
                .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
                .add(ByteBufferUtil.bytes(1)).build();
        ByteBuffer d2 = baseType.builder()
                .add(ByteBufferUtil.bytes("z"))
                .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
                .add(ByteBufferUtil.bytes(100)).build();
        ByteBuffer z1 = baseType.builder()
                .add(ByteBufferUtil.EMPTY_BYTE_BUFFER)
                .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
                .add(ByteBufferUtil.bytes(100)).build();

        assert baseType.compare(a1,a2) < 0;
        assert baseType.compare(a2,b1) < 0;
        assert baseType.compare(b1,b2) < 0;
        assert baseType.compare(b2,c1) < 0;
        assert baseType.compare(c1,c2) < 0;
        assert baseType.compare(c2,d1) < 0;
        assert baseType.compare(d1,d2) < 0;

        assert baseType.compare(a2,a1) > 0;
        assert baseType.compare(b1,a2) > 0;
        assert baseType.compare(b2,b1) > 0;
        assert baseType.compare(c1,b2) > 0;
        assert baseType.compare(c2,c1) > 0;
        assert baseType.compare(d1,c2) > 0;
        assert baseType.compare(d2,d1) > 0;

        assert baseType.compare(z1,a1) < 0;
        assert baseType.compare(z1,a2) < 0;
        assert baseType.compare(z1,b1) < 0;
        assert baseType.compare(z1,b2) < 0;
        assert baseType.compare(z1,c1) < 0;
        assert baseType.compare(z1,c2) < 0;
        assert baseType.compare(z1,d1) < 0;
        assert baseType.compare(z1,d2) < 0;

        assert baseType.compare(a1,a1) == 0;
        assert baseType.compare(a2,a2) == 0;
        assert baseType.compare(b1,b1) == 0;
        assert baseType.compare(b2,b2) == 0;
        assert baseType.compare(c1,c1) == 0;
        assert baseType.compare(c2,c2) == 0;
        assert baseType.compare(z1,z1) == 0;
    }

