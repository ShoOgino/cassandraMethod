    @Test
    public void testWriteEachQuorum()
    {
        IEndpointSnitch stash = DatabaseDescriptor.getEndpointSnitch();
        final Token token = tk(1L);
        try
        {
            {
                // all full natural
                Keyspace ks = ks(ImmutableSet.of(EP1, EP2, EP3), ImmutableMap.of("DC1", "3", "DC2", "3"));
                EndpointsForToken natural = EndpointsForToken.of(token, full(EP1), full(EP2), full(EP3), full(EP4), full(EP5), full(EP6));
                EndpointsForToken pending = EndpointsForToken.empty(token);
                ReplicaPlan.ForTokenWrite plan = ReplicaPlans.forWrite(ks, ConsistencyLevel.EACH_QUORUM, natural, pending, Predicates.alwaysTrue(), ReplicaPlans.writeNormal);
                assertEquals(natural, plan.liveAndDown);
                assertEquals(natural, plan.live);
                assertEquals(natural, plan.contacts());
            }
            {
                // all natural and up, one transient in each DC
                Keyspace ks = ks(ImmutableSet.of(EP1, EP2, EP3), ImmutableMap.of("DC1", "3", "DC2", "3"));
                EndpointsForToken natural = EndpointsForToken.of(token, full(EP1), full(EP2), trans(EP3), full(EP4), full(EP5), trans(EP6));
                EndpointsForToken pending = EndpointsForToken.empty(token);
                ReplicaPlan.ForTokenWrite plan = ReplicaPlans.forWrite(ks, ConsistencyLevel.EACH_QUORUM, natural, pending, Predicates.alwaysTrue(), ReplicaPlans.writeNormal);
                assertEquals(natural, plan.liveAndDown);
                assertEquals(natural, plan.live);
                EndpointsForToken expectContacts = EndpointsForToken.of(token, full(EP1), full(EP2), full(EP4), full(EP5));
                assertEquals(expectContacts, plan.contacts());
            }
        }
        finally
        {
            DatabaseDescriptor.setEndpointSnitch(stash);
        }

        {
            // test simple

        }
    }

