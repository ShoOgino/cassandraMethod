    @Test
    public void testPgSyleInsert() throws Throwable
    {
        createTable("CREATE TABLE %s (key ascii primary key, val text)");

        // some non-terminated pg-strings
        assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ $key_empty$$, $$'' value for empty$$)");
        assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$ $)");
        assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$ $, $$'' value for empty$$)");

        // different pg-style markers for multiple strings
        execute("INSERT INTO %s (key, val) VALUES ($$prim$ $ $key$$, $$some '' arbitrary value$$)");
        // same empty pg-style marker for multiple strings
        execute("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$$)");
        // stange but valid pg-style
        execute("INSERT INTO %s (key, val) VALUES ($$$foo$_$foo$$, $$$'' value for empty$$)");
        // these are conventional quoted strings
        execute("INSERT INTO %s (key, val) VALUES ('$txt$key$$$$txt$', '$txt$'' other value$txt$')");

        assertRows(execute("SELECT key, val FROM %s WHERE key='prim$ $ $key'"),
                   row("prim$ $ $key", "some '' arbitrary value")
        );
        assertRows(execute("SELECT key, val FROM %s WHERE key='key_empty'"),
                   row("key_empty", "'' value for empty")
        );
        assertRows(execute("SELECT key, val FROM %s WHERE key='$foo$_$foo'"),
                   row("$foo$_$foo", "$'' value for empty")
        );
        assertRows(execute("SELECT key, val FROM %s WHERE key='$txt$key$$$$txt$'"),
                   row("$txt$key$$$$txt$", "$txt$' other value$txt$")
        );

        // invalid syntax
        assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ascii$prim$$$key$invterm$, $txt$some '' arbitrary value$txt$)");
    }

