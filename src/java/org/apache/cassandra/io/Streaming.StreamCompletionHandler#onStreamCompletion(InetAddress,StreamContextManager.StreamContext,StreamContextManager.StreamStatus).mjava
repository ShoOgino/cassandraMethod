        public void onStreamCompletion(InetAddress host, StreamContextManager.StreamContext streamContext, StreamContextManager.StreamStatus streamStatus) throws IOException
        {
            /* Parse the stream context and the file to the list of SSTables in the associated Column Family Store. */
            if (streamContext.getTargetFile().contains("-Data.db"))
            {
                String tableName = streamContext.getTable();
                File file = new File( streamContext.getTargetFile() );
                String fileName = file.getName();
                String [] temp = fileName.split("-");

                //Open the file to see if all parts are now here
                try
                {
                    SSTableReader sstable = SSTableWriter.renameAndOpen(streamContext.getTargetFile());
                    //TODO add a sanity check that this sstable has all its parts and is ok
                    Table.open(tableName).getColumnFamilyStore(temp[0]).addSSTable(sstable);
                    logger.info("Streaming added " + sstable.getFilename());
                }
                catch (IOException e)
                {
                    throw new RuntimeException("Not able to add streamed file " + streamContext.getTargetFile(), e);
                }
            }

            if (logger.isDebugEnabled())
              logger.debug("Sending a streaming finished message with " + streamStatus + " to " + host);
            /* Send a StreamStatusMessage object which may require the source node to re-stream certain files. */
            StreamContextManager.StreamStatusMessage streamStatusMessage = new StreamContextManager.StreamStatusMessage(streamStatus);
            Message message = StreamContextManager.StreamStatusMessage.makeStreamStatusMessage(streamStatusMessage);
            MessagingService.instance().sendOneWay(message, host);

            /* If we're done with everything for this host, remove from bootstrap sources */
            if (StreamContextManager.isDone(host) && StorageService.instance.isBootstrapMode())
            {
                StorageService.instance.removeBootstrapSource(host);
            }
        }

