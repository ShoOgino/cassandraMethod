    @Override
    public void write(ChannelHandlerContext ctx, Object o, ChannelPromise promise)
    {
        // this is a temporary fix until https://github.com/netty/netty/pull/6867 is released (probably netty 4.1.13).
        // TL;DR a closed channel can still process messages in the pipeline that were queued before the close.
        // the channel handlers are removed from the channel potentially saync from the close operation.
        if (!ctx.channel().isOpen())
        {
            logger.debug("attempting to process a message in the pipeline, but the channel is closed", ctx.channel().id());
            return;
        }

        ByteBuf out = null;
        try
        {
            if (!isMessageValid(o, promise))
                return;

            QueuedMessage msg = (QueuedMessage) o;

            // frame size includes the magic and and other values *before* the actual serialized message.
            // note: don't even bother to check the compressed size (if compression is enabled for the channel),
            // cuz if it's this large already, we're probably screwed anyway
            long currentFrameSize = MESSAGE_PREFIX_SIZE + msg.message.serializedSize(targetMessagingVersion);
            if (currentFrameSize > Integer.MAX_VALUE || currentFrameSize < 0)
            {
                promise.tryFailure(new IllegalStateException(String.format("%s illegal frame size: %d, ignoring message", connectionId, currentFrameSize)));
                return;
            }

            out = ctx.alloc().ioBuffer((int)currentFrameSize);

            captureTracingInfo(msg);
            serializeMessage(msg, out);
            ctx.write(out, promise);

            // check to see if we should flush based on buffered size
            ChannelOutboundBuffer outboundBuffer = ctx.channel().unsafe().outboundBuffer();
            if (outboundBuffer != null && outboundBuffer.totalPendingWriteBytes() >= flushSizeThreshold)
                ctx.flush();
        }
        catch(Exception e)
        {
            if (out != null && out.refCnt() > 0)
                out.release(out.refCnt());
            exceptionCaught(ctx, e);
            promise.tryFailure(e);
        }
        finally
        {
            // Make sure we signal the outChanel even in case of errors.
            channelWriter.onMessageProcessed(ctx);
        }
    }

