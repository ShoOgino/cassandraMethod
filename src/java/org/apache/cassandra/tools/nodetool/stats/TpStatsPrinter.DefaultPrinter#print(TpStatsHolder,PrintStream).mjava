        @Override
        public void print(TpStatsHolder data, PrintStream out)
        {
            Map<String, Object> convertData = data.convert2Map();

            out.printf("%-30s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");

            Map<Object, Object> threadPools = convertData.get("ThreadPools") instanceof Map<?, ?> ? (Map)convertData.get("ThreadPools") : Collections.emptyMap();
            for (Map.Entry<Object, Object> entry : threadPools.entrySet())
            {
                Map values = entry.getValue() instanceof Map<?, ?> ? (Map)entry.getValue() : Collections.emptyMap();
                out.printf("%-30s%10s%10s%15s%10s%18s%n",
                           entry.getKey(),
                           values.get("ActiveTasks"),
                           values.get("PendingTasks"),
                           values.get("CompletedTasks"),
                           values.get("CurrentlyBlockedTasks"),
                           values.get("TotalBlockedTasks"));
            }

            out.printf("%n%-20s%10s%18s%18s%18s%18s%n", "Message type", "Dropped", "", "Latency waiting in queue (micros)", "", "");
            out.printf("%-20s%10s%18s%18s%18s%18s%n", "", "", "50%", "95%", "99%", "Max");

            Map<Object, Object> droppedMessages = convertData.get("DroppedMessage") instanceof Map<?, ?> ? (Map)convertData.get("DroppedMessage") : Collections.emptyMap();
            Map<Object, double[]> waitLatencies = convertData.get("WaitLatencies") instanceof Map<?, ?> ? (Map)convertData.get("WaitLatencies") : Collections.emptyMap();
            for (Map.Entry<Object, Object> entry : droppedMessages.entrySet())
            {
                out.printf("%-20s%10s", entry.getKey(), entry.getValue());
                if (waitLatencies.containsKey(entry.getKey()))
                {
                    double[] latencies = waitLatencies.get(entry.getKey());
                    out.printf("%18.2f%18.2f%18.2f%18.2f", latencies[0], latencies[2], latencies[4], latencies[6]);
                }
                else
                {
                    out.printf("%18s%18s%18s%18s", "N/A", "N/A", "N/A", "N/A");
                }

                out.printf("%n");
            }
        }

