    /**
     * Deserialize the index into a structure and return the number of bytes read.
     * @param in Input from which the serialized form of the index is read
     * @param columnIndexList the structure which is filled in with the deserialized index
     * @return number of bytes read from the input
     * @throws IOException
     */
	static int deserializeIndex(String cfName, DataInput in, List<ColumnIndexInfo> columnIndexList) throws IOException
	{
		/* read only the column index list */
		int columnIndexSize = in.readInt();
		int totalBytesRead = 4;

		/* read the indexes into a separate buffer */
		DataOutputBuffer indexOut = new DataOutputBuffer();
        /* write the data into buffer */
		indexOut.write(in, columnIndexSize);
		totalBytesRead += columnIndexSize;

		/* now deserialize the index list */
        DataInputBuffer indexIn = new DataInputBuffer();
        indexIn.reset(indexOut.getData(), indexOut.getLength());
        String columnName;
        int position;
        int numCols;
        
        TypeInfo typeInfo = DatabaseDescriptor.getTypeInfo(cfName);
        if ( DatabaseDescriptor.getColumnFamilyType(cfName).equals("Super") || DatabaseDescriptor.isNameSortingEnabled(cfName) )
        {
            typeInfo = TypeInfo.STRING;
        }
        
        while(indexIn.available() > 0)
        {            
            ColumnIndexInfo cIndexInfo = ColumnIndexFactory.instance(typeInfo);
        	cIndexInfo = cIndexInfo.deserialize(indexIn);
        	columnIndexList.add(cIndexInfo);
        }

		return totalBytesRead;
	}

