    public List<Row> filter(AbstractScanIterator rowIterator, ExtendedFilter filter)
    {
         List<Row> rows = new ArrayList<Row>();
         try
         {
             while (rowIterator.hasNext() && rows.size() < filter.maxResults)
             {
                 // get the raw columns requested, and additional columns for the expressions if necessary
                 Row rawRow = rowIterator.next();
                 ColumnFamily data = rawRow.cf;

                 // roughtly
                 IFilter extraFilter = filter.getExtraFilter(data);
                 if (extraFilter != null)
                 {
                     QueryPath path = new QueryPath(columnFamily);
                     ColumnFamily cf = filter.cfs.getColumnFamily(new QueryFilter(rawRow.key, path, extraFilter));
                     if (cf != null)
                         data.addAll(cf, HeapAllocator.instance);
                 }

                 if (!filter.isSatisfiedBy(data))
                     continue;

                 logger.debug("{} satisfies all filter expressions", data);
                 // cut the resultset back to what was requested, if necessary
                 data = filter.prune(data);
                 rows.add(new Row(rawRow.key, data));
             }
             return rows;
         }
         finally
         {
             try
             {
                 rowIterator.close();
             }
             catch (IOException e)
             {
                 throw new IOError(e);
             }
         }
    }

