    /**
     * Transfers a group of sstables from a single table to the target endpoint
     * and then marks them as ready for local deletion.
     */
    public static void transferSSTables(InetAddress target, List<SSTableReader> sstables, String table) throws IOException
    {
        InitiatedFile[] initiatedFiles = new InitiatedFile[SSTable.FILES_ON_DISK * sstables.size()];
        int i = 0;
        for (SSTableReader sstable : sstables)
        {
            for (String filename : sstable.getAllFilenames())
            {
                File file = new File(filename);
                initiatedFiles[i++] = new InitiatedFile(file.getAbsolutePath(), file.length(), table);
            }
        }
        if (logger.isDebugEnabled())
          logger.debug("Stream context metadata " + StringUtils.join(initiatedFiles, ", "));

        StreamOutManager.get(target).addFilesToStream(initiatedFiles);
        StreamInitiateMessage biMessage = new StreamInitiateMessage(initiatedFiles);
        Message message = StreamInitiateMessage.makeStreamInitiateMessage(biMessage);
        message.addHeader(StreamOut.TABLE_NAME, table.getBytes());
        if (logger.isDebugEnabled())
          logger.debug("Sending a stream initiate message to " + target + " ...");
        MessagingService.instance.sendOneWay(message, target);

        if (initiatedFiles.length > 0)
        {
            logger.info("Waiting for transfer to " + target + " to complete");
            StreamOutManager.get(target).waitForStreamCompletion();
            // (StreamManager will delete the streamed file on completion.)
            logger.info("Done with transfer to " + target);
        }
    }

