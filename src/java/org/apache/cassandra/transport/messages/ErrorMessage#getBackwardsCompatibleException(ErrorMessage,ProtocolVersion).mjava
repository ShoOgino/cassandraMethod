    private static TransportException getBackwardsCompatibleException(ErrorMessage msg, ProtocolVersion version)
    {
        if (version.isSmallerThan(ProtocolVersion.V4))
        {
            switch (msg.error.code())
            {
                case READ_FAILURE:
                    ReadFailureException rfe = (ReadFailureException) msg.error;
                    return new ReadTimeoutException(rfe.consistency, rfe.received, rfe.blockFor, rfe.dataPresent);
                case WRITE_FAILURE:
                    WriteFailureException wfe = (WriteFailureException) msg.error;
                    return new WriteTimeoutException(wfe.writeType, wfe.consistency, wfe.received, wfe.blockFor);
                case FUNCTION_FAILURE:
                case CDC_WRITE_FAILURE:
                    return new InvalidRequestException(msg.toString());
            }
        }

        if (version.isSmallerThan(ProtocolVersion.V5))
        {
            switch (msg.error.code())
            {
                case WRITE_TIMEOUT:
                    if (msg.error instanceof CasWriteTimeoutException)
                    {
                        CasWriteTimeoutException cwte = (CasWriteTimeoutException) msg.error;
                        return new WriteTimeoutException(WriteType.CAS, cwte.consistency, cwte.received, cwte.blockFor);
                    }
                    break;
                case CAS_WRITE_UNKNOWN:
                    CasWriteUnknownResultException cwue = (CasWriteUnknownResultException) msg.error;
                    return new WriteTimeoutException(WriteType.CAS, cwue.consistency, cwue.received, cwue.blockFor);
            }
        }

        return msg.error;
    }

