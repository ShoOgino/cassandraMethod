    /**
     * Creates a <code>CFDefinition</code> to be used in the tests.
     *
     * @param numberOfClusteringColumns the number of clustering columns
     * @return a new a <code>CFDefinition</code> instance
     * @throws ConfigurationException if the CFDefinition cannot be created
     */
    private static CFDefinition createCFDefinition(int numberOfClusteringColumns) throws ConfigurationException
    {
        List<AbstractType<?>> types = new ArrayList<>();
        for (int i = 0, m = numberOfClusteringColumns; i < m; i++)
            types.add(Int32Type.instance);

        CompositeType cType = CompositeType.getInstance(types);
        CFMetaData cfMetaData = new CFMetaData("keyspace", "test", ColumnFamilyType.Standard, cType);
        ByteBuffer partitionKey = ByteBufferUtil.bytes("partitionKey");
        cfMetaData.addColumnDefinition(ColumnDefinition.partitionKeyDef(partitionKey, Int32Type.instance, 0));

        for (int i = 0, m = numberOfClusteringColumns; i < m; i++)
        {
            ByteBuffer name = ByteBufferUtil.bytes("clustering_" + i);
            cfMetaData.addColumnDefinition(ColumnDefinition.clusteringKeyDef(name, types.get(i), i));
        }
        cfMetaData.rebuild();
        return new CFDefinition(cfMetaData);
    }

