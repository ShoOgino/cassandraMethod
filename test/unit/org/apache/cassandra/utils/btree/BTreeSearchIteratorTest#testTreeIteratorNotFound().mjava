    @Test
    public void testTreeIteratorNotFound()
    {
        Object[] btree = BTree.build(seq(31, 0, 3), UpdateFunction.noOp());
        BTreeSearchIterator fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.ASC);
        BTreeSearchIterator leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.ASC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1);
        fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.ASC);
        leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.ASC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1, 3 * 7);
        fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.ASC);
        leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.ASC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1, 3 * 7 + 1);

        fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.DESC);
        leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.DESC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1);
        fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.DESC);
        leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.DESC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1, 3 * 2);
        fullIter = new FullBTreeSearchIterator(btree, CMP, Dir.DESC);
        leafIter = new LeafBTreeSearchIterator(btree, CMP, Dir.DESC);
        assertBTreeSearchIteratorEquals(fullIter, leafIter, 3 * 5 + 1, 3 * 2 + 1);
    }

