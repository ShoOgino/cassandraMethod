      public void read(org.apache.thrift.protocol.TProtocol iprot, describe_schema_versions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map366 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<String>>(2*_map366.size);
                  for (int _i367 = 0; _i367 < _map366.size; ++_i367)
                  {
                    String _key368; // required
                    List<String> _val369; // required
                    _key368 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list370 = iprot.readListBegin();
                      _val369 = new ArrayList<String>(_list370.size);
                      for (int _i371 = 0; _i371 < _list370.size; ++_i371)
                      {
                        String _elem372; // required
                        _elem372 = iprot.readString();
                        _val369.add(_elem372);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key368, _val369);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

