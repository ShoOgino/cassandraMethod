        public Pair<Row, Row> resetToBounds(Seed seed, int clusteringComponentDepth)
        {
            setSeed(seed);
            setUseChance(1d);
            if (clusteringComponentDepth == 0)
            {
                reset(1d, -1, false, PartitionGenerator.Order.SORTED);
                return Pair.create(new Row(partitionKey), new Row(partitionKey));
            }

            this.order = PartitionGenerator.Order.SORTED;
            assert clusteringComponentDepth <= clusteringComponents.length;
            for (Queue<?> q : clusteringComponents)
                q.clear();

            fill(0);
            Pair<int[], Object[]> bound1 = randomBound(clusteringComponentDepth);
            Pair<int[], Object[]> bound2 = randomBound(clusteringComponentDepth);
            if (compare(bound1.left, bound2.left) > 0) { Pair<int[], Object[]> tmp = bound1; bound1 = bound2; bound2 = tmp;}
            Arrays.fill(lastRow, 0);
            System.arraycopy(bound2.left, 0, lastRow, 0, bound2.left.length);
            Arrays.fill(currentRow, 0);
            System.arraycopy(bound1.left, 0, currentRow, 0, bound1.left.length);
            seekToCurrentRow();
            return Pair.create(new Row(partitionKey, bound1.right), new Row(partitionKey, bound2.right));
        }

