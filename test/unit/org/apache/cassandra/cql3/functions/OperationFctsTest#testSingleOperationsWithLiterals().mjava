    @Test
    public void testSingleOperationsWithLiterals() throws Throwable
    {
        createTable("CREATE TABLE %s (pk int, c1 tinyint, c2 smallint, v text, PRIMARY KEY(pk, c1, c2))");
        execute("INSERT INTO %S (pk, c1, c2, v) VALUES (2, 2, 2, 'test')");

        // There is only one function outputing tinyint
        assertRows(execute("SELECT * FROM %s WHERE pk = 2 AND c1 = 1 + 1"),
                   row(2, (byte) 2, (short) 2, "test"));

        // As the operation can only be a sum between tinyints the expected type is tinyint
        assertInvalidMessage("Expected 1 byte for a tinyint (4)",
                             "SELECT * FROM %s WHERE pk = 2 AND c1 = 1 + ?", 1);

        assertRows(execute("SELECT * FROM %s WHERE pk = 2 AND c1 = 1 + ?", (byte) 1),
                   row(2, (byte) 2, (short) 2, "test"));

        assertRows(execute("SELECT * FROM %s WHERE pk = 1 + 1 AND c1 = 2"),
                   row(2, (byte) 2, (short) 2, "test"));

        assertRows(execute("SELECT * FROM %s WHERE pk = 2 AND c1 = 2 AND c2 = 1 + 1"),
                   row(2, (byte) 2, (short) 2, "test"));

        assertRows(execute("SELECT * FROM %s WHERE pk = 2 AND c1 = 2 AND c2 = 1 * (1 + 1)"),
                   row(2, (byte) 2, (short) 2, "test"));

        // tinyint, smallint and int could be used there so we need to disambiguate
        assertInvalidMessage("Ambiguous '+' operation with args ? and 1: use type casts to disambiguate",
                             "SELECT * FROM %s WHERE pk = ? + 1 AND c1 = 2", 1);

        assertInvalidMessage("Ambiguous '+' operation with args ? and 1: use type casts to disambiguate",
                             "SELECT * FROM %s WHERE pk = 2 AND c1 = 2 AND c2 = 1 * (? + 1)", 1);

        assertRows(execute("SELECT 1 + 1, v FROM %s WHERE pk = 2 AND c1 = 2"),
                   row(2, "test"));

        // As the output type is unknown the ? type cannot be determined
        assertInvalidMessage("Ambiguous '+' operation with args 1 and ?: use type casts to disambiguate",
                             "SELECT 1 + ?, v FROM %s WHERE pk = 2 AND c1 = 2", 1);

        // As the prefered type for the constants is int, the returned type will be int
        assertRows(execute("SELECT 100 + 50, v FROM %s WHERE pk = 2 AND c1 = 2"),
                   row(150, "test"));

        // As the output type is unknown the ? type cannot be determined
        assertInvalidMessage("Ambiguous '+' operation with args ? and 50: use type casts to disambiguate",
                             "SELECT ? + 50, v FROM %s WHERE pk = 2 AND c1 = 2", 100);

        createTable("CREATE TABLE %s (a tinyint, b smallint, c int, d bigint, e float, f double, g varint, h decimal, PRIMARY KEY(a, b))"
                + " WITH CLUSTERING ORDER BY (b DESC)"); // Make sure we test with ReversedTypes
        execute("INSERT INTO %S (a, b, c, d, e, f, g, h) VALUES (1, 2, 3, 4, 5.5, 6.5, 7, 8.5)");

        // Test additions
        assertColumnNames(execute("SELECT a + 1, b + 1, c + 1, d + 1, e + 1, f + 1, g + 1, h + 1 FROM %s WHERE a = 1 AND b = 2"),
                          "a + 1", "b + 1", "c + 1", "d + 1", "e + 1", "f + 1", "g + 1", "h + 1");

        assertRows(execute("SELECT a + 1, b + 1, c + 1, d + 1, e + 1, f + 1, g + 1, h + 1 FROM %s WHERE a = 1 AND b = 2"),
                   row(2, 3, 4, 5L, 6.5F, 7.5, BigInteger.valueOf(8), BigDecimal.valueOf(9.5)));

        assertRows(execute("SELECT 2 + a, 2 + b, 2 + c, 2 + d, 2 + e, 2 + f, 2 + g, 2 + h FROM %s WHERE a = 1 AND b = 2"),
                   row(3, 4, 5, 6L, 7.5F, 8.5, BigInteger.valueOf(9), BigDecimal.valueOf(10.5)));

        long bigInt = Integer.MAX_VALUE + 10L;

        assertRows(execute("SELECT a + " + bigInt + ","
                               + " b + " + bigInt + ","
                               + " c + " + bigInt + ","
                               + " d + " + bigInt + ","
                               + " e + " + bigInt + ","
                               + " f + " + bigInt + ","
                               + " g + " + bigInt + ","
                               + " h + " + bigInt + " FROM %s WHERE a = 1 AND b = 2"),
                   row(1L + bigInt,
                       2L + bigInt,
                       3L + bigInt,
                       4L + bigInt,
                       5.5 + bigInt,
                       6.5 + bigInt,
                       BigInteger.valueOf(bigInt + 7),
                       BigDecimal.valueOf(bigInt + 8.5)));

        assertRows(execute("SELECT a + 5.5, b + 5.5, c + 5.5, d + 5.5, e + 5.5, f + 5.5, g + 5.5, h + 5.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(6.5, 7.5, 8.5, 9.5, 11.0, 12.0, BigDecimal.valueOf(12.5), BigDecimal.valueOf(14.0)));

        assertRows(execute("SELECT a + 6.5, b + 6.5, c + 6.5, d + 6.5, e + 6.5, f + 6.5, g + 6.5, h + 6.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(7.5, 8.5, 9.5, 10.5, 12.0, 13.0, BigDecimal.valueOf(13.5), BigDecimal.valueOf(15.0)));

        // Test substractions

        assertColumnNames(execute("SELECT a - 1, b - 1, c - 1, d - 1, e - 1, f - 1, g - 1, h - 1 FROM %s WHERE a = 1 AND b = 2"),
                          "a - 1", "b - 1", "c - 1", "d - 1", "e - 1", "f - 1", "g - 1", "h - 1");

        assertRows(execute("SELECT a - 1, b - 1, c - 1, d - 1, e - 1, f - 1, g - 1, h - 1 FROM %s WHERE a = 1 AND b = 2"),
                   row(0, 1, 2, 3L, 4.5F, 5.5, BigInteger.valueOf(6), BigDecimal.valueOf(7.5)));

        assertRows(execute("SELECT a - 2, b - 2, c - 2, d - 2, e - 2, f - 2, g - 2, h - 2 FROM %s WHERE a = 1 AND b = 2"),
                   row(-1, 0, 1, 2L, 3.5F, 4.5, BigInteger.valueOf(5), BigDecimal.valueOf(6.5)));

        assertRows(execute("SELECT a - 3, b - 3, 3 - 3, d - 3, e - 3, f - 3, g - 3, h - 3 FROM %s WHERE a = 1 AND b = 2"),
                   row(-2, -1, 0, 1L, 2.5F, 3.5, BigInteger.valueOf(4), BigDecimal.valueOf(5.5)));

        assertRows(execute("SELECT a - " + bigInt + ","
                               + " b - " + bigInt + ","
                               + " c - " + bigInt + ","
                               + " d - " + bigInt + ","
                               + " e - " + bigInt + ","
                               + " f - " + bigInt + ","
                               + " g - " + bigInt + ","
                               + " h - " + bigInt + " FROM %s WHERE a = 1 AND b = 2"),
                   row(1L - bigInt,
                       2L - bigInt,
                       3L - bigInt,
                       4L - bigInt,
                       5.5 - bigInt,
                       6.5 - bigInt,
                       BigInteger.valueOf(7 - bigInt),
                       BigDecimal.valueOf(8.5 - bigInt)));

        assertRows(execute("SELECT a - 5.5, b - 5.5, c - 5.5, d - 5.5, e - 5.5, f - 5.5, g - 5.5, h - 5.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(-4.5, -3.5, -2.5, -1.5, 0.0, 1.0, BigDecimal.valueOf(1.5), BigDecimal.valueOf(3.0)));

        assertRows(execute("SELECT a - 6.5, b - 6.5, c - 6.5, d - 6.5, e - 6.5, f - 6.5, g - 6.5, h - 6.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(-5.5, -4.5, -3.5, -2.5, -1.0, 0.0, BigDecimal.valueOf(0.5), BigDecimal.valueOf(2.0)));

        // Test multiplications

        assertColumnNames(execute("SELECT a * 1, b * 1, c * 1, d * 1, e * 1, f * 1, g * 1, h * 1 FROM %s WHERE a = 1 AND b = 2"),
                          "a * 1", "b * 1", "c * 1", "d * 1", "e * 1", "f * 1", "g * 1", "h * 1");

        assertRows(execute("SELECT a * 1, b * 1, c * 1, d * 1, e * 1, f * 1, g * 1, h * 1 FROM %s WHERE a = 1 AND b = 2"),
                   row(1, 2, 3, 4L, 5.5F, 6.5, BigInteger.valueOf(7), new BigDecimal("8.50")));

        assertRows(execute("SELECT a * 2, b * 2, c * 2, d * 2, e * 2, f * 2, g * 2, h * 2 FROM %s WHERE a = 1 AND b = 2"),
                   row(2, 4, 6, 8L, 11.0F, 13.0, BigInteger.valueOf(14), new BigDecimal("17.00")));

        assertRows(execute("SELECT a * 3, b * 3, c * 3, d * 3, e * 3, f * 3, g * 3, h * 3 FROM %s WHERE a = 1 AND b = 2"),
                   row(3, 6, 9, 12L, 16.5F, 19.5, BigInteger.valueOf(21), new BigDecimal("25.50")));

        assertRows(execute("SELECT a * " + bigInt + ","
                            + " b * " + bigInt + ","
                            + " c * " + bigInt + ","
                            + " d * " + bigInt + ","
                            + " e * " + bigInt + ","
                            + " f * " + bigInt + ","
                            + " g * " + bigInt + ","
                            + " h * " + bigInt + " FROM %s WHERE a = 1 AND b = 2"),
                               row(1L * bigInt,
                                   2L * bigInt,
                                   3L * bigInt,
                                   4L * bigInt,
                                   5.5 * bigInt,
                                   6.5 * bigInt,
                                   BigInteger.valueOf(7 * bigInt),
                                   BigDecimal.valueOf(8.5 * bigInt)));

        assertRows(execute("SELECT a * 5.5, b * 5.5, c * 5.5, d * 5.5, e * 5.5, f * 5.5, g * 5.5, h * 5.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(5.5, 11.0, 16.5, 22.0, 30.25, 35.75, new BigDecimal("38.5"), new BigDecimal("46.75")));

        assertRows(execute("SELECT a * 6.5, b * 6.5, c * 6.5, d * 6.5, e * 6.5, 6.5 * f, g * 6.5, h * 6.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(6.5, 13.0, 19.5, 26.0, 35.75, 42.25, new BigDecimal("45.5"), BigDecimal.valueOf(55.25)));

        // Test divisions

        assertColumnNames(execute("SELECT a / 1, b / 1, c / 1, d / 1, e / 1, f / 1, g / 1, h / 1 FROM %s WHERE a = 1 AND b = 2"),
                          "a / 1", "b / 1", "c / 1", "d / 1", "e / 1", "f / 1", "g / 1", "h / 1");

        assertRows(execute("SELECT a / 1, b / 1, c / 1, d / 1, e / 1, f / 1, g / 1, h / 1 FROM %s WHERE a = 1 AND b = 2"),
                   row(1, 2, 3, 4L, 5.5F, 6.5, BigInteger.valueOf(7), new BigDecimal("8.5")));

        assertRows(execute("SELECT a / 2, b / 2, c / 2, d / 2, e / 2, f / 2, g / 2, h / 2 FROM %s WHERE a = 1 AND b = 2"),
                   row(0, 1, 1, 2L, 2.75F, 3.25, BigInteger.valueOf(3), new BigDecimal("4.25")));

        assertRows(execute("SELECT a / 3, b / 3, c / 3, d / 3, e / 3, f / 3, g / 3, h / 3 FROM %s WHERE a = 1 AND b = 2"),
                   row(0, 0, 1, 1L, 1.8333334F, 2.1666666666666665, BigInteger.valueOf(2), new BigDecimal("2.833333333333333333333333333333333")));

        assertRows(execute("SELECT a / " + bigInt + ","
                + " b / " + bigInt + ","
                + " c / " + bigInt + ","
                + " d / " + bigInt + ","
                + " e / " + bigInt + ","
                + " f / " + bigInt + ","
                + " g / " + bigInt + " FROM %s WHERE a = 1 AND b = 2"),
                   row(1L / bigInt,
                       2L / bigInt,
                       3L / bigInt,
                       4L / bigInt,
                       5.5 / bigInt,
                       6.5 / bigInt,
                       BigInteger.valueOf(7).divide(BigInteger.valueOf(bigInt))));

        assertRows(execute("SELECT a / 5.5, b / 5.5, c / 5.5, d / 5.5, e / 5.5, f / 5.5, g / 5.5, h / 5.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(0.18181818181818182, 0.36363636363636365, 0.5454545454545454, 0.7272727272727273, 1.0, 1.1818181818181819, new BigDecimal("1.272727272727272727272727272727273"), new BigDecimal("1.545454545454545454545454545454545")));

        assertRows(execute("SELECT a / 6.5, b / 6.5, c / 6.5, d / 6.5, e / 6.5, f / 6.5, g / 6.5, h / 6.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(0.15384615384615385, 0.3076923076923077, 0.46153846153846156, 0.6153846153846154, 0.8461538461538461, 1.0, new BigDecimal("1.076923076923076923076923076923077"), new BigDecimal("1.307692307692307692307692307692308")));

        // Test modulo operations

        assertColumnNames(execute("SELECT a %% 1, b %% 1, c %% 1, d %% 1, e %% 1, f %% 1, g %% 1, h %% 1 FROM %s WHERE a = 1 AND b = 2"),
                          "a % 1", "b % 1", "c % 1", "d % 1", "e % 1", "f % 1", "g % 1", "h % 1");

        assertRows(execute("SELECT a %% 1, b %% 1, c %% 1, d %% 1, e %% 1, f %% 1, g %% 1, h %% 1 FROM %s WHERE a = 1 AND b = 2"),
                   row(0, 0, 0, 0L, 0.5F, 0.5, BigInteger.valueOf(0), new BigDecimal("0.5")));

        assertRows(execute("SELECT a %% 2, b %% 2, c %% 2, d %% 2, e %% 2, f %% 2, g %% 2, h %% 2 FROM %s WHERE a = 1 AND b = 2"),
                   row(1, 0, 1, 0L, 1.5F, 0.5, BigInteger.valueOf(1), new BigDecimal("0.5")));

        assertRows(execute("SELECT a %% 3, b %% 3, c %% 3, d %% 3, e %% 3, f %% 3, g %% 3, h %% 3 FROM %s WHERE a = 1 AND b = 2"),
                   row(1, 2, 0, 1L, 2.5F, 0.5, BigInteger.valueOf(1), new BigDecimal("2.5")));

        assertRows(execute("SELECT a %% " + bigInt + ","
                            + " b %% " + bigInt + ","
                            + " c %% " + bigInt + ","
                            + " d %% " + bigInt + ","
                            + " e %% " + bigInt + ","
                            + " f %% " + bigInt + ","
                            + " g %% " + bigInt + ","
                            + " h %% " + bigInt + " FROM %s WHERE a = 1 AND b = 2"),
                               row(1L % bigInt,
                                   2L % bigInt,
                                   3L % bigInt,
                                   4L % bigInt,
                                   5.5 % bigInt,
                                   6.5 % bigInt,
                                   BigInteger.valueOf(7 % bigInt),
                                   BigDecimal.valueOf(8.5 % bigInt)));

        assertRows(execute("SELECT a %% 5.5, b %% 5.5, c %% 5.5, d %% 5.5, e %% 5.5, f %% 5.5, g %% 5.5, h %% 5.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(1.0, 2.0, 3.0, 4.0, 0.0, 1.0, new BigDecimal("1.5"), new BigDecimal("3.0")));

        assertRows(execute("SELECT a %% 6.5, b %% 6.5, c %% 6.5, d %% 6.5, e %% 6.5, f %% 6.5, g %% 6.5, h %% 6.5 FROM %s WHERE a = 1 AND b = 2"),
                   row(1.0, 2.0, 3.0, 4.0, 5.5, 0.0, new BigDecimal("0.5"), new BigDecimal("2.0")));

        assertRows(execute("SELECT a, b, 1 + 1, 2 - 1, 2 * 2, 2 / 1 , 2 %% 1, (int) -1 FROM %s WHERE a = 1 AND b = 2"),
                   row((byte) 1, (short) 2, 2, 1, 4, 2, 0, -1));
    }

