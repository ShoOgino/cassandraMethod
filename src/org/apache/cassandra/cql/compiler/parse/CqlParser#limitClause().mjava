    // $ANTLR start limitClause
    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:182:1: limitClause : K_LIMIT IntegerLiteral -> ^( A_LIMIT IntegerLiteral ) ;
    public final limitClause_return limitClause() throws RecognitionException {
        limitClause_return retval = new limitClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token K_LIMIT58=null;
        Token IntegerLiteral59=null;

        CommonTree K_LIMIT58_tree=null;
        CommonTree IntegerLiteral59_tree=null;
        RewriteRuleTokenStream stream_IntegerLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerLiteral");
        RewriteRuleTokenStream stream_K_LIMIT=new RewriteRuleTokenStream(adaptor,"token K_LIMIT");

        try {
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:183:5: ( K_LIMIT IntegerLiteral -> ^( A_LIMIT IntegerLiteral ) )
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:183:7: K_LIMIT IntegerLiteral
            {
            K_LIMIT58=(Token)input.LT(1);
            match(input,K_LIMIT,FOLLOW_K_LIMIT_in_limitClause776); if (failed) return retval;
            if ( backtracking==0 ) stream_K_LIMIT.add(K_LIMIT58);

            IntegerLiteral59=(Token)input.LT(1);
            match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_limitClause778); if (failed) return retval;
            if ( backtracking==0 ) stream_IntegerLiteral.add(IntegerLiteral59);


            // AST REWRITE
            // elements: IntegerLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 183:30: -> ^( A_LIMIT IntegerLiteral )
            {
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:183:33: ^( A_LIMIT IntegerLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(A_LIMIT, "A_LIMIT"), root_1);

                adaptor.addChild(root_1, stream_IntegerLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end limitClause

