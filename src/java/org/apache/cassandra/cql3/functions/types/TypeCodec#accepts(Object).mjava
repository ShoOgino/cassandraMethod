    /**
     * Return {@code true} if this codec is capable of serializing the given object. Note that the
     * object's Java type is inferred from the object' runtime (raw) type, contrary to {@link
     * #accepts(TypeToken)} which is capable of handling generic types.
     *
     * <p>This method is intended mostly to be used by the QueryBuilder when no type information is
     * available when the codec is used.
     *
     * <p>Implementation notes:
     *
     * <ol>
     * <li>The default implementation is <em>covariant</em> with respect to the passed argument
     * (through the usage of {@code TypeToken#isAssignableFrom(TypeToken)} or {@link
     * TypeToken#isSupertypeOf(Type)}) and <em>it's strongly recommended not to modify this
     * behavior</em>. This means that, by default, a codec will accept <em>any subtype</em> of
     * the Java type that it has been created for.
     * <li>The base implementation provided here can only handle non-parameterized types; codecs
     * handling parameterized types, such as collection types, must override this method and
     * perform some sort of "manual" inspection of the actual type parameters.
     * <li>Similarly, codecs that only accept a partial subset of all possible values must override
     * this method and manually inspect the object to check if it complies or not with the
     * codec's limitations.
     * </ol>
     *
     * @param value The Java type this codec should serialize from and deserialize to; cannot be
     *              {@code null}.
     * @return {@code true} if the codec is capable of serializing the given {@code javaType}, and
     * {@code false} otherwise.
     * @throws NullPointerException if {@code value} is {@code null}.
     */
    public boolean accepts(Object value)
    {
        checkNotNull(value, "Parameter value cannot be null");
        return this.javaType.isSupertypeOf(TypeToken.of(value.getClass()));
    }

