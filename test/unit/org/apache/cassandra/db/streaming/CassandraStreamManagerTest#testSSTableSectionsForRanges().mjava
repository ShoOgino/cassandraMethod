    @Test
    public void testSSTableSectionsForRanges() throws Exception
    {
        cfs.truncateBlocking();

        createSSTable(() -> {
            QueryProcessor.executeInternal(String.format("INSERT INTO %s.%s (k, v) VALUES (1, 1)", keyspace, table));
            QueryProcessor.executeInternal(String.format("INSERT INTO %s.%s (k, v) VALUES (2, 2)", keyspace, table));
        });

        Collection<SSTableReader> allSSTables = cfs.getLiveSSTables();
        Assert.assertEquals(1, allSSTables.size());
        final Token firstToken = allSSTables.iterator().next().first.getToken();
        DatabaseDescriptor.setSSTablePreemptiveOpenIntervalInMB(1);

        Set<SSTableReader> sstablesBeforeRewrite = getReadersForRange(new Range<>(firstToken, firstToken));
        Assert.assertEquals(1, sstablesBeforeRewrite.size());
        final AtomicInteger checkCount = new AtomicInteger();
        // needed since we get notified when compaction is done as well - we can't get sections for ranges for obsoleted sstables
        final AtomicBoolean done = new AtomicBoolean(false);
        final AtomicBoolean failed = new AtomicBoolean(false);
        Runnable r = new Runnable()
        {
            public void run()
            {
                while (!done.get())
                {
                    Range<Token> range = new Range<Token>(firstToken, firstToken);
                    Set<SSTableReader> sstables = getReadersForRange(range);
                    if (sstables.size() != 1)
                        failed.set(true);
                    checkCount.incrementAndGet();
                    Uninterruptibles.sleepUninterruptibly(5, TimeUnit.MILLISECONDS);
                }
            }
        };
        Thread t = NamedThreadFactory.createThread(r);
        try
        {
            t.start();
            cfs.forceMajorCompaction();
            // reset
        }
        finally
        {
            DatabaseDescriptor.setSSTablePreemptiveOpenIntervalInMB(50);
            done.set(true);
            t.join(20);
        }
        Assert.assertFalse(failed.get());
        Assert.assertTrue(checkCount.get() >= 2);
        cfs.truncateBlocking();
    }

