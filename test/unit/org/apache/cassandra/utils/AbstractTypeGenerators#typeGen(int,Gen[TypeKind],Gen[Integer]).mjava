    public static Gen<AbstractType<?>> typeGen(int maxDepth, Gen<TypeKind> typeKindGen, Gen<Integer> sizeGen)
    {
        assert maxDepth >= 0 : "max depth must be positive or zero; given " + maxDepth;
        boolean atBottom = maxDepth == 0;
        return rnd -> {
            // figure out type to get
            TypeKind kind = typeKindGen.generate(rnd);
            switch (kind)
            {
                case PRIMITIVE:
                    return PRIMITIVE_TYPE_GEN.generate(rnd);
                case SET:
                    return setTypeGen(atBottom ? PRIMITIVE_TYPE_GEN : typeGen(maxDepth - 1, typeKindGen, sizeGen)).generate(rnd);
                case LIST:
                    return listTypeGen(atBottom ? PRIMITIVE_TYPE_GEN : typeGen(maxDepth - 1, typeKindGen, sizeGen)).generate(rnd);
                case MAP:
                    return mapTypeGen(atBottom ? PRIMITIVE_TYPE_GEN : typeGen(maxDepth - 1, typeKindGen, sizeGen)).generate(rnd);
                case TUPLE:
                    return tupleTypeGen(atBottom ? PRIMITIVE_TYPE_GEN : typeGen(maxDepth - 1, typeKindGen, sizeGen), sizeGen).generate(rnd);
                case UDT:
                    return userTypeGen(atBottom ? PRIMITIVE_TYPE_GEN : typeGen(maxDepth - 1, typeKindGen, sizeGen), sizeGen).generate(rnd);
                default:
                    throw new IllegalArgumentException("Unknown kind: " + kind);
            }
        };
    }

