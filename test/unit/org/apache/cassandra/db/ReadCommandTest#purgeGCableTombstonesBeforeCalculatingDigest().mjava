    /**
     * Writes a single partition containing a single row and reads using a partition read. The single
     * row includes 1 live simple column, 1 simple tombstone and 1 complex column with a complex
     * deletion and a live cell. The repaired data digests generated by executing the same query
     * before and after the tombstones become eligible for purging should not match each other.
     * Also, neither digest should be empty as the partition is not made empty by the purging.
     */
    @Test
    public void purgeGCableTombstonesBeforeCalculatingDigest() throws Exception
    {
        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF8);
        cfs.truncateBlocking();
        cfs.disableAutoCompaction();
        setGCGrace(cfs, 600);

        DecoratedKey[] keys = new DecoratedKey[] { Util.dk("key0"), Util.dk("key1"), Util.dk("key2"), Util.dk("key3") };
        int nowInSec = FBUtilities.nowInSeconds();
        TableMetadata cfm = cfs.metadata();

        // A simple tombstone
        new RowUpdateBuilder(cfs.metadata(), 0, keys[0]).clustering("cc").delete("a").build().apply();

        // Collection with an associated complex deletion
        PartitionUpdate.SimpleBuilder builder = PartitionUpdate.simpleBuilder(cfs.metadata(), keys[1]).timestamp(0);
        builder.row("cc").add("c", ImmutableSet.of("element1", "element2"));
        builder.buildAsMutation().apply();

        // RangeTombstone and a row (not covered by the RT). The row contains a regular tombstone which will not be
        // purged. This is to prevent the partition from being fully purged and removed from the final results
        new RowUpdateBuilder(cfs.metadata(), nowInSec, 0L, keys[2]).addRangeTombstone("aa", "bb").build().apply();
        new RowUpdateBuilder(cfs.metadata(), nowInSec+ 1000, 1000L, keys[2]).clustering("cc").delete("a").build().apply();

        // Partition with 2 rows, one fully deleted
        new RowUpdateBuilder(cfs.metadata.get(), 0, keys[3]).clustering("bb").add("a", ByteBufferUtil.bytes("a")).delete("b").build().apply();
        RowUpdateBuilder.deleteRow(cfs.metadata(), 0, keys[3], "cc").apply();
        cfs.forceBlockingFlush();
        cfs.getLiveSSTables().forEach(sstable -> mutateRepaired(cfs, sstable, 111, null));

        Map<DecoratedKey, ByteBuffer> digestsWithTombstones = new HashMap<>();
        //Tombstones are not yet purgable
        for (DecoratedKey key : keys)
        {
            ReadCommand cmd = Util.cmd(cfs, key).withNowInSeconds(nowInSec).build();
            cmd.trackRepairedStatus();
            Partition partition = Util.getOnlyPartitionUnfiltered(cmd);
            assertFalse(partition.isEmpty());
            partition.unfilteredIterator().forEachRemaining(u -> {
                // must be either a RT, or a row containing some kind of deletion
                assertTrue(u.isRangeTombstoneMarker() || ((Row)u).hasDeletion(cmd.nowInSec()));
            });
            ByteBuffer digestWithTombstones = cmd.getRepairedDataDigest();
            // None should generate an empty digest
            assertDigestsDiffer(EMPTY_BYTE_BUFFER, digestWithTombstones);
            digestsWithTombstones.put(key, digestWithTombstones);
        }

        // Make tombstones eligible for purging and re-run cmd with an incremented nowInSec
        setGCGrace(cfs, 0);

        //Tombstones are now purgable, so won't be in the read results and produce different digests
        for (DecoratedKey key : keys)
        {
            ReadCommand cmd = Util.cmd(cfs, key).withNowInSeconds(nowInSec + 60).build();
            cmd.trackRepairedStatus();
            Partition partition = Util.getOnlyPartitionUnfiltered(cmd);
            assertFalse(partition.isEmpty());
            partition.unfilteredIterator().forEachRemaining(u -> {
                // After purging, only rows without any deletions should remain.
                // The one exception is "key2:cc" which has a regular column tombstone which is not
                // eligible for purging. This is to prevent the partition from being fully purged
                // when its RT is removed.
                assertTrue(u.isRow());
                Row r = (Row)u;
                assertTrue(!r.hasDeletion(cmd.nowInSec())
                           || (key.equals(keys[2]) && r.clustering()
                                                       .get(0)
                                                       .equals(AsciiType.instance.fromString("cc"))));

            });
            ByteBuffer digestWithoutTombstones = cmd.getRepairedDataDigest();
            // not an empty digest
            assertDigestsDiffer(EMPTY_BYTE_BUFFER, digestWithoutTombstones);
            // should not match the pre-purge digest
            assertDigestsDiffer(digestsWithTombstones.get(key), digestWithoutTombstones);
        }
    }

