    /**
     * Returns a new value for this tuple type that uses the provided values for the components.
     *
     * <p>The numbers of values passed to this method must correspond to the number of components in
     * this tuple type. The {@code i}th parameter value will then be assigned to the {@code i}th
     * component of the resulting tuple value.
     *
     * @param values the values to use for the component of the resulting tuple.
     * @return a new tuple values based on the provided values.
     * @throws IllegalArgumentException if the number of {@code values} provided does not correspond
     *                                  to the number of components in this tuple type.
     * @throws InvalidTypeException     if any of the provided value is not of the correct type for the
     *                                  component.
     */
    public TupleValue newValue(Object... values)
    {
        if (values.length != types.size())
            throw new IllegalArgumentException(
            String.format(
            "Invalid number of values. Expecting %d but got %d", types.size(), values.length));

        TupleValue t = newValue();
        for (int i = 0; i < values.length; i++)
        {
            DataType dataType = types.get(i);
            if (values[i] == null) t.setValue(i, null);
            else
                t.setValue(
                i, codecRegistry.codecFor(dataType, values[i]).serialize(values[i], protocolVersion));
        }
        return t;
    }

