    @Test
    public void verifyTypes()
    {
        AssertionError master = null;
        for (TypeDef typeDef : allTypes)
        {
            try
            {
                assertEquals(typeDef.toString() + "\n typeString vs type\n", typeDef.typeString, typeDef.type.toString());
                assertEquals(typeDef.toString() + "\n typeString vs cqlType.getType()\n", typeDef.typeString, typeDef.cqlType.getType().toString());
                AbstractType<?> expanded = SchemaKeyspace.expandUserTypes(typeDef.type);
                CQL3Type expandedCQL = expanded.asCQL3Type();
                // Note: cannot include this commented-out assertion, because the parsed CQL3Type instance for
                // 'frozen<list<tuple<text, text>>>' returns 'frozen<list<frozen<tuple<text, text>>>>' via it's CQL3Type.toString()
                // implementation.
                assertEquals(typeDef.toString() + "\n droppedCqlType\n", typeDef.droppedCqlType, expandedCQL);
                assertEquals(typeDef.toString() + "\n droppedCqlTypeString\n", typeDef.droppedCqlTypeString, expandedCQL.toString());
                assertEquals(typeDef.toString() + "\n multiCell\n", typeDef.type.isMultiCell(), typeDef.droppedType.isMultiCell());

                AbstractType<?> parsedType = TypeParser.parse(typeDef.typeString);
                assertEquals(typeDef.toString(), typeDef.typeString, parsedType.toString());
            }
            catch (AssertionError ae)
            {
                if (master == null)
                    master = ae;
                else
                    master.addSuppressed(ae);
            }
        }
        if (master != null)
            throw master;
    }

