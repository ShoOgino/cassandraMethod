        public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, UpdateParameters params) throws InvalidRequestException
        {
            List<Cell> existingList = params.getPrefetchedList(rowKey, column.name);
            if (existingList.isEmpty())
                return;

            Term.Terminal value = t.bind(params.options);
            if (value == null)
                return;

            assert value instanceof Lists.Value;

            // Note: below, we will call 'contains' on this toDiscard list for each element of existingList.
            // Meaning that if toDiscard is big, converting it to a HashSet might be more efficient. However,
            // the read-before-write this operation requires limits its usefulness on big lists, so in practice
            // toDiscard will be small and keeping a list will be more efficient.
            List<ByteBuffer> toDiscard = ((Lists.Value)value).elements;
            for (Cell cell : existingList)
            {
                if (toDiscard.contains(cell.value()))
                    cf.addColumn(params.makeTombstone(cell.name()));
            }
        }

