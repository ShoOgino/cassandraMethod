    /**
     * A clean way to implement each variant of await using lambdas; we permit a nanos parameter
     * so that we can implement this without any unnecessary lambda allocations, although not
     * all implementations need the nanos parameter (i.e. those that wait indefinitely)
     */
    private <T extends Throwable> boolean await(long nanos, Awaiter<T> awaiter) throws T
    {
        if (isDone())
            return true;

        WaitQueue.Signal await = registerToWait();
        if (null != await)
            return awaiter.await(await, nanos);

        return true;
    }

