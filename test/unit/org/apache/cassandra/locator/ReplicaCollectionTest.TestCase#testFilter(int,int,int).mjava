        void testFilter(int subListDepth, int filterDepth, int sortDepth)
        {
            if (test.isSnapshot)
                Assert.assertSame(test, test.filter(Predicates.alwaysTrue()));

            if (test.isEmpty())
                return;

            // remove start
            // we recurse on the same subset in testSubList, so just corroborate we have the correct list here
            {
                Predicate<Replica> removeFirst = r -> r != canonicalList.get(0);
                assertSubList(test.filter(removeFirst), 1, canonicalList.size());
                assertSubList(test.filter(removeFirst, 1), 1, Math.min(canonicalList.size(), 2));
            }

            if (test.size() <= 1)
                return;

            // remove end
            // we recurse on the same subset in testSubList, so just corroborate we have the correct list here
            {
                int last = canonicalList.size() - 1;
                Predicate<Replica> removeLast = r -> r != canonicalList.get(last);
                assertSubList(test.filter(removeLast), 0, last);
            }

            if (test.size() <= 2)
                return;

            Predicate<Replica> removeMiddle = r -> r != canonicalList.get(canonicalList.size() / 2);
            TestCase<C> filtered = new TestCase<>(test.filter(removeMiddle), ImmutableList.copyOf(filter(canonicalList, removeMiddle::test)));
            filtered.testAll(subListDepth, filterDepth - 1, sortDepth);
        }

