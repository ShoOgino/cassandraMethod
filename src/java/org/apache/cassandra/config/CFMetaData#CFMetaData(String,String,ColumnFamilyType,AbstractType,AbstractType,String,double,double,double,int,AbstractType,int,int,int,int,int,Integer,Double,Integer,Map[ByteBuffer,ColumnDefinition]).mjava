    private CFMetaData(String tableName,
                       String cfName,
                       ColumnFamilyType cfType,
                       AbstractType comparator,
                       AbstractType subcolumnComparator,
                       String comment,
                       double rowCacheSize,
                       double keyCacheSize,
                       double readRepairChance,
                       int gcGraceSeconds,
                       AbstractType defaultValidator,
                       int minCompactionThreshold,
                       int maxCompactionThreshold,
                       int rowCacheSavePeriodInSeconds,
                       int keyCacheSavePeriodInSeconds,
                       int memtableFlushAfterMins,
                       Integer memtableThroughputInMb,
                       Double memtableOperationsInMillions,
                       Integer cfId,
                       Map<ByteBuffer, ColumnDefinition> column_metadata)

    {
        assert column_metadata != null;
        this.tableName = tableName;
        this.cfName = cfName;
        this.cfType = cfType;
        this.comparator = comparator;
        // the default subcolumncomparator is null per thrift spec, but only should be null if cfType == Standard. If
        // cfType == Super, subcolumnComparator should default to BytesType if not set.
        this.subcolumnComparator = subcolumnComparator == null && cfType == ColumnFamilyType.Super
                                   ? BytesType.instance
                                   : subcolumnComparator;
        this.comment = comment == null ? "" : comment;
        this.rowCacheSize = rowCacheSize;
        this.keyCacheSize = keyCacheSize;
        this.readRepairChance = readRepairChance;
        this.gcGraceSeconds = gcGraceSeconds;
        this.defaultValidator = defaultValidator;
        this.minCompactionThreshold = minCompactionThreshold;
        this.maxCompactionThreshold = maxCompactionThreshold;
        this.rowCacheSavePeriodInSeconds = rowCacheSavePeriodInSeconds;
        this.keyCacheSavePeriodInSeconds = keyCacheSavePeriodInSeconds;
        this.memtableFlushAfterMins = memtableFlushAfterMins;
        this.memtableThroughputInMb = memtableThroughputInMb == null
                                      ? DEFAULT_MEMTABLE_THROUGHPUT_IN_MB
                                      : memtableThroughputInMb;
        this.memtableOperationsInMillions = memtableOperationsInMillions == null
                                            ? DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS
                                            : memtableOperationsInMillions;
        this.cfId = cfId;
        this.column_metadata = new HashMap<ByteBuffer, ColumnDefinition>(column_metadata);
    }

