        // called from the TCP READ thread pool
        public void run()
        {                         
            if ( tcpReader_ == null )
            {
                tcpReader_ = new TcpReader(TcpConnection.this);    
                StartState nextState = tcpReader_.getSocketState(TcpReader.TcpReaderState.PREAMBLE);
                if ( nextState == null )
                {
                    nextState = new ProtocolState(tcpReader_);
                    tcpReader_.putSocketState(TcpReader.TcpReaderState.PREAMBLE, nextState);
                }
                tcpReader_.morphState(nextState);
            }
            
            try
            {           
                byte[] bytes;
                while ( (bytes = tcpReader_.read()).length > 0 )
                {                       
                    ProtocolHeader pH = tcpReader_.getProtocolHeader();                    
                    if ( !pH.isStreamingMode_ )
                    {
                        /* first message received */
                        if (remoteEp_ == null)
                        {
                            remoteEp_ = socketChannel_.socket().getInetAddress();
                        }
                        
                        /* Deserialize and handle the message */
                        MessagingService.getDeserializationExecutor().submit( new MessageDeserializationTask(pH.serializerType_, bytes) );                                                  
                        tcpReader_.resetState();
                    }
                    else
                    {
                        /* Close this socket connection  used for streaming */
                        closeSocket();
                    }                    
                }
            }
            catch ( IOException ex )
            {                   
                handleException(ex);
            }
            catch ( Throwable th )
            {
                handleException(th);
            }
            finally
            {
                if (key_.isValid()) //not valid if closeSocket has been called above
                    turnOnInterestOps(key_, SelectionKey.OP_READ);
            }
        }

