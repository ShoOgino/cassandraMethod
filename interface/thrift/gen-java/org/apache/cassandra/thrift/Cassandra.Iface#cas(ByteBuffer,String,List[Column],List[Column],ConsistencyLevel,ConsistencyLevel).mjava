    /**
     * Atomic compare and set.
     * 
     * If the cas is successfull, the success boolean in CASResult will be true and there will be no current_values.
     * Otherwise, success will be false and current_values will contain the current values for the columns in
     * expected (that, by definition of compare-and-set, will differ from the values in expected).
     * 
     * A cas operation takes 2 consistency level. The first one, serial_consistency_level, simply indicates the
     * level of serialization required. This can be either ConsistencyLevel.SERIAL or ConsistencyLevel.LOCAL_SERIAL.
     * The second one, commit_consistency_level, defines the consistency level for the commit phase of the cas. This
     * is a more traditional consistency level (the same CL than for traditional writes are accepted) that impact
     * the visibility for reads of the operation. For instance, if commit_consistency_level is QUORUM, then it is
     * guaranteed that a followup QUORUM read will see the cas write (if that one was successful obviously). If
     * commit_consistency_level is ANY, you will need to use a SERIAL/LOCAL_SERIAL read to be guaranteed to see
     * the write.
     * 
     * @param key
     * @param column_family
     * @param expected
     * @param updates
     * @param serial_consistency_level
     * @param commit_consistency_level
     */
    public CASResult cas(ByteBuffer key, String column_family, List<Column> expected, List<Column> updates, ConsistencyLevel serial_consistency_level, ConsistencyLevel commit_consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException;

