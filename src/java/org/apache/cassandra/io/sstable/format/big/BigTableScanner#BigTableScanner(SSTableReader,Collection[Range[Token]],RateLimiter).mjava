    /**
     * @param sstable SSTable to scan; must not be null
     * @param tokenRanges A set of token ranges to scan
     * @param limiter background i/o RateLimiter; may be null
     */
    private BigTableScanner(SSTableReader sstable, Collection<Range<Token>> tokenRanges, RateLimiter limiter)
    {
        assert sstable != null;

        this.dfile = limiter == null ? sstable.openDataReader() : sstable.openDataReader(limiter);
        this.ifile = sstable.openIndexReader();
        this.sstable = sstable;
        this.dataRange = null;
        this.rowIndexEntrySerializer = sstable.descriptor.version.getSSTableFormat().getIndexSerializer(sstable.metadata);

        List<Range<Token>> normalized = Range.normalize(tokenRanges);
        List<AbstractBounds<RowPosition>> boundsList = new ArrayList<>(normalized.size());
        // we enforce the first/last keys of the sstablereader
        for (Range<Token> range : normalized)
        {
            // cap our ranges by the start/end of the sstable
            RowPosition right = range.right.maxKeyBound();
            if (right.compareTo(sstable.last) > 0)
                right = sstable.last;

            RowPosition left = range.left.maxKeyBound();
            if (left.compareTo(sstable.first) < 0)
            {
                if (sstable.first.compareTo(right) <= 0)
                    boundsList.add(new Bounds<>(sstable.first, right));
            }
            else if (left.compareTo(right) < 0)
                boundsList.add(new Range<>(left, right));
        }

        this.rangeIterator = boundsList.iterator();
    }

