        // narrowing range constructor - makes this the intersection of the two ranges over the same tree b
        BTreeRange(BTreeRange<V> a, BTreeRange<V> b)
        {
            super(a.tree, a.comparator);
            assert a.tree == b.tree;
            final BTreeRange<V> lb, ub;

            if (a.lowerBound == null)
            {
                lb = b;
            }
            else if (b.lowerBound == null)
            {
                lb = a;
            }
            else
            {
                int c = comparator.compare(a.lowerBound, b.lowerBound);
                if (c < 0)
                    lb = b;
                else if (c > 0)
                    lb = a;
                else if (!a.inclusiveLowerBound)
                    lb = a;
                else
                    lb = b;
            }

            if (a.upperBound == null)
            {
                ub = b;
            }
            else if (b.upperBound == null)
            {
                ub = a;
            }
            else
            {
                int c = comparator.compare(b.upperBound, a.upperBound);
                if (c < 0)
                    ub = b;
                else if (c > 0)
                    ub = a;
                else if (!a.inclusiveUpperBound)
                    ub = a;
                else
                    ub = b;
            }

            lowerBound = lb.lowerBound;
            inclusiveLowerBound = lb.inclusiveLowerBound;
            upperBound = ub.upperBound;
            inclusiveUpperBound = ub.inclusiveUpperBound;
        }

