    @Test
    public void testRecoverAndOpenAESCommutative() throws IOException, ExecutionException, InterruptedException, UnknownHostException
    {
        String keyspace = "Keyspace1";
        String cfname   = "Counter1";

        Map<ByteBuffer, ByteBuffer> entries = new HashMap<ByteBuffer, ByteBuffer>();
        Map<ByteBuffer, ByteBuffer> cleanedEntries = new HashMap<ByteBuffer, ByteBuffer>();

        DataOutputBuffer buffer;

        ColumnFamily cf = ColumnFamily.create(keyspace, cfname);
        byte[] context;

        // key: k
        context = Util.concatByteArrays(
            FBUtilities.getLocalAddress().getAddress(),
                FBUtilities.toByteArray(9L),
                FBUtilities.toByteArray(3L),
            FBUtilities.toByteArray(2),  FBUtilities.toByteArray(4L), FBUtilities.toByteArray(2L),
            FBUtilities.toByteArray(4),  FBUtilities.toByteArray(3L), FBUtilities.toByteArray(3L),
            FBUtilities.toByteArray(8),  FBUtilities.toByteArray(2L), FBUtilities.toByteArray(4L)
            );
        cf.addColumn(new CounterColumn(
            ByteBufferUtil.bytes("x"),
            ByteBuffer.wrap(cc.total(context)),
            0L,
            context
            ));
        context = Util.concatByteArrays(
            FBUtilities.toByteArray(1),  FBUtilities.toByteArray(7L), FBUtilities.toByteArray(12L),
            FBUtilities.getLocalAddress().getAddress(),
                FBUtilities.toByteArray(5L),
                FBUtilities.toByteArray(3L),
            FBUtilities.toByteArray(3),  FBUtilities.toByteArray(2L), FBUtilities.toByteArray(33L),
            FBUtilities.toByteArray(9),  FBUtilities.toByteArray(1L), FBUtilities.toByteArray(24L)
            );
        cf.addColumn(new CounterColumn(
            ByteBufferUtil.bytes("y"),
            ByteBuffer.wrap(cc.total(context)),
            0L,
            context
            ));

        buffer = new DataOutputBuffer();
        ColumnFamily.serializer().serializeWithIndexes(cf, buffer);
        entries.put(
            ByteBufferUtil.bytes("k"),
            ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength()))
            );

        ctype.cleanContext(cf, FBUtilities.getLocalAddress());
        buffer = new DataOutputBuffer();
        ColumnFamily.serializer().serializeWithIndexes(cf, buffer);
        cleanedEntries.put(
            ByteBufferUtil.bytes("k"),
            ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength()))
            );
        
        cf.clear();

        // key: l
        context = Util.concatByteArrays(
            FBUtilities.getLocalAddress().getAddress(),
                FBUtilities.toByteArray(9L),
                FBUtilities.toByteArray(3L),
            FBUtilities.toByteArray(2),  FBUtilities.toByteArray(4L), FBUtilities.toByteArray(2L),
            FBUtilities.toByteArray(4),  FBUtilities.toByteArray(3L), FBUtilities.toByteArray(3L),
            FBUtilities.toByteArray(8),  FBUtilities.toByteArray(2L), FBUtilities.toByteArray(4L)
            );
        cf.addColumn(new CounterColumn(
            ByteBufferUtil.bytes("x"),
            ByteBuffer.wrap(cc.total(context)),
            0L,
            context
            ));
        context = Util.concatByteArrays(
            FBUtilities.toByteArray(1),  FBUtilities.toByteArray(7L), FBUtilities.toByteArray(12L),
            FBUtilities.toByteArray(3),  FBUtilities.toByteArray(2L), FBUtilities.toByteArray(33L),
            FBUtilities.toByteArray(9),  FBUtilities.toByteArray(1L), FBUtilities.toByteArray(24L)
            );
        cf.addColumn(new CounterColumn(
            ByteBufferUtil.bytes("y"),
            ByteBuffer.wrap(cc.total(context)),
            0L,
            context
            ));

        buffer = new DataOutputBuffer();
        ColumnFamily.serializer().serializeWithIndexes(cf, buffer);
        entries.put(
            ByteBufferUtil.bytes("l"),
            ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength()))
            );

        ctype.cleanContext(cf, FBUtilities.getLocalAddress());
        buffer = new DataOutputBuffer();
        ColumnFamily.serializer().serializeWithIndexes(cf, buffer);
        cleanedEntries.put(
            ByteBufferUtil.bytes("l"),
            ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength()))
            );

        cf.clear();

        // write out unmodified CF
        SSTableReader orig = SSTableUtils.writeRawSSTable(keyspace, cfname, entries, 0);

        // whack the index to trigger the recover
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.FILTER));

        // re-build inline
        SSTableReader rebuilt = CompactionManager.instance.submitSSTableBuild(
            orig.descriptor,
            OperationType.AES
            ).get();

        // write out cleaned CF
        SSTableReader cleaned = SSTableUtils.writeRawSSTable(keyspace, cfname, cleanedEntries, 0);

        // verify
        BufferedRandomAccessFile origFile    = new BufferedRandomAccessFile(orig.descriptor.filenameFor(SSTable.COMPONENT_DATA), "r", 8 * 1024 * 1024);
        BufferedRandomAccessFile cleanedFile = new BufferedRandomAccessFile(cleaned.descriptor.filenameFor(SSTable.COMPONENT_DATA), "r", 8 * 1024 * 1024);

        while(origFile.getFilePointer() < origFile.length() && cleanedFile.getFilePointer() < cleanedFile.length())
        {
            assert origFile.readByte() == cleanedFile.readByte();
        }
        assert origFile.getFilePointer() == origFile.length();
        assert cleanedFile.getFilePointer() == cleanedFile.length();
    }

