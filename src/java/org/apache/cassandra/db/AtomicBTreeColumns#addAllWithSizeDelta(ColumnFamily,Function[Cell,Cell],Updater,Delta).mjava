    /**
     * This is only called by Memtable.resolve, so only AtomicBTreeColumns needs to implement it.
     *
     * @return the difference in size seen after merging the given columns
     */
    public Delta addAllWithSizeDelta(final ColumnFamily cm, Function<Cell, Cell> transformation, Updater indexer, Delta delta)
    {
        boolean transformed = false;
        Collection<Cell> insert = cm.getSortedColumns();

        while (true)
        {
            Holder current = ref;

            delta.reset();
            DeletionInfo deletionInfo;
            if (cm.deletionInfo().mayModify(current.deletionInfo))
            {
                deletionInfo = current.deletionInfo.copy().add(cm.deletionInfo());
                delta.addHeapSize(deletionInfo.unsharedHeapSize() - current.deletionInfo.unsharedHeapSize());
            }
            else
            {
                deletionInfo = current.deletionInfo;
            }

            ColumnUpdater updater = new ColumnUpdater(this, current, transformation, indexer, delta);
            Object[] tree = BTree.update(current.tree, metadata.comparator.columnComparator(), insert, true, updater);

            if (tree != null && refUpdater.compareAndSet(this, current, new Holder(tree, deletionInfo)))
            {
                indexer.updateRowLevelIndexes();
                return updater.delta;
            }

            if (!transformed)
            {
                // After failing once, transform Columns into a new collection to avoid repeatedly allocating Slab space
                insert = transform(metadata.comparator.columnComparator(), cm, transformation, false);
                transformed = true;
            }
        }

    }

