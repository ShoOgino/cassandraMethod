    public byte[] update(byte[] context, InetAddress node, long delta)
    {
        // calculate node id
        byte[] nodeId = node.getAddress();
        int idCount = context.length / stepLength;

        // look for this node id
        for (int stepOffset = 0; stepOffset < idCount; ++stepOffset)
        {
            int offset = stepOffset * stepLength;
            int cmp = FBUtilities.compareByteSubArrays(nodeId, 0, context, offset, idLength);
            if (cmp == 0)
            {
                // node id found: increment clock, update count; shift to front
                long clock = FBUtilities.byteArrayToLong(context, offset + idLength);
                long count = FBUtilities.byteArrayToLong(context, offset + idLength + clockLength);

                writeElementAtStepOffset(context, stepOffset, nodeId, clock + 1L, count + delta);
                return context;
            }
            if (cmp < 0)
            {
                // id at offset is greater that the one we are updating, inserting
                return insertElementAtStepOffset(context, stepOffset, nodeId, 1L, delta);
            }
        }

        // node id not found: adding at the end
        return insertElementAtStepOffset(context, idCount, nodeId, 1L, delta);
    }

