    /**
     * Update each of the records with the relevant data
     *
     * @param context the reference to the context which has called this callback
     */
    public void doUpdates(AnalyticsContext context)
    {
        // update the read operations record
        MetricsRecord readUsageRecord = context.getMetricsRecord(RECORD_READ_OPS);
        int period = context.getPeriod();

        if(readUsageRecord != null)
        {
            if ( readOperations_.get() > 0 )
            {
                readUsageRecord.setTag(TAG_READOPS, TAG_READ_OPS);
                readUsageRecord.setMetric(METRIC_READ_OPS, readOperations_.get() / period);
                readUsageRecord.update();
            }
        }

        // update the read latency record
        MetricsRecord readLatencyRecord = context.getMetricsRecord(RECORD_READ_AVG);
        if(readLatencyRecord != null)
        {
            if ( readOperations_.get() > 0 )
            {
                readLatencyRecord.setTag(TAG_READAVG, TAG_READ_AVG);
                readLatencyRecord.setMetric(METRIC_READ_AVG, readLatencies_.get() / readOperations_.get() );
                readLatencyRecord.update();
            }
        }

        // update the write operations record
        MetricsRecord writeUsageRecord = context.getMetricsRecord(RECORD_WRITE_OPS);
        if(writeUsageRecord != null)
        {
            if ( writeOperations_.get() > 0 )
            {
                writeUsageRecord.setTag(TAG_WRITEOPS, TAG_WRITE_OPS);
                writeUsageRecord.setMetric(METRIC_WRITE_OPS, writeOperations_.get() / period);
                writeUsageRecord.update();
            }
        }

        // update the write latency record
        MetricsRecord writeLatencyRecord = context.getMetricsRecord(RECORD_WRITE_AVG);
        if(writeLatencyRecord != null)
        {
            if ( writeOperations_.get() > 0 )
            {
                writeLatencyRecord.setTag(TAG_WRITEAVG, TAG_WRITE_AVG);
                writeLatencyRecord.setMetric(METRIC_WRITE_AVG, writeLatencies_.get() / writeOperations_.get() );
                writeLatencyRecord.update();
            }
        }

        clear();
    }

