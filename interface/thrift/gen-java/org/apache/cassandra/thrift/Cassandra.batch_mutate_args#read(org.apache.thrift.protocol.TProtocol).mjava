    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // MUTATION_MAP
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map133 = iprot.readMapBegin();
                this.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map133.size);
                for (int _i134 = 0; _i134 < _map133.size; ++_i134)
                {
                  ByteBuffer _key135; // required
                  Map<String,List<Mutation>> _val136; // required
                  _key135 = iprot.readBinary();
                  {
                    org.apache.thrift.protocol.TMap _map137 = iprot.readMapBegin();
                    _val136 = new HashMap<String,List<Mutation>>(2*_map137.size);
                    for (int _i138 = 0; _i138 < _map137.size; ++_i138)
                    {
                      String _key139; // required
                      List<Mutation> _val140; // required
                      _key139 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list141 = iprot.readListBegin();
                        _val140 = new ArrayList<Mutation>(_list141.size);
                        for (int _i142 = 0; _i142 < _list141.size; ++_i142)
                        {
                          Mutation _elem143; // required
                          _elem143 = new Mutation();
                          _elem143.read(iprot);
                          _val140.add(_elem143);
                        }
                        iprot.readListEnd();
                      }
                      _val136.put(_key139, _val140);
                    }
                    iprot.readMapEnd();
                  }
                  this.mutation_map.put(_key135, _val136);
                }
                iprot.readMapEnd();
              }
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

