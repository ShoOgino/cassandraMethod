    public synchronized void removeChildren(LatencyMetrics toRelease)
    {
        /*
        Merge details of removed children metrics and add them to our local copy to prevent metrics from going
        backwards. Synchronized since these methods are not thread safe to prevent multiple simultaneous removals.
        Will not protect against simultaneous updates, but since these methods are used by linked parent instances only,
        they should not receive any updates.
         */
        ((LatencyMetricsTimer) this.latency).releasedLatencyCount += toRelease.latency.getCount();

        DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot childSnapshot = (DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot) toRelease.latency.getSnapshot();
        DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot snapshot = (DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot) this.latency.getSnapshot();

        snapshot.add(childSnapshot);
        snapshot.rebaseReservoir();

        this.totalLatency.inc(toRelease.totalLatency.getCount());

        // Now we can remove the reference
        this.children.removeIf(latencyMetrics -> latencyMetrics.equals(toRelease));
    }

