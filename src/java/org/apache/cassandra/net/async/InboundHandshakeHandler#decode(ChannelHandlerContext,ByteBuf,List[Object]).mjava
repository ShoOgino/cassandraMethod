    @Override
    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
    {
        try
        {
            if (!hasAuthenticated)
            {
                logSecureSocketDetails(ctx);
                if (!handleAuthenticate(ctx.channel().remoteAddress(), ctx))
                    return;
            }

            switch (state)
            {
                case START:
                    state = handleStart(ctx, in);
                    break;
                case AWAIT_MESSAGING_START_RESPONSE:
                    state = handleMessagingStartResponse(ctx, in);
                    break;
                case HANDSHAKE_FAIL:
                    throw new IllegalStateException("channel should be closed after determining the handshake failed with peer: " + ctx.channel().remoteAddress());
                default:
                    logger.error("unhandled state: {}", state);
                    state = State.HANDSHAKE_FAIL;
                    ctx.close();
            }
        }
        catch (Exception e)
        {
            logger.error("unexpected error while negotiating internode messaging handshake", e);
            state = State.HANDSHAKE_FAIL;
            ctx.close();
        }
    }

