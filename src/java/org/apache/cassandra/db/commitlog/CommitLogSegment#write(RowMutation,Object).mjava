    public CommitLogSegment.CommitLogContext write(RowMutation rowMutation, Object serializedRow) throws IOException
    {
        long currentPosition = -1L;
        try
        {
            currentPosition = logWriter.getFilePointer();
            CommitLogSegment.CommitLogContext cLogCtx = new CommitLogSegment.CommitLogContext(currentPosition);
            Table table = Table.open(rowMutation.getTable());

            // update header
            for (ColumnFamily columnFamily : rowMutation.getColumnFamilies())
            {
                // we can ignore the serialized map in the header (and avoid deserializing it) since we know we are
                // writing the cfs as they exist now.  check for null cfm in case a cl write goes through after the cf is 
                // defined but before a new segment is created.
                CFMetaData cfm = DatabaseDescriptor.getCFMetaData(columnFamily.id());
                if (cfm == null)
                {
                    logger.error("Attempted to write commit log entry for unrecognized column family: " + columnFamily.id());
                }
                else
                {
                    int id = cfm.cfId;
                    if (!header.isDirty(id))
                    {
                        header.turnOn(id, logWriter.getFilePointer());
                        seekAndWriteCommitLogHeader(header.toByteArray());
                    }
                }
            }

            // write mutation, w/ checksum
            Checksum checkum = new CRC32();
            if (serializedRow instanceof DataOutputBuffer)
            {
                DataOutputBuffer buffer = (DataOutputBuffer) serializedRow;
                logWriter.writeInt(buffer.getLength());
                logWriter.write(buffer.getData(), 0, buffer.getLength());
                checkum.update(buffer.getData(), 0, buffer.getLength());
            }
            else
            {
                assert serializedRow instanceof byte[];
                byte[] bytes = (byte[]) serializedRow;
                logWriter.writeInt(bytes.length);
                logWriter.write(bytes);
                checkum.update(bytes, 0, bytes.length);
            }
            logWriter.writeLong(checkum.getValue());

            return cLogCtx;
        }
        catch (IOException e)
        {
            if (currentPosition != -1)
                logWriter.seek(currentPosition);
            throw e;
        }
    }

