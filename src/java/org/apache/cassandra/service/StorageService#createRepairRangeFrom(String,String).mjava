    /**
     * Create collection of ranges that match ring layout from given tokens.
     *
     * @param beginToken beginning token of the range
     * @param endToken end token of the range
     * @return collection of ranges that match ring layout in TokenMetadata
     */
    @SuppressWarnings("unchecked")
    private Collection<Range<Token>> createRepairRangeFrom(String beginToken, String endToken)
    {
        Token parsedBeginToken = getPartitioner().getTokenFactory().fromString(beginToken);
        Token parsedEndToken = getPartitioner().getTokenFactory().fromString(endToken);

        Deque<Range<Token>> repairingRange = new ArrayDeque<>();
        // Break up given range to match ring layout in TokenMetadata
        Token previous = tokenMetadata.getPredecessor(TokenMetadata.firstToken(tokenMetadata.sortedTokens(), parsedEndToken));
        while (parsedBeginToken.compareTo(previous) < 0)
        {
            repairingRange.addFirst(new Range<>(previous, parsedEndToken));

            parsedEndToken = previous;
            previous = tokenMetadata.getPredecessor(previous);
        }
        repairingRange.addFirst(new Range<>(parsedBeginToken, parsedEndToken));

        return repairingRange;
    }

