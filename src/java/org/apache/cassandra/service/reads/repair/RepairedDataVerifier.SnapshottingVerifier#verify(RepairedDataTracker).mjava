        public void verify(RepairedDataTracker tracker)
        {
            super.verify(tracker);
            if (tracker.digests.keySet().size() > 1)
            {
                if (tracker.inconclusiveDigests.isEmpty() ||  DatabaseDescriptor.reportUnconfirmedRepairedDataMismatches())
                {
                    long now = System.nanoTime();
                    AtomicLong cached = LAST_SNAPSHOT_TIMES.computeIfAbsent(command.metadata().id, u -> new AtomicLong(0));
                    long last = cached.get();
                    if (now - last > SNAPSHOT_INTERVAL_NANOS && cached.compareAndSet(last, now))
                    {
                        logger.warn(SNAPSHOTTING_WARNING, command.metadata().keyspace, command.metadata().name, command.toString(), tracker);
                        Message<SnapshotCommand> msg = Message.out(Verb.SNAPSHOT_REQ,
                                                                   new SnapshotCommand(command.metadata().keyspace,
                                                                                       command.metadata().name,
                                                                                       getSnapshotName(),
                                                                                       false));
                        for (InetAddressAndPort replica : tracker.digests.values())
                            MessagingService.instance().send(msg, replica);
                    }
                }
            }
        }

