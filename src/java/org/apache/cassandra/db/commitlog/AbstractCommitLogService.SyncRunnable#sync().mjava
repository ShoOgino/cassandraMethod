        boolean sync()
        {
            try
            {
                // always run once after shutdown signalled
                boolean run = !shutdown;

                // sync and signal
                long pollStarted = clock.currentTimeMillis();
                boolean flushToDisk = lastSyncedAt + syncIntervalMillis <= pollStarted || shutdown || syncRequested;
                if (flushToDisk)
                {
                    // in this branch, we want to flush the commit log to disk
                    syncRequested = false;
                    commitLog.sync(shutdown, true);
                    lastSyncedAt = pollStarted;
                    syncComplete.signalAll();
                    syncCount++;
                }
                else
                {
                    // in this branch, just update the commit log sync headers
                    commitLog.sync(false, false);
                }

                long now = clock.currentTimeMillis();
                if (flushToDisk)
                    maybeLogFlushLag(pollStarted, now);

                if (!run)
                    return false;

                // if we have lagged this round, we probably have work to do already so we don't sleep
                long sleep = pollStarted + markerIntervalMillis - now;
                if (sleep < 0)
                    return true;

                try
                {
                    haveWork.tryAcquire(sleep, TimeUnit.MILLISECONDS);
                    haveWork.drainPermits();
                }
                catch (InterruptedException e)
                {
                    throw new AssertionError();
                }
            }
            catch (Throwable t)
            {
                if (!CommitLog.handleCommitError("Failed to persist commits to disk", t))
                    return false;

                // sleep for full poll-interval after an error, so we don't spam the log file
                try
                {
                    haveWork.tryAcquire(markerIntervalMillis, TimeUnit.MILLISECONDS);
                }
                catch (InterruptedException e)
                {
                    throw new AssertionError();
                }
            }
            return true;
        }

