    @Test
    public void snapshotFailure()
    {
        Assume.assumeFalse("incremental does not do snapshot", repairType == RepairType.INCREMENTAL);
        Assume.assumeFalse("Parallel repair does not perform snapshots", parallelism == RepairParallelism.PARALLEL);

        String table = tableName("snapshotfailure");
        assertTimeoutPreemptively(Duration.ofMinutes(1), () -> {
            CLUSTER.schemaChange(format("CREATE TABLE %s.%s (key text, value text, PRIMARY KEY (key))", KEYSPACE, table));
            IMessageFilters.Filter filter = CLUSTER.verbs(Verb.SNAPSHOT_MSG).messagesMatching(of(m -> {
                throw new RuntimeException("snapshot fail");
            })).drop();
            try
            {
                long repairExceptions = getRepairExceptions(CLUSTER, 1);
                NodeToolResult result = repair(1, KEYSPACE, table);
                result.asserts()
                      .failure();
                      // Right now coordination doesn't propgate the first exception, so we only know "there exists a issue".
                      // With notifications on nodetool will see the error then complete, so the cmd state (what nodetool
                      // polls on) is ignored.  With notifications off or dropped, the poll await fails and queries cmd
                      // state, and that will have the below error.
                      // NOTE: this isn't desireable, would be good to propgate
                      // TODO replace with errorContainsAny once dtest api updated
                Throwable error = result.getError();
                Assert.assertNotNull("Error was null", error);
                if (!(error.getMessage().contains("Could not create snapshot") || error.getMessage().contains("Some repair failed")))
                    throw new AssertionError("Unexpected error, expected to contain 'Could not create snapshot' or 'Some repair failed'", error);
                if (withNotifications)
                {
                    result.asserts()
                          .notificationContains(ProgressEventType.START, "Starting repair command")
                          .notificationContains(ProgressEventType.START, "repairing keyspace " + KEYSPACE + " with repair options")
                          .notificationContains(ProgressEventType.ERROR, "Could not create snapshot ")
                          .notificationContains(ProgressEventType.COMPLETE, "finished with error");
                }

                Assert.assertEquals(repairExceptions + 1, getRepairExceptions(CLUSTER, 1));
                if (repairType != RepairType.PREVIEW)
                {
                    assertParentRepairFailedWithMessageContains(CLUSTER, KEYSPACE, table, "Could not create snapshot");
                }
                else
                {
                    assertParentRepairNotExist(CLUSTER, KEYSPACE, table);
                }
            }
            finally
            {
                filter.off();
            }
        });
    }

