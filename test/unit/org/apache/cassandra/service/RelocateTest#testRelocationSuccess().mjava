    /** Use STATUS changes to trigger membership update and validate results. */
    @Test
    public void testRelocationSuccess() throws UnknownHostException
    {
        createInitialRing(5);

        // Node handling the relocation (dst), and the token being relocated (src).
        InetAddress relocator = InetAddress.getByName("127.0.0.3");
        Token relocatee = new BigIntegerToken(String.valueOf(TOKEN_STEP));

        // Send RELOCATING and ensure token status
        ss.onChange(relocator, ApplicationState.STATUS, vvFactory.relocating(Collections.singleton(relocatee)));
        assertTrue(tmd.isRelocating(relocatee));

        // Create a list of the endpoint's existing tokens, and add the relocatee to it.
        List<Token> tokens = new ArrayList<Token>(tmd.getTokens(relocator));
        SystemTable.updateTokens(tokens);
        tokens.add(relocatee);

        // Send a normal status, then ensure all is copesetic.
        Gossiper.instance.injectApplicationState(relocator, ApplicationState.TOKENS, vvFactory.tokens(tokens));
        ss.onChange(relocator, ApplicationState.STATUS, vvFactory.normal(tokens));

        // Relocating entries are removed after RING_DELAY
        Uninterruptibles.sleepUninterruptibly(StorageService.RING_DELAY + 10, TimeUnit.MILLISECONDS);

        assertTrue(!tmd.isRelocating(relocatee));
        assertEquals(tmd.getEndpoint(relocatee), relocator);
    }

