    static List<Section> getRepairedStats(List<Section> sections, Collection<Range<Token>> ranges)
    {
        if (ranges.isEmpty())
            return Collections.emptyList();

        Set<Range<Token>> remaining = Sets.newHashSet(Range.normalize(ranges));
        List<Section> results = new ArrayList<>();

        for (Section section : sections)
        {
            if (remaining.isEmpty())
                break;

            Set<Range<Token>> sectionRanges = Range.rangeSet(section.range);
            for (Range<Token> range : remaining)
            {
                if (sectionRanges.isEmpty())
                    break;

                Set<Range<Token>> intersection = new HashSet<>();
                sectionRanges.forEach(r -> intersection.addAll(r.intersectionWith(range)));

                if (intersection.isEmpty())
                    continue;

                intersection.forEach(r -> results.add(section.makeSubsection(r)));
                sectionRanges = Range.subtract(sectionRanges, intersection);
            }

            remaining = Range.subtract(remaining, Collections.singleton(section.range));
        }

        remaining.forEach(r -> results.add(new Section(r, UNREPAIRED_SSTABLE)));
        results.sort(Section.tokenComparator);

        return results;
    }

