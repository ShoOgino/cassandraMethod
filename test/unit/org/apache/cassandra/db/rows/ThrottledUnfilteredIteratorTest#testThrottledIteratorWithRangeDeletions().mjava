    @Test
    public void testThrottledIteratorWithRangeDeletions() throws Exception
    {
        Keyspace keyspace = Keyspace.open(KSNAME);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CFNAME);

        // Inserting data
        String key = "k1";

        UpdateBuilder builder;

        builder = UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0);
        for (int i = 0; i < 40; i += 2)
            builder.newRow(i).add("val", i);
        builder.applyUnsafe();

        new RowUpdateBuilder(cfs.metadata(), 1, key).addRangeTombstone(10, 22).build().applyUnsafe();

        cfs.forceBlockingFlush();

        builder = UpdateBuilder.create(cfs.metadata(), key).withTimestamp(2);
        for (int i = 1; i < 40; i += 2)
            builder.newRow(i).add("val", i);
        builder.applyUnsafe();

        new RowUpdateBuilder(cfs.metadata(), 3, key).addRangeTombstone(19, 27).build().applyUnsafe();
        // We don't flush to test with both a range tomsbtone in memtable and in sstable

        // Queries by name
        int[] live = new int[]{ 4, 9, 11, 17, 28 };
        int[] dead = new int[]{ 12, 19, 21, 24, 27 };

        AbstractReadCommandBuilder.PartitionRangeBuilder cmdBuilder = Util.cmd(cfs);

        ReadCommand cmd = cmdBuilder.build();

        for (int batchSize = 2; batchSize <= 40; batchSize++)
        {
            List<UnfilteredRowIterator> unfilteredRowIterators = new LinkedList<>();

            try (ReadExecutionController executionController = cmd.executionController();
                 UnfilteredPartitionIterator iterator = cmd.executeLocally(executionController))
            {
                assertTrue(iterator.hasNext());
                Iterator<UnfilteredRowIterator> throttled = ThrottledUnfilteredIterator.throttle(iterator, batchSize);
                while (throttled.hasNext())
                {
                    UnfilteredRowIterator next = throttled.next();
                    ImmutableBTreePartition materializedPartition = ImmutableBTreePartition.create(next);
                    int unfilteredCount = Iterators.size(materializedPartition.unfilteredIterator());

                    System.out.println("batchsize " + batchSize + " unfilteredCount " + unfilteredCount + " materializedPartition " + materializedPartition);

                    if (throttled.hasNext())
                    {
                        if (unfilteredCount != batchSize)
                        {
                            //when there is extra unfiltered, it must be close bound marker
                            assertEquals(batchSize + 1, unfilteredCount);
                            Unfiltered last = Iterators.getLast(materializedPartition.unfilteredIterator());
                            assertTrue(last.isRangeTombstoneMarker());
                            RangeTombstoneMarker marker = (RangeTombstoneMarker) last;
                            assertFalse(marker.isBoundary());
                            assertTrue(marker.isClose(false));
                        }
                    }
                    else
                    {
                        //only last batch can be smaller than batchSize
                        assertTrue(unfilteredCount <= batchSize + 1);
                    }
                    unfilteredRowIterators.add(materializedPartition.unfilteredIterator());
                }
                assertFalse(iterator.hasNext());
            }

            // Verify throttled data after merge
            Partition partition = ImmutableBTreePartition.create(UnfilteredRowIterators.merge(unfilteredRowIterators));

            int nowInSec = FBUtilities.nowInSeconds();

            for (int i : live)
                assertTrue("Row " + i + " should be live", partition.getRow(Clustering.make(ByteBufferUtil.bytes((i)))).hasLiveData(nowInSec, cfs.metadata().enforceStrictLiveness()));
            for (int i : dead)
                assertFalse("Row " + i + " shouldn't be live", partition.getRow(Clustering.make(ByteBufferUtil.bytes((i)))).hasLiveData(nowInSec, cfs.metadata().enforceStrictLiveness()));
        }
    }

