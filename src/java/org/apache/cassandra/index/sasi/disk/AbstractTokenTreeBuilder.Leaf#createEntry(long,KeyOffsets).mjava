        protected LeafEntry createEntry(final long tok, final KeyOffsets offsets)
        {
            LongArrayList rawOffsets = new LongArrayList(offsets.size());

            offsets.forEach(new Consumer<LongObjectCursor<long[]>>()
            {
                public void accept(LongObjectCursor<long[]> cursor)
                {
                    for (long l : cursor.value)
                    {
                        rawOffsets.add(cursor.key);
                        rawOffsets.add(l);
                    }
                }
            });

            int offsetCount = rawOffsets.size();
            switch (offsetCount)
            {
                case 0:
                    throw new AssertionError("no offsets for token " + tok);
                case 2:
                    return new SimpleLeafEntry(tok, rawOffsets.get(0), rawOffsets.get(1));
                default:
                    assert offsetCount % 2 == 0;
                    if (offsetCount == 4)
                    {
                        if (rawOffsets.get(0) < Integer.MAX_VALUE && rawOffsets.get(1) < Integer.MAX_VALUE &&
                            rawOffsets.get(2) < Integer.MAX_VALUE && rawOffsets.get(3) < Integer.MAX_VALUE)
                        {
                            return new PackedCollisionLeafEntry(tok, (int)rawOffsets.get(0), (int) rawOffsets.get(1),
                                                                (int) rawOffsets.get(2), (int) rawOffsets.get(3));
                        }
                    }
                    return createOverflowEntry(tok, offsetCount, rawOffsets);
            }
        }

