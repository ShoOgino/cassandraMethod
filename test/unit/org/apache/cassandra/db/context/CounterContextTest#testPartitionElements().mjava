    @Test
    public void testPartitionElements()
    {
        byte[] context = new byte[stepLength * 10];

        cc.writeElementAtStepOffset(context, 0, FBUtilities.toByteArray(5), 1L, 1L);
        cc.writeElementAtStepOffset(context, 1, FBUtilities.toByteArray(3), 1L, 1L);
        cc.writeElementAtStepOffset(context, 2, FBUtilities.toByteArray(6), 1L, 1L);
        cc.writeElementAtStepOffset(context, 3, FBUtilities.toByteArray(7), 1L, 1L);
        cc.writeElementAtStepOffset(context, 4, FBUtilities.toByteArray(8), 1L, 1L);
        cc.writeElementAtStepOffset(context, 5, FBUtilities.toByteArray(9), 1L, 1L);
        cc.writeElementAtStepOffset(context, 6, FBUtilities.toByteArray(2), 1L, 1L);
        cc.writeElementAtStepOffset(context, 7, FBUtilities.toByteArray(4), 1L, 1L);
        cc.writeElementAtStepOffset(context, 8, FBUtilities.toByteArray(1), 1L, 1L);
        cc.writeElementAtStepOffset(context, 9, FBUtilities.toByteArray(3), 1L, 1L);

        cc.partitionElements(
            context,
            0, // left
            9, // right (inclusive)
            2  // pivot
            );

        assert 5 == FBUtilities.byteArrayToInt(context, 0*stepLength);
        assert 3 == FBUtilities.byteArrayToInt(context, 1*stepLength);
        assert 3 == FBUtilities.byteArrayToInt(context, 2*stepLength);
        assert 2 == FBUtilities.byteArrayToInt(context, 3*stepLength);
        assert 4 == FBUtilities.byteArrayToInt(context, 4*stepLength);
        assert 1 == FBUtilities.byteArrayToInt(context, 5*stepLength);
        assert 6 == FBUtilities.byteArrayToInt(context, 6*stepLength);
        assert 8 == FBUtilities.byteArrayToInt(context, 7*stepLength);
        assert 9 == FBUtilities.byteArrayToInt(context, 8*stepLength);
        assert 7 == FBUtilities.byteArrayToInt(context, 9*stepLength);
    }

