    /**
     * Transfer sections of the file to the given target channel
     * This method streams decompressed data so receiving party responsible for compression
     *
     * @param file The compressed file to transfer
     * @param target Channel to transfer data into
     *
     * @throws IOException on any I/O error.
     */
    public static void transfer(PendingFile file, WritableByteChannel target) throws IOException
    {
        RandomAccessReader compressedFile = CompressedRandomAccessReader.open(file.getFilename(), true);

        try
        {
            for (Pair<Long, Long> section : file.sections)
            {
                long length = section.right - section.left;

                compressedFile.seek(section.left);

                while (length > 0)
                {
                    int toRead = (length > FileStreamTask.CHUNK_SIZE) ? FileStreamTask.CHUNK_SIZE : (int) length;

                    ByteBuffer buffer = compressedFile.readBytes(toRead);

                    long bytesTransferred = 0;

                    while (bytesTransferred < toRead)
                    {
                        // we don't need to re-read a buffer, it will write starting from buffer.position()
                        long lastWrite = target.write(buffer);
                        bytesTransferred += lastWrite;
                        file.progress += lastWrite;
                    }

                    length -= bytesTransferred;

                    if (logger.isDebugEnabled())
                        logger.debug("Bytes transferred " + bytesTransferred + "/" + file.size);
                }
            }
        }
        finally
        {
            FileUtils.closeQuietly(compressedFile);
        }
    }

