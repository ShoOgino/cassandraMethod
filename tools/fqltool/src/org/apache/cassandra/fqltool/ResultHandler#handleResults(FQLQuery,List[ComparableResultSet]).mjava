    /**
     * Since we can't iterate a ResultSet more than once, and we don't want to keep the entire result set in memory
     * we feed the rows one-by-one to resultComparator and resultStore.
     *
     * results.get(x) should be the results from executing query against targetHosts.get(x)
     */
    public void handleResults(FQLQuery query, List<ComparableResultSet> results)
    {
        for (int i = 0; i < targetHosts.size(); i++)
        {
            if (results.get(i).wasFailed())
                logger.error("Query {} against {} failure: {}", query, targetHosts.get(i), results.get(i).getFailureException().getMessage());
        }

        List<ComparableColumnDefinitions> columnDefinitions = results.stream().map(ComparableResultSet::getColumnDefinitions).collect(Collectors.toList());
        resultComparator.compareColumnDefinitions(targetHosts, query, columnDefinitions);
        if (resultStore != null)
            resultStore.storeColumnDefinitions(query, columnDefinitions);
        List<Iterator<ComparableRow>> iters = results.stream().map(Iterable::iterator).collect(Collectors.toList());

        while (true)
        {
            List<ComparableRow> rows = rows(iters);
            resultComparator.compareRows(targetHosts, query, rows);
            if (resultStore != null)
                resultStore.storeRows(rows);
            // all rows being null marks end of all resultsets, we need to call compareRows
            // and storeRows once with everything null to mark that fact
            if (rows.stream().allMatch(Objects::isNull))
                return;
        }
    }

