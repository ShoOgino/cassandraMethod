    @Test
    public void testKeyCacheLoadWithLostTable() throws Exception
    {
        CompactionManager.instance.disableAutoCompaction();

        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY3);

        // empty the cache
        CacheService.instance.invalidateKeyCache();
        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY3);

        // insert data and force to disk
        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY3, 0, 100);
        store.forceBlockingFlush();

        Collection<SSTableReader> firstFlushTables = ImmutableList.copyOf(store.getLiveSSTables());

        // populate the cache
        readData(KEYSPACE1, COLUMN_FAMILY3, 0, 100);
        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY3);

        // insert some new data and force to disk
        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY3, 100, 50);
        store.forceBlockingFlush();

        // check that it's fine
        readData(KEYSPACE1, COLUMN_FAMILY3, 100, 50);
        assertKeyCacheSize(150, KEYSPACE1, COLUMN_FAMILY3);

        // force the cache to disk
        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();

        CacheService.instance.invalidateKeyCache();
        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY3);

        // check that the content is written correctly
        CacheService.instance.keyCache.loadSaved();
        assertKeyCacheSize(150, KEYSPACE1, COLUMN_FAMILY3);

        CacheService.instance.invalidateKeyCache();
        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY3);

        // now remove the first sstable from the store to simulate losing the file
        store.markObsolete(firstFlushTables, OperationType.UNKNOWN);

        // check that reading now correctly skips over lost table and reads the rest (CASSANDRA-10219)
        CacheService.instance.keyCache.loadSaved();
        assertKeyCacheSize(50, KEYSPACE1, COLUMN_FAMILY3);
    }

