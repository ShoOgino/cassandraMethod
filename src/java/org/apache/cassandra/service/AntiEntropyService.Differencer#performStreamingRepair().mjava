        /**
         * Sends our list of differences to the remote endpoint using the
         * Streaming API.
         */
        void performStreamingRepair() throws IOException
        {
            logger.info("Performing streaming repair of " + differences.size() + " ranges for " + request);
            ColumnFamilyStore cfstore = Table.open(request.cf.left).getColumnFamilyStore(request.cf.right);
            try
            {
                final List<Range> ranges = new ArrayList<Range>(differences);
                final Collection<SSTableReader> sstables = cfstore.getSSTables();
                // send ranges to the remote node
                Future f = StageManager.getStage(Stage.STREAM).submit(new WrappedRunnable()
                {
                    protected void runMayThrow() throws Exception
                    {
                        StreamContext context = new StreamContext(request.endpoint);
                        StreamOut.transferSSTables(context, request.cf.left, sstables, ranges);
                        StreamOutSession.remove(context);
                    }
                });
                // request ranges from the remote node
                // FIXME: no way to block for the 'requestRanges' call to complete, or to request a
                // particular cf: see CASSANDRA-1189
                StreamIn.requestRanges(request.endpoint, request.cf.left, ranges);
                
                // wait until streaming has completed
                f.get();
            }
            catch(Exception e)
            {
                throw new IOException("Streaming repair failed.", e);
            }
            logger.info("Finished streaming repair for " + request);
        }

