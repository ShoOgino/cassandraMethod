    /**
     * Used only by scrubber to solve problems with data written after the END_OF_ROW marker. Iterates atoms for the given dataSize only and does not accept an END_OF_ROW marker.
     */
    public static SSTableIdentityIterator createFragmentIterator(SSTableReader sstable, final RandomAccessReader file, DecoratedKey key, long dataSize, boolean checkData)
    {
        final ColumnSerializer.Flag flag = ColumnSerializer.Flag.LOCAL;
        final CellNameType type = sstable.metadata.comparator;
        final int expireBefore = (int) (System.currentTimeMillis() / 1000);
        final Version version = sstable.descriptor.version;
        final long dataEnd = file.getFilePointer() + dataSize;
        return new SSTableIdentityIterator(sstable.metadata, file, file.getPath(), key, dataSize, checkData, sstable, flag, DeletionTime.LIVE,
                                           new AbstractIterator<OnDiskAtom>()
                                                   {
                                                       protected OnDiskAtom computeNext()
                                                       {
                                                           if (file.getFilePointer() >= dataEnd)
                                                               return endOfData();
                                                           try
                                                           {
                                                               return type.onDiskAtomSerializer().deserializeFromSSTable(file, flag, expireBefore, version);
                                                           }
                                                           catch (IOException e)
                                                           {
                                                               throw new IOError(e);
                                                           }
                                                       }
                                                   });
    }

