    @Test(expected = IllegalStateException.class)
    public void testNotEnoughEndpointsForTrivialRange() throws UnknownHostException
    {
        EndpointsByRange.Builder rangesWithSources = new EndpointsByRange.Builder();
        // add non-trivial ranges
        addNonTrivialRangeAndSources(rangesWithSources, 1, 10, "127.0.0.3", "127.0.0.51");
        addNonTrivialRangeAndSources(rangesWithSources, 11, 20, "127.0.0.3", "127.0.0.55");
        addNonTrivialRangeAndSources(rangesWithSources, 21, 30, "127.0.0.2", "127.0.0.59");
        // and a trivial one:
        addTrivialRangeAndSources(rangesWithSources, 1, 10, "127.0.0.3");

        RangeStreamer.SourceFilter filter = new RangeStreamer.SourceFilter()
        {
            public boolean apply(Replica replica)
            {
                try
                {
                    if (replica.endpoint().equals(InetAddressAndPort.getByName("127.0.0.3")))
                        return false;
                }
                catch (UnknownHostException e)
                {
                    throw new RuntimeException(e);
                }
                return true;
            }

            public String message(Replica replica)
            {
                return "Not 127.0.0.3";
            }
        };
        RangeFetchMapCalculator calculator = new RangeFetchMapCalculator(rangesWithSources.build(), Collections.singleton(filter), "Test");
        Multimap<InetAddressAndPort, Range<Token>> optMap = calculator.getRangeFetchMapForNonTrivialRanges();
        Multimap<InetAddressAndPort, Range<Token>> trivialMap = calculator.getRangeFetchMapForTrivialRanges(optMap);

    }

