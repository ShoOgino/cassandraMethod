        public void serialize(CommitLogHeader clHeader, DataOutputStream dos) throws IOException
        {
            assert clHeader.lastFlushedAt.size() <= clHeader.cfCount;
            Checksum checksum = new CRC32();

            // write the first checksum after the fixed-size part, so we won't OOM allocating a bogus cfmap buffer
            dos.writeInt(clHeader.cfCount); // 4
            dos.writeInt(clHeader.serializedCfMap.length); // 4
            dos.writeInt(clHeader.lastFlushedAt.size()); // 4
            checksum.update(clHeader.cfCount);
            checksum.update(clHeader.serializedCfMap.length);
            checksum.update(clHeader.lastFlushedAt.size());
            dos.writeLong(checksum.getValue());

            // write the 2nd checksum after the cfmap and lastflushedat map
            dos.write(clHeader.serializedCfMap); // colMap.length
            checksum.update(clHeader.serializedCfMap, 0, clHeader.serializedCfMap.length);
            for (Map.Entry<Integer, Integer> entry : clHeader.lastFlushedAt.entrySet())
            {
                dos.writeInt(entry.getKey()); // 4
                checksum.update(entry.getKey());
                dos.writeInt(entry.getValue()); // 4
                checksum.update(entry.getValue());
            }
            dos.writeLong(checksum.getValue());

            // keep the size constant by padding for missing flushed-at entries.  these do not affect checksum.
            for (int i = clHeader.lastFlushedAt.entrySet().size(); i < clHeader.cfCount; i++)
            {
                dos.writeInt(0);
                dos.writeInt(0);
            }
        }

