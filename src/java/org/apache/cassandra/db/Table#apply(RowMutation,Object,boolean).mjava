    /**
     * This method adds the row to the Commit Log associated with this table.
     * Once this happens the data associated with the individual column families
     * is also written to the column family store's memtable.
    */
    public void apply(RowMutation mutation, Object serializedMutation, boolean writeCommitLog) throws IOException
    {
        HashMap<ColumnFamilyStore,Memtable> memtablesToFlush = new HashMap<ColumnFamilyStore, Memtable>(2);

        // write the mutation to the commitlog and memtables
        flusherLock.readLock().lock();
        try
        {
            if (writeCommitLog)
                CommitLog.instance().add(mutation, serializedMutation);
        
            DecoratedKey key = StorageService.getPartitioner().decorateKey(mutation.key());
            for (ColumnFamily cf : mutation.getColumnFamilies())
            {
                ColumnFamilyStore cfs = columnFamilyStores.get(cf.id());
                if (cfs == null)
                {
                    logger.error("Attempting to mutate non-existant column family " + cf.id());
                    continue;
                }

                SortedSet<byte[]> mutatedIndexedColumns = null;
                for (byte[] column : cfs.getIndexedColumns())
                {
                    if (cf.getColumnNames().contains(column))
                    {
                        if (mutatedIndexedColumns == null)
                            mutatedIndexedColumns = new TreeSet<byte[]>(FBUtilities.byteArrayComparator);
                        mutatedIndexedColumns.add(column);
                    }
                }

                if (mutatedIndexedColumns == null)
                {
                    // just update the actual value, no extra synchronization
                    applyCF(cfs, key, cf, memtablesToFlush);
                }
                else
                {
                    synchronized (indexLockFor(mutation.key()))
                    {
                        ColumnFamily oldIndexedColumns = readCurrentIndexedColumns(key, cfs, mutatedIndexedColumns);
                        ignoreObsoleteMutations(cf, cfs.metadata.reconciler, mutatedIndexedColumns, oldIndexedColumns);

                        applyCF(cfs, key, cf, memtablesToFlush);
                        applyIndexUpdates(mutation.key(), memtablesToFlush, cf, cfs, mutatedIndexedColumns, oldIndexedColumns);
                    }
                }

                ColumnFamily cachedRow = cfs.getRawCachedRow(key);
                if (cachedRow != null)
                    cachedRow.addAll(cf);
            }
        }
        finally
        {
            flusherLock.readLock().unlock();
        }

        // flush memtables that got filled up.  usually mTF will be empty and this will be a no-op
        for (Map.Entry<ColumnFamilyStore, Memtable> entry : memtablesToFlush.entrySet())
            entry.getKey().maybeSwitchMemtable(entry.getValue(), writeCommitLog, null);
    }

