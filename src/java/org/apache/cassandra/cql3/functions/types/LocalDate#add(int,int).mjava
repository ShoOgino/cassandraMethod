    /**
     * Return a new {@link LocalDate} with the specified (signed) amount of time added to (or
     * subtracted from) the given {@link Calendar} field, based on the calendar's rules.
     *
     * <p>Note that adding any amount to a field smaller than {@link Calendar#DAY_OF_MONTH} will
     * remain without effect, as this class does not keep time components.
     *
     * <p>See {@link Calendar} javadocs for more information.
     *
     * @param field  a {@link Calendar} field to modify.
     * @param amount the amount of date or time to be added to the field.
     * @return a new {@link LocalDate} with the specified (signed) amount of time added to (or
     * subtracted from) the given {@link Calendar} field.
     * @throws IllegalArgumentException if the new date is not in the range [-5877641-06-23;
     *                                  5881580-07-11].
     */
    public LocalDate add(int field, int amount)
    {
        GregorianCalendar newCalendar = isoCalendar();
        newCalendar.setTimeInMillis(millisSinceEpoch);
        newCalendar.add(field, amount);
        LocalDate newDate = fromMillisSinceEpoch(newCalendar.getTimeInMillis());
        newDate.calendar = newCalendar;
        return newDate;
    }

