    /**
     * Connect to peer and start exchanging message.
     * When connect attempt fails, this retries for maximum of MAX_CONNECT_ATTEMPTS times.
     *
     * @throws IOException when connection failed.
     */
    public void connect() throws IOException
    {
        int attempts = 0;
        while (true)
        {
            try
            {
                socket = MessagingService.instance().getConnectionPool(session.peer).newSocket();
                socket.setSoTimeout(DatabaseDescriptor.getStreamingSocketTimeout());
                break;
            }
            catch (IOException e)
            {
                if (++attempts >= MAX_CONNECT_ATTEMPTS)
                    throw e;

                long waitms = DatabaseDescriptor.getRpcTimeout() * (long)Math.pow(2, attempts);
                logger.warn("Failed attempt " + attempts + " to connect to " + session.peer + ". Retrying in " + waitms + " ms. (" + e + ")");
                try
                {
                    Thread.sleep(waitms);
                }
                catch (InterruptedException wtf)
                {
                    throw new IOException("interrupted", wtf);
                }
            }
        }
        // send stream init message
        SocketChannel channel = socket.getChannel();
        WritableByteChannel out = channel;
        // socket channel is null when encrypted(SSL)
        if (channel == null)
        {
            out = Channels.newChannel(socket.getOutputStream());
        }
        logger.debug("Sending stream init...");
        StreamInitMessage message = new StreamInitMessage(session.planId(), session.description());
        out.write(message.createMessage(false, protocolVersion));

        connected = true;

        start();
        session.onConnect();
    }

