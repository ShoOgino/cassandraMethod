    /**
     * returns map of {ultimate target: destination}, where if destination is not the same
     * as the ultimate target, it is a "hinted" node, a node that will deliver the data to
     * the ultimate target when it becomes alive again.
     *
     * A destination node may be the destination for multiple targets.
     */
    private Map<InetAddress, InetAddress> getHintedMapForEndpoints(String table, Collection<InetAddress> targets)
    {
        Set<InetAddress> usedEndpoints = new HashSet<InetAddress>();
        Map<InetAddress, InetAddress> map = new HashMap<InetAddress, InetAddress>();

        IEndPointSnitch endPointSnitch = DatabaseDescriptor.getEndPointSnitch(table);
        Set<InetAddress> liveNodes = Gossiper.instance.getLiveMembers();

        for (InetAddress ep : targets)
        {
            if (FailureDetector.instance.isAlive(ep))
            {
                map.put(ep, ep);
                usedEndpoints.add(ep);
            }
            else
            {
                // Ignore targets that have died when bootstrapping
                if (!tokenMetadata_.isMember(ep))
                    continue;

                // find another endpoint to store a hint on.  prefer endpoints that aren't already in use
                InetAddress hintLocation = null;
                List<InetAddress> preferred = endPointSnitch.getSortedListByProximity(ep, liveNodes);

                for (InetAddress hintCandidate : preferred)
                {
                    if (!targets.contains(hintCandidate)
                        && !usedEndpoints.contains(hintCandidate)
                        && tokenMetadata_.isMember(hintCandidate))
                    {
                        hintLocation = hintCandidate;
                        break;
                    }
                }
                // if all endpoints are already in use, might as well store it locally to save the network trip
                if (hintLocation == null)
                    hintLocation = FBUtilities.getLocalAddress();

                map.put(ep, hintLocation);
                usedEndpoints.add(hintLocation);
            }
        }

        assert map.size() == targets.size();
        return map;
    }

