    public List<IMutation> getMutations(ClientState clientState, List<ByteBuffer> variables)
    throws InvalidRequestException
    {

        Map<Pair<String, ByteBuffer>, RowAndCounterMutation> mutations = new HashMap<Pair<String, ByteBuffer>, RowAndCounterMutation>();
        for (ModificationStatement statement : statements)
        {
            if (isSetTimestamp())
                statement.timestamp = timestamp;

            List<IMutation> lm = statement.getMutations(clientState, variables);
            // Group mutation together, otherwise they won't get applied atomically
            for (IMutation m : lm)
            {
                Pair<String, ByteBuffer> key = Pair.create(m.getTable(), m.key());
                RowAndCounterMutation racm = mutations.get(key);
                if (racm == null)
                {
                    racm = new RowAndCounterMutation();
                    mutations.put(key, racm);
                }

                if (m instanceof CounterMutation)
                {
                    if (racm.cm == null)
                        racm.cm = (CounterMutation)m;
                    else
                        racm.cm.addAll(m);
                }
                else
                {
                    assert m instanceof RowMutation;
                    if (racm.rm == null)
                        racm.rm = (RowMutation)m;
                    else
                        racm.rm.addAll(m);
                }
            }
        }

        List<IMutation> batch = new LinkedList<IMutation>();
        for (RowAndCounterMutation racm : mutations.values())
        {
            if (racm.rm != null)
                batch.add(racm.rm);
            if (racm.cm != null)
                batch.add(racm.cm);
        }
        return batch;
    }

