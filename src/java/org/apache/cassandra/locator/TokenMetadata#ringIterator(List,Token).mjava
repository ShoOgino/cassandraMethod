    /**
     * iterator over the Tokens in the given ring, starting with the token for the node owning start
     * (which does not have to be a Token in the ring)
     */
    public static Iterator<Token> ringIterator(final List ring, Token start)
    {
        assert ring.size() > 0;
        int i = Collections.binarySearch(ring, start);
        if (i < 0)
        {
            i = (i + 1) * (-1);
            if (i >= ring.size())
            {
                i = 0;
            }
        }
        final int startIndex = i;
        return new AbstractIterator<Token>()
        {
            int j = startIndex;
            protected Token computeNext()
            {
                if (j < 0)
                    return endOfData();
                try
                {
                    return (Token) ring.get(j);
                }
                finally
                {
                    j = (j + 1) % ring.size();
                    if (j == startIndex)
                        j = -1;
                }
            }
        };
    }

