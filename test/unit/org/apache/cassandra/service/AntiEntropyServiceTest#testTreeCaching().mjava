    /**
     * Build a column family with 2 or more SSTables, and then force a major compaction
     */
    @Test
    public void testTreeCaching() throws Throwable
    {
        // populate column family
        List<RowMutation> rms = new LinkedList<RowMutation>();
        RowMutation rm = new RowMutation(tablename, "key");
        rm.add(new QueryPath(cfname, null, "Column1".getBytes()), "asdf".getBytes(), 0);
        rms.add(rm);
        // with two SSTables
        ColumnFamilyStoreUtils.writeColumnFamily(rms);
        ColumnFamilyStore store = ColumnFamilyStoreUtils.writeColumnFamily(rms);
        
        // force a major compaction, and wait for it to finish
        MerkleTree old = aes.getCachedTree(tablename, cfname, LOCAL);
        CompactionManager.instance().submitMajor(store, 0).get(5000, TimeUnit.MILLISECONDS);

        // check that a tree was created and cached
        flushAES().get(5000, TimeUnit.MILLISECONDS);
        assert old != aes.getCachedTree(tablename, cfname, LOCAL);
    }

