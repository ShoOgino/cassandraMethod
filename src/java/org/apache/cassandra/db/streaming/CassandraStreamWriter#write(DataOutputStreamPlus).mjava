    /**
     * Stream file of specified sections to given channel.
     *
     * CassandraStreamWriter uses LZF compression on wire to decrease size to transfer.
     *
     * @param output where this writes data to
     * @throws IOException on any I/O error
     */
    public void write(DataOutputStreamPlus output) throws IOException
    {
        long totalSize = totalSize();
        logger.debug("[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}", session.planId(),
                     sstable.getFilename(), session.peer, sstable.getSSTableMetadata().repairedAt, totalSize);

        AsyncStreamingOutputPlus out = (AsyncStreamingOutputPlus) output;
        try(ChannelProxy proxy = sstable.getDataChannel().newChannel();
            ChecksumValidator validator = new File(sstable.descriptor.filenameFor(Component.CRC)).exists()
                                          ? DataIntegrityMetadata.checksumValidator(sstable.descriptor)
                                          : null)
        {
            int bufferSize = validator == null ? DEFAULT_CHUNK_SIZE: validator.chunkSize;

            // setting up data compression stream
            long progress = 0L;

            // stream each of the required sections of the file
            for (SSTableReader.PartitionPositionBounds section : sections)
            {
                long start = validator == null ? section.lowerPosition : validator.chunkStart(section.lowerPosition);
                // if the transfer does not start on the valididator's chunk boundary, this is the number of bytes to offset by
                int transferOffset = (int) (section.lowerPosition - start);
                if (validator != null)
                    validator.seek(start);

                // length of the section to read
                long length = section.upperPosition - start;
                // tracks write progress
                long bytesRead = 0;
                while (bytesRead < length)
                {
                    int toTransfer = (int) Math.min(bufferSize, length - bytesRead);
                    long lastBytesRead = write(proxy, validator, out, start, transferOffset, toTransfer, bufferSize);
                    start += lastBytesRead;
                    bytesRead += lastBytesRead;
                    progress += (lastBytesRead - transferOffset);
                    session.progress(sstable.descriptor.filenameFor(Component.DATA), ProgressInfo.Direction.OUT, progress, totalSize);
                    transferOffset = 0;
                }

                // make sure that current section is sent
                out.flush();
            }
            logger.debug("[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}",
                         session.planId(), sstable.getFilename(), session.peer, FBUtilities.prettyPrintMemory(progress), FBUtilities.prettyPrintMemory(totalSize));
        }
    }

