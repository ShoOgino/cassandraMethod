    /*
      TODO only the end_ part of the returned Coordinate is ever used.  Apparently this code works, but it's definitely due for some cleanup
      since the code fooling about with start_ appears to be irrelevant.
     */
    public static Coordinate getCoordinates(String decoratedKey, IFileReader dataReader, IPartitioner partitioner) throws IOException
    {
        List<KeyPositionInfo> indexInfo = indexMetadataMap_.get(dataReader.getFileName());
        assert indexInfo != null && indexInfo.size() > 0;
        long start = 0L;
        long end;
        int index = Collections.binarySearch(indexInfo, new KeyPositionInfo(decoratedKey, -1, partitioner));
        if (index < 0)
        {
            /*
             * We are here which means that the requested
             * key is not an index.
            */
            index = (++index) * (-1);
            /*
             * This means key is not present at all. Hence
             * a scan is in order.
            */
            start = (index == 0) ? 0 : indexInfo.get(index - 1).position;
            if (index < indexInfo.size())
            {
                end = indexInfo.get(index).position;
            }
            else
            {
                /* This is the Block Index in the file. */
                end = start;
            }
        }
        else
        {
            /*
             * If we are here that means the key is in the index file
             * and we can retrieve it w/o a scan. In reality we would
             * like to have a retreive(key, fromPosition) but for now
             * we use scan(start, start + 1) - a hack.
            */
            start = indexInfo.get(index).position;
            end = start;
        }
        return new Coordinate(start, end);
    }

