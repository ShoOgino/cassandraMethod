    @Test
    public void testTwoCells() throws WriteTimeoutException
    {
        ColumnFamilyStore cfs = Keyspace.open(KS).getColumnFamilyStore(CF1);
        cfs.truncateBlocking();

        // Do the initial update (+1, -1)
        ColumnFamily cells = ArrayBackedSortedColumns.factory.create(cfs.metadata);
        cells.addCounter(cellname(1), 1L);
        cells.addCounter(cellname(2), -1L);
        new CounterMutation(new Mutation(KS, bytes(1), cells), ConsistencyLevel.ONE).apply();
        ColumnFamily current = cfs.getColumnFamily(QueryFilter.getIdentityFilter(dk(bytes(1)), CF1, System.currentTimeMillis()));
        assertEquals(1L, CounterContext.instance().total(current.getColumn(cellname(1)).value()));
        assertEquals(-1L, CounterContext.instance().total(current.getColumn(cellname(2)).value()));

        // Make another increment (+2, -2)
        cells = ArrayBackedSortedColumns.factory.create(cfs.metadata);
        cells.addCounter(cellname(1), 2L);
        cells.addCounter(cellname(2), -2L);
        new CounterMutation(new Mutation(KS, bytes(1), cells), ConsistencyLevel.ONE).apply();
        current = cfs.getColumnFamily(QueryFilter.getIdentityFilter(dk(bytes(1)), CF1, System.currentTimeMillis()));
        assertEquals(3L, CounterContext.instance().total(current.getColumn(cellname(1)).value()));

        // Decrement to 0 (-3, +3)
        cells = ArrayBackedSortedColumns.factory.create(cfs.metadata);
        cells.addCounter(cellname(1), -3L);
        cells.addCounter(cellname(2), 3L);
        new CounterMutation(new Mutation(KS, bytes(1), cells), ConsistencyLevel.ONE).apply();
        current = cfs.getColumnFamily(QueryFilter.getIdentityFilter(dk(bytes(1)), CF1, System.currentTimeMillis()));
        assertEquals(0L, CounterContext.instance().total(current.getColumn(cellname(1)).value()));
        assertEquals(0L, CounterContext.instance().total(current.getColumn(cellname(2)).value()));

        // Check the caches, separately
        assertEquals(ClockAndCount.create(3L, 0L), cfs.getCachedCounter(bytes(1), cellname(1)));
        assertEquals(ClockAndCount.create(3L, 0L), cfs.getCachedCounter(bytes(1), cellname(2)));
    }

