    @Test
    public void testSubscribeByType()
    {
        DiagnosticEventService instance = DiagnosticEventService.instance();
        assertFalse(instance.hasSubscribers(TestEvent1.class));
        assertFalse(instance.hasSubscribers(TestEvent2.class));
        Consumer<TestEvent1> consumer1 = (event) ->
        {
        };
        Consumer<TestEvent1> consumer2 = (event) ->
        {
        };
        Consumer<TestEvent1> consumer3 = (event) ->
        {
        };

        assertFalse(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST1));
        instance.subscribe(TestEvent1.class, TestEventType.TEST1, consumer1);
        assertTrue(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST1));
        assertFalse(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST2));

        instance.subscribe(TestEvent1.class, TestEventType.TEST2, consumer2);
        instance.subscribe(TestEvent1.class, TestEventType.TEST2, consumer2);
        instance.subscribe(TestEvent1.class, TestEventType.TEST2, consumer2);
        assertTrue(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST2));

        assertFalse(instance.hasSubscribers(TestEvent2.class));

        instance.subscribe(TestEvent1.class, consumer3);
        assertTrue(instance.hasSubscribers(TestEvent1.class));
        assertTrue(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST1));
        assertTrue(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST2));
        assertTrue(instance.hasSubscribers(TestEvent1.class, TestEventType.TEST3));

        instance.unsubscribe(consumer1);
        assertTrue(instance.hasSubscribers(TestEvent1.class));
        assertFalse(instance.hasSubscribers(TestEvent2.class));
        instance.unsubscribe(consumer2);
        instance.unsubscribe(consumer3);
        assertFalse(instance.hasSubscribers(TestEvent1.class));
        assertFalse(instance.hasSubscribers(TestEvent2.class));
    }

