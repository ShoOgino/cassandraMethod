        protected void runMayThrow() throws Exception
        {
            boolean completed = false;
            boolean obsoleteSSTables = isTransient && repairedAt > 0;
            try
            {
                if (obsoleteSSTables)
                {
                    logger.info("Obsoleting transient repaired ssatbles");
                    Preconditions.checkState(Iterables.all(transaction.originals(), SSTableReader::isTransient));
                    transaction.obsoleteOriginals();
                }
                else
                {
                    logger.debug("Setting repairedAt to {} on {} for {}", repairedAt, transaction.originals(), sessionID);
                    cfs.getCompactionStrategyManager().mutateRepaired(transaction.originals(), repairedAt, ActiveRepairService.NO_PENDING_REPAIR, false);
                }
                completed = true;
            }
            finally
            {
                if (obsoleteSSTables)
                {
                    transaction.finish();
                }
                else
                {
                    // we abort here because mutating metadata isn't guarded by LifecycleTransaction, so this won't roll
                    // anything back. Also, we don't want to obsolete the originals. We're only using it to prevent other
                    // compactions from marking these sstables compacting, and unmarking them when we're done
                    transaction.abort();
                }
                if (completed)
                {
                    removeSession(sessionID);
                }
            }
        }

