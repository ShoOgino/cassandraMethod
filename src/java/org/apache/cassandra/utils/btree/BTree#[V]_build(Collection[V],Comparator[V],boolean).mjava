    /**
     * Creates a BTree containing all of the objects in the provided collection
     *
     * @param source     the items to build the tree with
     * @param comparator the comparator that defines the ordering over the items in the tree
     * @param sorted     if false, the collection will be copied and sorted to facilitate construction
     * @param <V>
     * @return
     */
    public static <V> Object[] build(Collection<V> source, Comparator<V> comparator, boolean sorted)
    {
        int size = source.size();

        if (size < FAN_FACTOR)
        {
            // pad to even length to match contract that all leaf nodes are even
            V[] values = source.toArray((V[]) new Object[size + (size & 1)]);
            // inline sorting since we're already calling toArray
            if (!sorted)
                Arrays.sort(values, 0, size, comparator);
            return values;
        }

        if (!sorted)
            source = sorted(source, comparator, size);

        return modifier.get().build(source, size);
    }

