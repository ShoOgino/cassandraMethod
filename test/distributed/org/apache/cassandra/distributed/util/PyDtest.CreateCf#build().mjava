        public String build()
        {
            if (keyspace == null)
                throw new IllegalArgumentException();
            if (name == null)
                throw new IllegalArgumentException();
            if (keyType == null)
                keyType = "varchar";
            if (validation == null)
                validation = "UTF8Type";
            if (compactionStrategy == null)
                compactionStrategy = "SizeTieredCompactionStrategy";
            if (compactStorage == null)
                compactStorage = false;


            String compaction_fragment = String.format("compaction = {'class': '%s', 'enabled': 'true'}", compactionStrategy);

            String query;
            String additional_columns = "";
            if (columns == null)
            {
                query = String.format("CREATE COLUMNFAMILY %s.%s (key %s, c varchar, v varchar, PRIMARY KEY(key, c)) WITH comment=\'test cf\'", keyspace, name, keyType);
            }
            else
            {
                for (String pair : columns)
                {
                    String[] split = pair.split(":");
                    String key = split[0];
                    String type = split[1];
                    additional_columns += ", " + key + " " + type;
                }

                if (primaryKey != null)
                    query = String.format("CREATE COLUMNFAMILY %s.%s (key %s%s, PRIMARY KEY(%s)) WITH comment=\'test cf\'", keyspace, name, keyType, additional_columns, primaryKey);
                else
                    query = String.format("CREATE COLUMNFAMILY %s.%s (key %s PRIMARY KEY%s) WITH comment=\'test cf\'", keyspace, name, keyType, additional_columns);
            }


            if (compaction_fragment != null)
                query += " AND " + compaction_fragment;

            if (clustering != null)
                query += String.format(" AND CLUSTERING ORDER BY (%s)", clustering);

            if (compression != null)
                query += String.format(" AND compression = { \'sstable_compression\': \'%sCompressor\' }", compression);
            else
                query += " AND compression = {}";

            if (readRepair != null)
                query += String.format(" AND read_repair_chance=%f AND dclocal_read_repair_chance=%f", readRepair, readRepair);
            if (gcGrace != null)
                query += String.format(" AND gc_grace_seconds=%d", gcGrace);
            if (speculativeRetry != null)
                query += String.format(" AND speculative_retry=\'%s\'", speculativeRetry);

            if (compactStorage != null && compactStorage)
                query += " AND COMPACT STORAGE";

            return query;
        }

