    public Map<String, Serializable> toMap()
    {
        HashMap<String, Serializable> ret = new HashMap<>();

        ret.put("keyspace", keyspace.getName());
        ret.put("table", tableName);
        ret.put("command", cqlCommand);
        ret.put("consistency", consistency.name());
        ret.put("speculativeRetry", speculativeRetry.name());

        Set<String> eps = destinations.stream().map(InetAddressAndPort::toString).collect(Collectors.toSet());
        ret.put("endpointDestinations", new HashSet<>(eps));

        if (digestsByEndpoint != null)
        {
            HashMap<String, Serializable> digestsMap = new HashMap<>();
            for (DigestResolverDebugResult digestsByEndpoint : digestsByEndpoint)
            {
                HashMap<String, Serializable> digests = new HashMap<>();
                digests.put("digestHex", digestsByEndpoint.digestHex);
                digests.put("isDigestResponse", digestsByEndpoint.isDigestResponse);
                digestsMap.put(digestsByEndpoint.from.toString(), digests);
            }
            ret.put("digestsByEndpoint", digestsMap);
        }
        if (allEndpoints != null)
        {
            eps = allEndpoints.stream().map(InetAddressAndPort::toString).collect(Collectors.toSet());
            ret.put("allEndpoints", new HashSet<>(eps));
        }
        return ret;
    }

