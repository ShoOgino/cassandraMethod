    /**
     * For an update on a counter table, returns a list containing a {@code CounterMark} for
     * every counter contained in the update.
     *
     * @return a list with counter marks for every counter in this update.
     */
    public List<CounterMark> collectCounterMarks()
    {
        assert metadata().isCounter();

        InternalReusableClustering clustering = new InternalReusableClustering();
        List<CounterMark> l = new ArrayList<>();
        int i = 0;
        for (Row row : this)
        {
            for (Cell cell : row)
                if (cell.isCounterCell())
                    l.add(new CounterMark(clustering, i, cell.column(), cell.path()));
            i++;
        }
        return l;
    }

