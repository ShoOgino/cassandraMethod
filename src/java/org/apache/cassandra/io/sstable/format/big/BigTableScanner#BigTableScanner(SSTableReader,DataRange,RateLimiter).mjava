    /**
     * @param sstable SSTable to scan; must not be null
     * @param dataRange a single range to scan; must not be null
     * @param limiter background i/o RateLimiter; may be null
     */
    private BigTableScanner(SSTableReader sstable, DataRange dataRange, RateLimiter limiter)
    {
        assert sstable != null;

        this.dfile = limiter == null ? sstable.openDataReader() : sstable.openDataReader(limiter);
        this.ifile = sstable.openIndexReader();
        this.sstable = sstable;
        this.dataRange = dataRange;
        this.rowIndexEntrySerializer = sstable.descriptor.version.getSSTableFormat().getIndexSerializer(sstable.metadata);

        List<AbstractBounds<RowPosition>> boundsList = new ArrayList<>(2);
        // we enforce the first/last keys of the sstablereader
        if (dataRange.isWrapAround())
        {
            if (dataRange.stopKey().isMinimum()
                || dataRange.stopKey().compareTo(sstable.last) >= 0
                || dataRange.startKey().compareTo(sstable.first) <= 0)
            {
                boundsList.add(new Bounds<RowPosition>(sstable.first, sstable.last));
            }
            else
            {
                if (dataRange.startKey().compareTo(sstable.last) <= 0)
                    boundsList.add(new Bounds<>(dataRange.startKey(), sstable.last));
                if (dataRange.stopKey().compareTo(sstable.first) >= 0)
                    boundsList.add(new Bounds<>(sstable.first, dataRange.stopKey()));
            }
        }
        else
        {
            assert dataRange.startKey().compareTo(dataRange.stopKey()) <= 0 || dataRange.stopKey().isMinimum();
            RowPosition left = Ordering.natural().max(dataRange.startKey(), sstable.first);
            // apparently isWrapAround() doesn't count Bounds that extend to the limit (min) as wrapping
            RowPosition right = dataRange.stopKey().isMinimum() ? sstable.last : Ordering.natural().min(dataRange.stopKey(), sstable.last);
            if (left.compareTo(right) <= 0)
                boundsList.add(new Bounds<>(left, right));
        }
        this.rangeIterator = boundsList.iterator();
    }

