    public IndexSummaryBuilder(long expectedKeys, int indexInterval, int samplingLevel)
    {
        this.indexInterval = indexInterval;
        this.samplingLevel = samplingLevel;
        this.startPoints = Downsampling.getStartPoints(BASE_SAMPLING_LEVEL, samplingLevel);

        long expectedEntries = expectedKeys / indexInterval;
        if (expectedEntries > Integer.MAX_VALUE)
        {
            // that's a _lot_ of keys, and a very low interval
            int effectiveInterval = (int) Math.ceil((double) Integer.MAX_VALUE / expectedKeys);
            expectedEntries = expectedKeys / effectiveInterval;
            assert expectedEntries <= Integer.MAX_VALUE : expectedEntries;
            logger.warn("Index interval of {} is too low for {} expected keys; using interval of {} instead",
                        indexInterval, expectedKeys, effectiveInterval);
        }

        // adjust our estimates based on the sampling level
        expectedEntries = (expectedEntries * samplingLevel) / BASE_SAMPLING_LEVEL;

        positions = new ArrayList<>((int)expectedEntries);
        keys = new ArrayList<>((int)expectedEntries);
    }

