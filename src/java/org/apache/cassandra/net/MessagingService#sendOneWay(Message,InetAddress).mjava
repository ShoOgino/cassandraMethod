    /**
     * Send a message to a given endpoint. This method adheres to the fire and forget
     * style messaging.
     * @param message messages to be sent.
     * @param to endpoint to which the message needs to be sent
     */
    public void sendOneWay(Message message, InetAddress to)
    {
        // do local deliveries
        if ( message.getFrom().equals(to) )
        {
            MessagingService.receive(message);
            return;
        }

        Message processedMessage = SinkManager.processClientMessageSink(message);
        if (processedMessage == null)
        {
            return;
        }

        byte[] data;
        try
        {
            DataOutputBuffer buffer = new DataOutputBuffer();
            Message.serializer().serialize(message, buffer);
            data = buffer.getData();
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        assert data.length > 0;
        ByteBuffer buffer = MessagingService.packIt(data , false, false);

        TcpConnection connection = null;
        try
        {
            connection = MessagingService.getConnection(processedMessage.getFrom(), to, message);
            connection.write(buffer);
        }
        catch (IOException e)
        {
            if (connection != null)
            {
                connection.errorClose();
            }
            logger_.error("unexpected error writing " + message, e);
        }
    }

