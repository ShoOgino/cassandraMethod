    /**
     * Sends a "connection warmup" message to each peer in the collection, on every {@link OutboundConnectionIdentifier.ConnectionType}
     * used for internode messaging.
     */
    private AtomicInteger sendPingMessages(Set<InetAddressAndPort> peers)
    {
        AtomicInteger connectedCount = new AtomicInteger(0);
        IAsyncCallback responseHandler = new IAsyncCallback()
        {
            @Override
            public boolean isLatencyForSnitch()
            {
                return false;
            }

            @Override
            public void response(MessageIn msg)
            {
                connectedCount.incrementAndGet();
            }
        };

        MessageOut<PingMessage> smallChannelMessageOut = new MessageOut<>(PING, PingMessage.smallChannelMessage, PingMessage.serializer);
        MessageOut<PingMessage> largeChannelMessageOut = new MessageOut<>(PING, PingMessage.largeChannelMessage, PingMessage.serializer);
        for (InetAddressAndPort peer : peers)
        {
            MessagingService.instance().sendRR(smallChannelMessageOut, peer, responseHandler);
            MessagingService.instance().sendRR(largeChannelMessageOut, peer, responseHandler);
        }

        return connectedCount;
    }

