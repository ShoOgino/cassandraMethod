    /**
     * absoluteFilePaths contains full file parts up to the component name
     *
     * this method finds all files on disk beginning with any of the paths in absoluteFilePaths
     * @return a map from absoluteFilePath to actual file on disk.
     */
    public static Map<String, List<File>> getExistingFiles(Set<String> absoluteFilePaths)
    {
        Set<File> uniqueDirectories = absoluteFilePaths.stream().map(path -> Paths.get(path).getParent().toFile()).collect(Collectors.toSet());
        Map<String, List<File>> fileMap = new HashMap<>();
        FilenameFilter ff = (dir, name) -> {
            Descriptor descriptor = null;
            try
            {
                descriptor = Descriptor.fromFilename(new File(dir, name));
            }
            catch (Throwable t)
            {// ignored - if we can't parse the filename, just skip the file
            }

            String absolutePath = descriptor != null ? absolutePath(descriptor.baseFilename()) : null;
            if (absolutePath != null && absoluteFilePaths.contains(absolutePath))
                fileMap.computeIfAbsent(absolutePath, k -> new ArrayList<>()).add(new File(dir, name));

            return false;
        };

        // populate the file map:
        for (File f : uniqueDirectories)
            f.listFiles(ff);

        return fileMap;
    }

