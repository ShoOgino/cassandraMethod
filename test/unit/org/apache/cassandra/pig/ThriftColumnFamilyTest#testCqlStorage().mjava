    @Test
    public void testCqlStorage() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException
    {
        //regular thrift column families
        pig.registerQuery("data = load 'cql://thriftKs/SomeApp?" + defaultParameters + "' using CqlStorage();");

        //(bar,3.141592653589793,1335890877,User Bar,35.0,9,15000,like)
        //(baz,1.61803399,1335890877,User Baz,95.3,3,512000,dislike)
        //(foo,2.718281828459045,1335890877,User Foo,85.0,8,125000,like)
        //(qux,0.660161815846869,1335890877,User Qux,64.7,2,12000,dislike)

        //{key: chararray,atomic_weight: double,created: long,name: chararray,percent: float,rating: int,score: long,vote_type: chararray}
        Iterator<Tuple> it = pig.openIterator("data");
        int count = 0;
        while (it.hasNext()) {
            count ++;
            Tuple t = it.next();
            if (count == 1)
            {
                Assert.assertEquals(t.get(0), "bar");
                Assert.assertEquals(t.get(1), 3.141592653589793d);
                Assert.assertEquals(t.get(3), "User Bar");
                Assert.assertEquals(t.get(4), 35.0f);
                Assert.assertEquals(t.get(5), 9);
                Assert.assertEquals(t.get(6), 15000L);
                Assert.assertEquals(t.get(7), "like");
            }
            else if (count == 2)
            {
                Assert.assertEquals(t.get(0), "baz");
                Assert.assertEquals(t.get(1), 1.61803399d);
                Assert.assertEquals(t.get(3), "User Baz");
                Assert.assertEquals(t.get(4), 95.3f);
                Assert.assertEquals(t.get(5), 3);
                Assert.assertEquals(t.get(6), 512000L);
                Assert.assertEquals(t.get(7), "dislike");
            }else if (count == 3)
            {
                Assert.assertEquals(t.get(0), "foo");
                Assert.assertEquals(t.get(1), 2.718281828459045d);
                Assert.assertEquals(t.get(3), "User Foo");
                Assert.assertEquals(t.get(4), 85.0f);
                Assert.assertEquals(t.get(5), 8);
                Assert.assertEquals(t.get(6), 125000L);
                Assert.assertEquals(t.get(7), "like");
            }
            else if (count == 4)
            {
                Assert.assertEquals(t.get(0), "qux");
                Assert.assertEquals(t.get(1), 0.660161815846869d);
                Assert.assertEquals(t.get(3), "User Qux");
                Assert.assertEquals(t.get(4), 64.7f);
                Assert.assertEquals(t.get(5), 2);
                Assert.assertEquals(t.get(6), 12000L);
                Assert.assertEquals(t.get(7), "dislike");
            }
        }
        Assert.assertEquals(count, 4);

        //Test counter colun family
        pig.registerQuery("cc_data = load 'cql://thriftKs/CC?" + defaultParameters + "' using CqlStorage();");

        //(chuck,fist,1)
        //(chuck,kick,3)

        // {key: chararray,column1: chararray,value: long}
        it = pig.openIterator("cc_data");
        count = 0;
        while (it.hasNext()) {
            count ++;
            Tuple t = it.next();
            if (count == 1)
            {
                Assert.assertEquals(t.get(0), "chuck");
                Assert.assertEquals(t.get(1), "fist");
                Assert.assertEquals(t.get(2), 1L);
            }
            else if (count == 2)
            {
                Assert.assertEquals(t.get(0), "chuck");
                Assert.assertEquals(t.get(1), "kick");
                Assert.assertEquals(t.get(2), 3L);
            }
        }
        Assert.assertEquals(count, 2);

        //Test composite column family
        pig.registerQuery("compo_data = load 'cql://thriftKs/Compo?" + defaultParameters + "' using CqlStorage();");

        //(kick,bruce,bruce,watch it, mate)
        //(kick,bruce,lee,oww)
        //(punch,bruce,bruce,hunh?)
        //(punch,bruce,lee,ouch)

        //{key: chararray,column1: chararray,column2: chararray,value: chararray}
        it = pig.openIterator("compo_data");
        count = 0;
        while (it.hasNext()) {
            count ++;
            Tuple t = it.next();
            if (count == 1)
            {
                Assert.assertEquals(t.get(0), "kick");
                Assert.assertEquals(t.get(1), "bruce");
                Assert.assertEquals(t.get(2), "bruce");
                Assert.assertEquals(t.get(3), "watch it, mate");
            }
            else if (count == 2)
            {
                Assert.assertEquals(t.get(0), "kick");
                Assert.assertEquals(t.get(1), "bruce");
                Assert.assertEquals(t.get(2), "lee");
                Assert.assertEquals(t.get(3), "oww");
            }
            else if (count == 3)
            {
                Assert.assertEquals(t.get(0), "punch");
                Assert.assertEquals(t.get(1), "bruce");
                Assert.assertEquals(t.get(2), "bruce");
                Assert.assertEquals(t.get(3), "hunh?");
            }
            else if (count == 4)
            {
                Assert.assertEquals(t.get(0), "punch");
                Assert.assertEquals(t.get(1), "bruce");
                Assert.assertEquals(t.get(2), "lee");
                Assert.assertEquals(t.get(3), "ouch");
            }
        }
        Assert.assertEquals(count, 4);
    }

