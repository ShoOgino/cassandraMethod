    /**
     * Convenience methods for subclasses to use in throwing exceptions about
     * badly behaved user objects employed as keys. We have to throw an
     * IllegalArgumentException with a rather verbose message telling the user
     * that they need to fix their object implementation to conform to the
     * general contract for java.lang.Object.
     * 
     * @param o1
     *            the first of the equal elements with unequal hash codes.
     * @param o2
     *            the second of the equal elements with unequal hash codes.
     * @exception IllegalArgumentException
     *                the whole point of this method.
     */
    protected final void throwObjectContractViolation(Object o1, Object o2)
            throws IllegalArgumentException
    {
        throw new IllegalArgumentException(
                "Equal objects must have equal hashcodes. "
                        + "During rehashing, Trove discovered that "
                        + "the following two objects claim to be "
                        + "equal (as in java.lang.Object.equals()) "
                        + "but their hashCodes (or those calculated by "
                        + "your TObjectHashingStrategy) are not equal."
                        + "This violates the general contract of "
                        + "java.lang.Object.hashCode().  See bullet point two "
                        + "in that method's documentation. " + "object #1 ="
                        + o1 + "; object #2 =" + o2);
    }

