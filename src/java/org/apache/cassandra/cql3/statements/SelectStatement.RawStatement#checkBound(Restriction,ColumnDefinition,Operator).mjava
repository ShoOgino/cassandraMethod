        /**
         * Checks that the operator for the specified column is compatible with the bounds of the existing restriction.
         *
         * @param existing the existing restriction
         * @param def the column definition
         * @param operator the operator
         * @throws InvalidRequestException if the operator is not compatible with the bounds of the existing restriction
         */
        private static void checkBound(Restriction existing, ColumnDefinition def, Operator operator) throws InvalidRequestException
        {
            Restriction.Slice existingSlice = (Restriction.Slice) existing;

            if (existingSlice.hasBound(Bound.START) && (operator == Operator.GT || operator == Operator.GTE))
                throw new InvalidRequestException(String.format(
                            "More than one restriction was found for the start bound on %s", def.name));

            if (existingSlice.hasBound(Bound.END) && (operator == Operator.LT || operator == Operator.LTE))
                throw new InvalidRequestException(String.format(
                            "More than one restriction was found for the end bound on %s", def.name));
        }

