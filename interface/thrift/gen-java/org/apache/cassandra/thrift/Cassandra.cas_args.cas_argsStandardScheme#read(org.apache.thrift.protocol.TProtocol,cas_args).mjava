      public void read(org.apache.thrift.protocol.TProtocol iprot, cas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readBinary();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column_family = iprot.readString();
                struct.setColumn_familyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPECTED
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                  struct.expected = new ArrayList<Column>(_list266.size);
                  for (int _i267 = 0; _i267 < _list266.size; ++_i267)
                  {
                    Column _elem268; // required
                    _elem268 = new Column();
                    _elem268.read(iprot);
                    struct.expected.add(_elem268);
                  }
                  iprot.readListEnd();
                }
                struct.setExpectedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list269 = iprot.readListBegin();
                  struct.updates = new ArrayList<Column>(_list269.size);
                  for (int _i270 = 0; _i270 < _list269.size; ++_i270)
                  {
                    Column _elem271; // required
                    _elem271 = new Column();
                    _elem271.read(iprot);
                    struct.updates.add(_elem271);
                  }
                  iprot.readListEnd();
                }
                struct.setUpdatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

