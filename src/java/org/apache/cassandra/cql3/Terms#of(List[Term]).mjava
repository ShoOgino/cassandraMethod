    /**
     * Creates a {@code Terms} containing a set of {@code Term}.
     *
     * @param terms {@code List<Term>}
     * @return a {@code Terms} containing a set of {@code Term}.
     */
    public static Terms of(final List<Term> terms)
    {
        return new Terms()
                {
                    @Override
                    public void addFunctionsTo(List<Function> functions)
                    {
                        addFunctions(terms, functions);
                    }

                    @Override
                    public void collectMarkerSpecification(VariableSpecifications boundNames)
                    {
                        for (int i = 0, m = terms.size(); i <m; i++)
                        {
                            Term term = terms.get(i);
                            term.collectMarkerSpecification(boundNames);
                        }
                    }

                    @Override
                    public List<Terminal> bind(QueryOptions options)
                    {
                        int size = terms.size();
                        List<Terminal> terminals = new ArrayList<>(size);
                        for (int i = 0; i < size; i++)
                        {
                            Term term = terms.get(i);
                            terminals.add(term.bind(options));
                        }
                        return terminals;
                    }

                    @Override
                    public List<ByteBuffer> bindAndGet(QueryOptions options)
                    {
                        int size = terms.size();
                        List<ByteBuffer> buffers = new ArrayList<>(size);
                        for (int i = 0; i < size; i++)
                        {
                            Term term = terms.get(i);
                            buffers.add(term.bindAndGet(options));
                        }
                        return buffers;
                    }
                };
    }

