    /** like getPosition, but if key is not found will return the location of the first key _greater_ than the desired one, or -1 if no such key exists. */
    public long getNearestPosition(DecoratedKey decoratedKey) throws IOException
    {
        KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);
        if (sampledPosition == null)
        {
            return 0;
        }

        // by default, we plan to start scanning at the nearest bsearched index entry
        long start = sampledPosition.position;
        if (spannedIndexDataPositions != null)
        {
            // check if the index entry spans a mmap segment boundary
            PositionSize info = spannedIndexDataPositions.get(sampledPosition);
            if (info != null)
            {
                // if the key matches the index entry we don't have to scan the index after all
                if (sampledPosition.key.compareTo(decoratedKey) == 0)
                    return info.position;
                // otherwise, start scanning at the next entry (which won't span a boundary;
                // if it did it would have been in the index sample and we would have started with that instead)
                start = info.position + sampledPosition.key.serializedSize() + (Long.SIZE / 8);
            }
        }

        BufferedRandomAccessFile input = new BufferedRandomAccessFile(indexFilename(path), "r");
        input.seek(start);
        try
        {
            while (true)
            {
                DecoratedKey indexDecoratedKey;
                try
                {
                    indexDecoratedKey = partitioner.convertFromDiskFormat(input.readUTF());
                }
                catch (EOFException e)
                {
                    return -1;
                }
                long position = input.readLong();
                int v = indexDecoratedKey.compareTo(decoratedKey);
                if (v >= 0)
                    return position;
            }
        }
        finally
        {
            input.close();
        }
    }

