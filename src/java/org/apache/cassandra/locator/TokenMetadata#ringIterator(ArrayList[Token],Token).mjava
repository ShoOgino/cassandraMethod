    /**
     * <tt>Iterator</tt> over the <tt>Token</tt>s in the given ring, starting with the token for the node owning start
     * (which does not have to be a <tt>Token</tt> in the ring)
     */
    public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start)
    {
        final int startIndex = firstTokenIndex(ring, start);
        return new AbstractIterator<Token>()
        {
            int j = startIndex;
            protected Token computeNext()
            {
                if (j < 0)
                    return endOfData();
                try
                {
                    return ring.get(j);
                }
                finally
                {
                    j = (j + 1) % ring.size();
                    if (j == startIndex)
                        j = -1;
                }
            }
        };
    }

