    public void abort()
    {
        switch (state)
        {
            case ABORTED:
                return;
            case FINISHED:
                throw new IllegalStateException("Cannot abort - changes have already been committed");
        }
        state = State.ABORTED;

        Throwable fail = null;
        try
        {
            moveStarts(null, null, true);
        }
        catch (Throwable t)
        {
            fail = merge(fail, t);
        }

        // remove already completed SSTables
        for (SSTableReader sstable : finished)
        {
            try
            {
                sstable.markObsolete(null);
                sstable.selfRef().release();
            }
            catch (Throwable t)
            {
                fail = merge(fail, t);
            }
        }

        if (writer != null)
            finishedEarly.add(new Finished(writer, currentlyOpenedEarly));

        // abort the writers
        for (Finished finished : finishedEarly)
        {
            try
            {
                finished.writer.abort();
            }
            catch (Throwable t)
            {
                fail = merge(fail, t);
            }
            try
            {
                if (finished.reader != null)
                {
                    // if we've already been opened, add ourselves to the discard pile
                    discard.add(finished.reader);
                    finished.reader.markObsolete(null);
                }
            }
            catch (Throwable t)
            {
                fail = merge(fail, t);
            }
        }

        try
        {
            replaceWithFinishedReaders(Collections.<SSTableReader>emptyList());
        }
        catch (Throwable t)
        {
            fail = merge(fail, t);
        }

        if (fail != null)
            throw Throwables.propagate(fail);
    }

