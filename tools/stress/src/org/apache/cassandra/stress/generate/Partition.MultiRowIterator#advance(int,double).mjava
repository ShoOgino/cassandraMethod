        private boolean advance(int depth, double continueChance)
        {
            // advance the leaf component
            clusteringComponents[depth].poll();
            while (true)
            {
                if (clusteringComponents[depth].isEmpty())
                {
                    if (depth == 0)
                        return false;
                    depth--;
                    clusteringComponents[depth].poll();
                    continue;
                }

                // the chance of descending is the uniform use chance, multiplied by the number of children
                // we would on average generate (so if we have a 0.1 use chance, but should generate 10 children
                // then we will always descend), multiplied by 1/(compound roll), where (compound roll) is the
                // chance with which we reached this depth, i.e. if we already beat 50/50 odds, we double our
                // chance of beating this next roll
                double thischance = useChance * chancemodifier[depth];
                if (thischance > 0.999f || thischance >= random.nextDouble())
                {
                    row.row[depth] = clusteringComponents[depth].peek();
                    depth++;
                    if (depth == clusteringComponents.length)
                        break;
                    rollmodifier[depth] = rollmodifier[depth - 1] / Math.min(1d, thischance);
                    chancemodifier[depth] = generator.clusteringChildAverages[depth] * rollmodifier[depth];
                    fill(depth);
                    continue;
                }

                clusteringComponents[depth].poll();
            }

            return continueChance >= 1.0d || continueChance >= random.nextDouble();
        }

