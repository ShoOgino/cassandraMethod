    private static void testDifferences(Trees trees, List<TreeRange> expectedDifference) throws IOException
    {
        MerkleTree mt1 = trees.tree1;
        MerkleTree mt2 = trees.tree2;

        assertDiffer(mt1,                             mt2,                             expectedDifference);
        assertDiffer(mt1,                             mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(mt1,                             cycle(mt2, true),                expectedDifference);
        assertDiffer(mt1,                             cycle(mt2, false),               expectedDifference);
        assertDiffer(mt1,                             cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(mt1,                             cycle(mt2.moveOffHeap(), false), expectedDifference);

        assertDiffer(mt1.moveOffHeap(),               mt2,                             expectedDifference);
        assertDiffer(mt1.moveOffHeap(),               mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(mt1.moveOffHeap(),               cycle(mt2, true),                expectedDifference);
        assertDiffer(mt1.moveOffHeap(),               cycle(mt2, false),               expectedDifference);
        assertDiffer(mt1.moveOffHeap(),               cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(mt1.moveOffHeap(),               cycle(mt2.moveOffHeap(), false), expectedDifference);

        assertDiffer(cycle(mt1, true),                mt2,                             expectedDifference);
        assertDiffer(cycle(mt1, true),                mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(cycle(mt1, true),                cycle(mt2, true),                expectedDifference);
        assertDiffer(cycle(mt1, true),                cycle(mt2, false),               expectedDifference);
        assertDiffer(cycle(mt1, true),                cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(cycle(mt1, true),                cycle(mt2.moveOffHeap(), false), expectedDifference);

        assertDiffer(cycle(mt1, false),               mt2,                             expectedDifference);
        assertDiffer(cycle(mt1, false),               mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(cycle(mt1, false),               cycle(mt2, true),                expectedDifference);
        assertDiffer(cycle(mt1, false),               cycle(mt2, false),               expectedDifference);
        assertDiffer(cycle(mt1, false),               cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(cycle(mt1, false),               cycle(mt2.moveOffHeap(), false), expectedDifference);

        assertDiffer(cycle(mt1.moveOffHeap(), true),  mt2,                             expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), true),  mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), true),  cycle(mt2, true),                expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), true),  cycle(mt2, false),               expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), true),  cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), true),  cycle(mt2.moveOffHeap(), false), expectedDifference);

        assertDiffer(cycle(mt1.moveOffHeap(), false), mt2,                             expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), false), mt2.moveOffHeap(),               expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), false), cycle(mt2, true),                expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), false), cycle(mt2, false),               expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), false), cycle(mt2.moveOffHeap(), true),  expectedDifference);
        assertDiffer(cycle(mt1.moveOffHeap(), false), cycle(mt2.moveOffHeap(), false), expectedDifference);
    }

