    @Test
    public void testUpgradeSStables() throws IOException
    {
        try (Cluster cluster = init(Cluster.build(1).start()))
        {
            cluster.schemaChange("create type " + KEYSPACE + ".a (foo text)");
            cluster.schemaChange("create table " + KEYSPACE + ".x (id int, ck frozen<a>, i int, primary key (id, ck))");
            cluster.coordinator(1).execute("insert into " + KEYSPACE + ".x (id, ck, i) VALUES (?, " + json(1) + ", ? )", ConsistencyLevel.ALL, 1, 1);
            assertRows(cluster.coordinator(1).execute("select i from " + KEYSPACE + ".x WHERE id = ? and ck = " + json(1), ConsistencyLevel.ALL, 1), row(1));
            cluster.forEach(i -> i.flush(KEYSPACE));
            assertRows(cluster.coordinator(1).execute("select i from " + KEYSPACE + ".x WHERE id = ? and ck = " + json(1), ConsistencyLevel.ALL, 1), row(1));

            cluster.schemaChange("alter type " + KEYSPACE + ".a add bar text");
            cluster.coordinator(1).execute("insert into " + KEYSPACE + ".x (id, ck, i) VALUES (?, " + json(2) + ", ? )", ConsistencyLevel.ALL, 2, 2);
            cluster.forEach(i -> i.flush(KEYSPACE));
            assertRows(cluster.coordinator(1).execute("select i from " + KEYSPACE + ".x WHERE id = ? and ck = " + json(2), ConsistencyLevel.ALL, 2), row(2));

            cluster.forEach(i -> i.runOnInstance(() -> {
                try
                {
                    StorageService.instance.upgradeSSTables(KEYSPACE, false, "x");
                }
                catch (IOException | ExecutionException | InterruptedException e)
                {
                    throw new RuntimeException(e);
                }
            }));

            cluster.forEach(i -> i.forceCompact(KEYSPACE, "x"));

            for (int i = 1; i < 3; i++)
                assertRows(cluster.coordinator(1).execute("select i from " + KEYSPACE + ".x WHERE id = ? and ck = " + json(i), ConsistencyLevel.ALL, i),
                           row(i));
        }
    }

