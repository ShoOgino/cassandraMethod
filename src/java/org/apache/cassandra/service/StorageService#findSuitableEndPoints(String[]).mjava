	/*
	 * TODO:
	 * This is used by the incomplete multiget implementation. Need to rewrite
	 * this to use findSuitableEndPoint above instead of copy/paste 
	 */
	public Map<String, EndPoint> findSuitableEndPoints(String[] keys) throws IOException
	{
		Map<String, EndPoint> suitableEndPoints = new HashMap<String, EndPoint>();
		Map<String, EndPoint[]> results = getNStorageEndPoints(keys);
		for ( String key : keys )
		{
			EndPoint[] endpoints = results.get(key);
			/* indicates if we have to move on to the next key */
			boolean moveOn = false;
			for(EndPoint endPoint: endpoints)
			{
				if(endPoint.equals(StorageService.getLocalStorageEndPoint()))
				{
					suitableEndPoints.put(key, endPoint);
					moveOn = true;
					break;
				}
			}
			
			if ( moveOn )
				continue;
				
			int j = 0;
			for ( ; j < endpoints.length; ++j )
			{
				if ( StorageService.instance().isInSameDataCenter(endpoints[j]) && FailureDetector.instance().isAlive(endpoints[j]) )
				{
					if (logger_.isDebugEnabled())
					  logger_.debug("EndPoint " + endpoints[j] + " is in the same data center as local storage endpoint.");
					suitableEndPoints.put(key, endpoints[j]);
					moveOn = true;
					break;
				}
			}
			
			if ( moveOn )
				continue;
			
			// We have tried to be really nice but looks like there are no servers 
			// in the local data center that are alive and can service this request so 
			// just send it to the first alive guy and see if we get anything.
			j = 0;
			for ( ; j < endpoints.length; ++j )
			{
				if ( FailureDetector.instance().isAlive(endpoints[j]) )
				{
					if (logger_.isDebugEnabled())
					  logger_.debug("EndPoint " + endpoints[j] + " is alive so get data from it.");
					suitableEndPoints.put(key, endpoints[j]);
					break;
				}
			}
		}
		return suitableEndPoints;
	}

