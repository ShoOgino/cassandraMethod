    @Test
    public void testSparseTableCqlReads() throws Throwable
    {
        populateSparseTable();

        UntypedResultSet resultSet = execute(String.format("select * from %s.%s", KEYSPACE, currentSparseTable()));
        assertEquals("key", resultSet.metadata().get(0).name.toString());
        assertEquals("column1", resultSet.metadata().get(1).name.toString());
        assertEquals("col1", resultSet.metadata().get(2).name.toString());
        assertEquals("col2", resultSet.metadata().get(3).name.toString());

        assertRows(resultSet,
                   row("key1", "val1", 3L, 4L),
                   row("key1", "val2", 3L, 4L),
                   row("key2", "val1", 3L, 4L),
                   row("key2", "val2", 3L, 4L));

        assertRows(execute(String.format("select col1, col2, column1, key from %s.%s", KEYSPACE, currentSparseTable())),
                   row(3L, 4L, "val1", "key1"),
                   row(3L, 4L, "val2", "key1"),
                   row(3L, 4L, "val1", "key2"),
                   row(3L, 4L, "val2", "key2"));

        assertInvalidMessage("Undefined name value in selection clause",
                             String.format("select value from %s.%s", KEYSPACE, currentSparseTable()));

        assertRows(execute(String.format("select * from %s.%s WHERE key = ? AND column1 = ?", KEYSPACE, currentSparseTable()), "key1", "val2"),
                   row("key1", "val2", 3L, 4L));

        resultSet = execute(String.format("select col1 as a, col2 as b, column1 as c, key as d from %s.%s WHERE key = ? AND column1 = ?", KEYSPACE, currentSparseTable()), "key1", "val2");
        assertRows(resultSet,
                   row(3L, 4L, "val2", "key1"));
        assertEquals(resultSet.metadata().get(0).name.toString(), "a");
        assertEquals(resultSet.metadata().get(1).name.toString(), "b");
        assertEquals(resultSet.metadata().get(2).name.toString(), "c");
        assertEquals(resultSet.metadata().get(3).name.toString(), "d");

        assertRows(execute(String.format("select col1, col2 from %s.%s WHERE key = ? AND column1 = ?", KEYSPACE, currentSparseTable()), "key1", "val2"),
                   row(3L, 4L));

        assertInvalidMessage("Secondary indexes are not supported on super column families",
                             String.format("CREATE INDEX ON %s.%s (column1)", KEYSPACE, currentSparseTable()));
        assertInvalidMessage("Secondary indexes are not supported on super column families",
                             String.format("CREATE INDEX ON %s.%s (col1)", KEYSPACE, currentSparseTable()));

        assertRows(execute(String.format("SELECT JSON * FROM %s.%s WHERE key = ? AND column1 = ?", KEYSPACE, currentSparseTable()), "key1", "val2"),
                   row("{\"key\": \"key1\", \"column1\": \"val2\", \"col1\": 3, \"col2\": 4}"));
    }

