        public void count(Column column, DeletionInfo.InOrderTester tester)
        {
            if (!isLive(column, tester, timestamp))
            {
                ignored++;
                return;
            }

            if (toGroup == 0)
            {
                live = 1;
                return;
            }

            ByteBuffer[] current = type.split(column.name());
            assert current.length >= toGroup;

            if (previous == null)
            {
                // Only the first group can be static
                previousGroupIsStatic = type.isStaticName(column.name());
            }
            else
            {
                boolean isSameGroup = previousGroupIsStatic == type.isStaticName(column.name());
                if (isSameGroup)
                {
                    for (int i = 0; i < toGroup; i++)
                    {
                        if (ByteBufferUtil.compareUnsigned(previous[i], current[i]) != 0)
                        {
                            isSameGroup = false;
                            break;
                        }
                    }
                }

                if (isSameGroup)
                    return;

                // We want to count the static group as 1 (CQL) row only if it's the only
                // group in the partition. So, since we have already counted it at this point,
                // just don't count the 2nd group if there is one and the first one was static
                if (previousGroupIsStatic)
                {
                    previous = current;
                    previousGroupIsStatic = false;
                    return;
                }
            }

            live++;
            previous = current;
        }

