    @Test
    public void testDiff()
    {
        byte[] left = new byte[3 * stepLength];
        byte[] right;

        // equality: equal nodes, all counts same
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);
        right = ArrayUtils.clone(left);

        assert ContextRelationship.EQUAL ==
            cc.diff(left, right);

        // greater than: left has superset of nodes (counts equal)
        left = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3),  3L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6),  2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9),  1L, 0L);
        cc.writeElementAtStepOffset(left, 3, FBUtilities.toByteArray(12), 0L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 1L, 0L);

        assert ContextRelationship.GREATER_THAN ==
            cc.diff(left, right);
        
        // less than: left has subset of nodes (counts equal)
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);

        right = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3),  3L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6),  2L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9),  1L, 0L);
        cc.writeElementAtStepOffset(right, 3, FBUtilities.toByteArray(12), 0L, 0L);

        assert ContextRelationship.LESS_THAN ==
            cc.diff(left, right);

        // greater than: equal nodes, but left has higher counts
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 3L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 1L, 0L);

        assert ContextRelationship.GREATER_THAN ==
            cc.diff(left, right);

        // less than: equal nodes, but right has higher counts
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 3L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 3L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 9L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 3L, 0L);

        assert ContextRelationship.LESS_THAN ==
            cc.diff(left, right);

        // disjoint: right and left have disjoint node sets
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(4), 1L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 1L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(4), 1L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(2),  1L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6),  1L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        // disjoint: equal nodes, but right and left have higher counts in differing nodes
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 3L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 1L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 2L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 3L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 1L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 1L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 9L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        // disjoint: left has more nodes, but lower counts
        left = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3),  2L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6),  3L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9),  1L, 0L);
        cc.writeElementAtStepOffset(left, 3, FBUtilities.toByteArray(12), 1L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 4L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 9L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);
        
        // disjoint: left has less nodes, but higher counts
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 5L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 3L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 2L, 0L);

        right = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3),  4L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6),  3L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9),  2L, 0L);
        cc.writeElementAtStepOffset(right, 3, FBUtilities.toByteArray(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        // disjoint: mixed nodes and counts
        left = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 5L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(9), 2L, 0L);

        right = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3),  4L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6),  3L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9),  2L, 0L);
        cc.writeElementAtStepOffset(right, 3, FBUtilities.toByteArray(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);

        left = new byte[4 * stepLength];
        cc.writeElementAtStepOffset(left, 0, FBUtilities.toByteArray(3), 5L, 0L);
        cc.writeElementAtStepOffset(left, 1, FBUtilities.toByteArray(6), 2L, 0L);
        cc.writeElementAtStepOffset(left, 2, FBUtilities.toByteArray(7), 2L, 0L);
        cc.writeElementAtStepOffset(left, 3, FBUtilities.toByteArray(9), 2L, 0L);

        right = new byte[3 * stepLength];
        cc.writeElementAtStepOffset(right, 0, FBUtilities.toByteArray(3), 4L, 0L);
        cc.writeElementAtStepOffset(right, 1, FBUtilities.toByteArray(6), 3L, 0L);
        cc.writeElementAtStepOffset(right, 2, FBUtilities.toByteArray(9), 2L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left, right);
    }

