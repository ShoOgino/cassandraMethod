    /**
     * Serialize the given value according to the CQL type handled by this codec.
     *
     * <p>Implementation notes:
     *
     * <ol>
     * <li>Null values should be gracefully handled and no exception should be raised; these should
     * be considered as the equivalent of a NULL CQL value;
     * <li>Codecs for CQL collection types should not permit null elements;
     * <li>Codecs for CQL collection types should treat a {@code null} input as the equivalent of an
     * empty collection.
     * </ol>
     *
     * @param value           An instance of T; may be {@code null}.
     * @param protocolVersion the protocol version to use when serializing {@code bytes}. In most
     *                        cases, the proper value to provide for this argument is the value returned by {@code
     *                        ProtocolOptions#getProtocolVersion} (which is the protocol version in use by the driver).
     * @return A {@link ByteBuffer} instance containing the serialized form of T
     * @throws InvalidTypeException if the given value does not have the expected type
     */
    public abstract ByteBuffer serialize(T value, ProtocolVersion protocolVersion)
    throws InvalidTypeException;

