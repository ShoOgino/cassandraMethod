    /**
     * @param key
     * @return a predicate for whether tombstones marked for deletion at the given time for the given partition are
     * purgeable; we calculate this by checking whether the deletion time is less than the min timestamp of all SSTables
     * containing his partition and not participating in the compaction. This means there isn't any data in those
     * sstables that might still need to be suppressed by a tombstone at this timestamp.
     */
    public Predicate<Long> getPurgeEvaluator(DecoratedKey key)
    {
        if (NEVER_PURGE_TOMBSTONES)
            return Predicates.alwaysFalse();

        overlapIterator.update(key);
        Set<SSTableReader> filteredSSTables = overlapIterator.overlaps();
        Iterable<Memtable> memtables = cfs.getTracker().getView().getAllMemtables();
        long minTimestampSeen = Long.MAX_VALUE;
        boolean hasTimestamp = false;

        for (SSTableReader sstable: filteredSSTables)
        {
            // if we don't have bloom filter(bf_fp_chance=1.0 or filter file is missing),
            // we check index file instead.
            if (sstable.getBloomFilter() instanceof AlwaysPresentFilter && sstable.getPosition(key, SSTableReader.Operator.EQ, false) != null
                || sstable.getBloomFilter().isPresent(key))
            {
                minTimestampSeen = Math.min(minTimestampSeen, sstable.getMinTimestamp());
                hasTimestamp = true;
            }

        }

        for (Memtable memtable : memtables)
        {
            ColumnFamily cf = memtable.getColumnFamily(key);
            if (cf != null)
            {
                minTimestampSeen = Math.min(minTimestampSeen, memtable.getMinTimestamp());
                hasTimestamp = true;
            }
        }

        if (!hasTimestamp)
            return Predicates.alwaysTrue();
        else
        {
            final long finalTimestamp = minTimestampSeen;
            return new Predicate<Long>()
            {
                public boolean apply(Long time)
                {
                    return time < finalTimestamp;
                }
            };
        }
    }

