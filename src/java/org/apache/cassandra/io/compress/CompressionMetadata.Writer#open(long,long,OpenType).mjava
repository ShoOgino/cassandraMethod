        public CompressionMetadata open(long dataLength, long compressedLength, OpenType type)
        {
            RefCountedMemory offsets = this.offsets;
            int count = this.count;
            switch (type)
            {
                case FINAL: case SHARED_FINAL:
                    // maybe resize the data
                    if (this.offsets.size() != count * 8L)
                    {
                        offsets = this.offsets.copy(count * 8L);
                        // release our reference to the original shared data;
                        // we don't do this if not resizing since we must pass out existing
                        // reference onto our caller
                        this.offsets.unreference();
                    }
                    // null out our reference to the original shared data to catch accidental reuse
                    // note that since noone is writing to this Writer while we open it, null:ing out this.offsets is safe
                    this.offsets = null;
                    if (type == OpenType.SHARED_FINAL)
                    {
                        // we will use the data again, so stash our resized data back, and take an extra reference to it
                        this.offsets = offsets;
                        this.offsets.reference();
                    }
                    break;

                case SHARED:

                    // we should only be opened on a compression data boundary; truncate our size to this boundary
                    assert dataLength % parameters.chunkLength() == 0;
                    count = (int) (dataLength / parameters.chunkLength());
                    // grab our actual compressed length from the next offset from our the position we're opened to
                    if (count < this.count)
                        compressedLength = offsets.getLong(count * 8);
                    break;

                default:
                    throw new AssertionError();
            }
            return new CompressionMetadata(filePath, parameters, offsets, count * 8L, dataLength, compressedLength);
        }

