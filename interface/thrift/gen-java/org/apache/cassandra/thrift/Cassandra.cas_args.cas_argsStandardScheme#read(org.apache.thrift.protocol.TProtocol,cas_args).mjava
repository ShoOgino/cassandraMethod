      public void read(org.apache.thrift.protocol.TProtocol iprot, cas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readBinary();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column_family = iprot.readString();
                struct.setColumn_familyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPECTED
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list294 = iprot.readListBegin();
                  struct.expected = new ArrayList<Column>(_list294.size);
                  for (int _i295 = 0; _i295 < _list294.size; ++_i295)
                  {
                    Column _elem296; // required
                    _elem296 = new Column();
                    _elem296.read(iprot);
                    struct.expected.add(_elem296);
                  }
                  iprot.readListEnd();
                }
                struct.setExpectedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list297 = iprot.readListBegin();
                  struct.updates = new ArrayList<Column>(_list297.size);
                  for (int _i298 = 0; _i298 < _list297.size; ++_i298)
                  {
                    Column _elem299; // required
                    _elem299 = new Column();
                    _elem299.read(iprot);
                    struct.updates.add(_elem299);
                  }
                  iprot.readListEnd();
                }
                struct.setUpdatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONSISTENCY_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                struct.setConsistency_levelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

