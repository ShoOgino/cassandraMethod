    /**
     * Test multi-column slice restrictions (e.g '(clustering_0, clustering_1) > (1, 2)') with two clustering
     * columns
     */
    @Test
    public void testBuildBoundWithMultiSliceRestrictionsWithTwoClusteringColumn() throws Exception
    {
        ByteBuffer value1 = ByteBufferUtil.bytes(1);
        ByteBuffer value2 = ByteBufferUtil.bytes(2);

        // (clustering_0, clustering1) > (1, 2)
        MultiColumnRestriction.Slice slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.GT, toMultiItemTerminal(value1, value2));
        Restriction[] restrictions = new Restriction[] { slice, slice };
        CFDefinition cfDef = createCFDefinition(restrictions.length);

        List<ByteBuffer> bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.GT, value1, value2);

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(cfDef, bounds.get(0));

        // (clustering_0, clustering1) >= (1, 2)
        slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.GTE, toMultiItemTerminal(value1, value2));
        restrictions = new Restriction[] { slice, slice };

        bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.GTE, value1, value2);

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertComposite(cfDef, bounds.get(0));

        // (clustering_0, clustering1) <= (1, 2)
        slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.LTE, toMultiItemTerminal(value1, value2));
        restrictions = new Restriction[] { slice, slice };

        bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(cfDef, bounds.get(0));

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.LTE, value1, value2);

        // (clustering_0, clustering1) < (1, 2)
        slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.LT, toMultiItemTerminal(value1, value2));
        restrictions = new Restriction[] { slice, slice };

        bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertComposite(cfDef, bounds.get(0));

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.LT, value1, value2);

        // (clustering_0, clustering1) > (1, 2) AND (clustering_0) < (2)
        slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.GT, toMultiItemTerminal(value1, value2));
        slice.setBound(Relation.Type.LT, toMultiItemTerminal(value2));
        restrictions = new Restriction[] { slice, slice };

        bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.GT, value1, value2);

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.LT, value2);

        // (clustering_0, clustering1) >= (1, 2) AND (clustering_0, clustering1) <= (2, 1)
        slice = new MultiColumnRestriction.Slice(false);
        slice.setBound(Relation.Type.GTE, toMultiItemTerminal(value1, value2));
        slice.setBound(Relation.Type.LTE, toMultiItemTerminal(value2, value1));
        restrictions = new Restriction[] { slice, slice };

        bounds = executeBuildBound(cfDef, restrictions, Bound.START);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.GTE, value1, value2);

        bounds = executeBuildBound(cfDef, restrictions, Bound.END);
        assertEquals(1, bounds.size());
        assertForRelationComposite(cfDef, bounds.get(0), Relation.Type.LTE, value2, value1);
    }

