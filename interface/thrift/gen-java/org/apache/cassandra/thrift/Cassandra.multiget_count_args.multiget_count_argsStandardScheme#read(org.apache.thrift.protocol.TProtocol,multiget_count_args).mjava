      public void read(org.apache.thrift.protocol.TProtocol iprot, multiget_count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list252 = iprot.readListBegin();
                  struct.keys = new ArrayList<ByteBuffer>(_list252.size);
                  for (int _i253 = 0; _i253 < _list252.size; ++_i253)
                  {
                    ByteBuffer _elem254; // required
                    _elem254 = iprot.readBinary();
                    struct.keys.add(_elem254);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_PARENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.column_parent = new ColumnParent();
                struct.column_parent.read(iprot);
                struct.setColumn_parentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREDICATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.predicate = new SlicePredicate();
                struct.predicate.read(iprot);
                struct.setPredicateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONSISTENCY_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                struct.setConsistency_levelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

