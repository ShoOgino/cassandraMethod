        boolean sync()
        {
            try
            {
                // always run once after shutdown signalled
                boolean run = !shutdown;

                // sync and signal
                long pollStarted = clock.currentTimeMillis();
                if (lastSyncedAt + syncIntervalMillis <= pollStarted || shutdown || syncRequested)
                {
                    // in this branch, we want to flush the commit log to disk
                    commitLog.sync(shutdown, true);
                    syncRequested = false;
                    lastSyncedAt = pollStarted;
                    syncComplete.signalAll();
                }
                else
                {
                    // in this branch, just update the commit log sync headers
                    commitLog.sync(false, false);
                }

                // sleep any time we have left before the next one is due
                long now = clock.currentTimeMillis();
                long sleep = pollStarted + markerIntervalMillis - now;
                if (sleep < 0)
                {
                    // if we have lagged noticeably, update our lag counter
                    if (firstLagAt == 0)
                    {
                        firstLagAt = now;
                        totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0;
                    }
                    syncExceededIntervalBy -= sleep;
                    lagCount++;
                }
                syncCount++;
                totalSyncDuration += now - pollStarted;

                if (firstLagAt > 0)
                {
                    //Only reset the lag tracking if it actually logged this time
                    boolean logged = NoSpamLogger.log(
                    logger,
                    NoSpamLogger.Level.WARN,
                    5,
                    TimeUnit.MINUTES,
                    "Out of {} commit log syncs over the past {}s with average duration of {}ms, {} have exceeded the configured commit interval by an average of {}ms",
                    syncCount, (now - firstLagAt) / 1000, String.format("%.2f", (double) totalSyncDuration / syncCount), lagCount, String.format("%.2f", (double) syncExceededIntervalBy / lagCount));
                    if (logged)
                        firstLagAt = 0;
                }

                if (!run)
                    return false;

                // if we have lagged this round, we probably have work to do already so we don't sleep
                if (sleep < 0)
                    return true;

                try
                {
                    haveWork.tryAcquire(sleep, TimeUnit.MILLISECONDS);
                    haveWork.drainPermits();
                }
                catch (InterruptedException e)
                {
                    throw new AssertionError();
                }
            }
            catch (Throwable t)
            {
                if (!CommitLog.handleCommitError("Failed to persist commits to disk", t))
                    return false;

                // sleep for full poll-interval after an error, so we don't spam the log file
                try
                {
                    haveWork.tryAcquire(markerIntervalMillis, TimeUnit.MILLISECONDS);
                }
                catch (InterruptedException e)
                {
                    throw new AssertionError();
                }
            }
            return true;
        }

