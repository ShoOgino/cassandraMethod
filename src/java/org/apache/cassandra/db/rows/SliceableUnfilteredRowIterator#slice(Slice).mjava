    /**
     * Move forward (resp. backward if isReverseOrder() is true for the iterator) in
     * the iterator and return an iterator over the Unfiltered selected by the provided
     * {@code slice}.
     * <p>
     * Please note that successive calls to {@code slice} are allowed provided the
     * slice are non overlapping and are passed in clustering (resp. reverse clustering) order.
     * However, {@code slice} is allowed to leave the iterator in an unknown state and there
     * is no guarantee over what a call to {@code hasNext} or {@code next} will yield after
     * a call to {@code slice}. In other words, for a given iterator, you should either use
     * {@code slice} or {@code hasNext/next} but not both.
     */
    public Iterator<Unfiltered> slice(Slice slice);

