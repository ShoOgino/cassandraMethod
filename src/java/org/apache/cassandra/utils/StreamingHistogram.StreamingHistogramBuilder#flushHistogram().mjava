        /**
         * Drain the temporary spool into the final bins
         */
        public void flushHistogram()
        {
            if(spool.size() > 0)
            {
                Long spoolValue;
                Long binValue;

                // Iterate over the spool, copying the value into the primary bin map
                // and compacting that map as necessary
                for (Map.Entry<Double, Long> entry : spool.entrySet())
                {
                    Double key = entry.getKey();
                    spoolValue = entry.getValue();
                    binValue = bin.get(key);

                    if (binValue != null)
                    {
                        binValue += spoolValue;
                        bin.put(key, binValue);
                    } else
                    {
                        bin.put(key, spoolValue);
                    }

                    // if bin size exceeds maximum bin size then trim down to max size
                    if (bin.size() > maxBinSize)
                    {
                        // find points p1, p2 which have smallest difference
                        Iterator<Double> keys = bin.keySet().iterator();
                        double p1 = keys.next();
                        double p2 = keys.next();
                        double smallestDiff = p2 - p1;
                        double q1 = p1, q2 = p2;
                        while (keys.hasNext()) {
                            p1 = p2;
                            p2 = keys.next();
                            double diff = p2 - p1;
                            if (diff < smallestDiff) {
                                smallestDiff = diff;
                                q1 = p1;
                                q2 = p2;
                            }
                        }
                        // merge those two
                        long k1 = bin.remove(q1);
                        long k2 = bin.remove(q2);
                        bin.put((q1 * k1 + q2 * k2) / (k1 + k2), k1 + k2);
                    }
                }
                spool.clear();
            }
        }

