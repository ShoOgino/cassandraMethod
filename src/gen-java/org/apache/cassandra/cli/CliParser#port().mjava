    // $ANTLR start "port"
    // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:523:1: port : IntegerPositiveLiteral ;
    public final CliParser.port_return port() throws RecognitionException {
        CliParser.port_return retval = new CliParser.port_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IntegerPositiveLiteral278=null;

        CommonTree IntegerPositiveLiteral278_tree=null;

        try {
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:524:5: ( IntegerPositiveLiteral )
            // /home/drift/svn/cassandra/trunk/src/java/org/apache/cassandra/cli/Cli.g:524:7: IntegerPositiveLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            IntegerPositiveLiteral278=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_port3704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IntegerPositiveLiteral278_tree = (CommonTree)adaptor.create(IntegerPositiveLiteral278);
            adaptor.addChild(root_0, IntegerPositiveLiteral278_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "port"

