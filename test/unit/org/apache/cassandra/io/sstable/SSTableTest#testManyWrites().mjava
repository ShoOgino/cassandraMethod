    @Test
    public void testManyWrites() throws IOException
    {
        SortedMap<DecoratedKey, ColumnFamily> map = new TreeMap<DecoratedKey, ColumnFamily>();
        SortedMap<ByteBuffer, ByteBuffer> bytesMap = new TreeMap<ByteBuffer, ByteBuffer>();
        //for (int i = 100; i < 1000; ++i)
        for (int i = 100; i < 300; ++i)
        {
            ColumnFamily cf = ColumnFamily.create("Keyspace1", "Standard2");
            ByteBuffer bytes = ByteBufferUtil.bytes(("Avinash Lakshman is a good man: " + i));
            cf.addColumn(new Column(bytes, bytes));
            map.put(Util.dk(Integer.toString(i)), cf);
            bytesMap.put(ByteBufferUtil.bytes(Integer.toString(i)), Util.serializeForSSTable(cf));
        }

        // write
        SSTableReader ssTable = SSTableUtils.prepare().cf("Standard2").write(map);

        // verify
        verifyMany(ssTable, bytesMap);
        ssTable = SSTableReader.open(ssTable.descriptor); // read the index from disk
        verifyMany(ssTable, bytesMap);

        Set<Component> live = SSTable.componentsFor(ssTable.descriptor);
        assert !live.isEmpty() : "SSTable has no live components";
        Set<Component> temp = SSTable.componentsFor(ssTable.descriptor.asTemporary(true));
        assert temp.isEmpty() : "SSTable has unexpected temp components";
    }

