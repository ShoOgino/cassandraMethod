    /**
     * Abstraction over the Metrics Gauge, Counter, and Timer that will turn it into a ([pk], keyspace_name, table_name)
     * table. The primary key (default 'count') is in descending orde in order to visually sort the rows when selecting
     * the entire table in CQLSH.
     */
    public static VirtualTable getMetricTable(String keyspace, String table, Function<TableMetrics, Metric> func, String pk)
    {
        TableMetadata.Builder metadata = TableMetadata.builder(keyspace, table)
                                                      .kind(TableMetadata.Kind.VIRTUAL)
                                                      .addPartitionKeyColumn(pk, ReversedType.getInstance(LongType.instance))
                                                      .addPartitionKeyColumn(KEYSPACE_NAME, UTF8Type.instance)
                                                      .addPartitionKeyColumn(TABLE_NAME, UTF8Type.instance)
                                                      .partitioner(PARTITIONER);

        Keyspace system = Keyspace.system().iterator().next();

        // Identify the type of Metric it is (gauge, counter etc) and verify the types work
        Metric test = func.apply(system.getColumnFamilyStores().iterator().next().metric);
        if(test instanceof Counting)
        {
            if (test instanceof Sampling)
            {
                metadata.addRegularColumn(MEDIAN, LongType.instance)
                        .addRegularColumn(P99, LongType.instance)
                        .addRegularColumn(MAX, LongType.instance);
            }
            if (test instanceof Metered)
            {
                metadata.addRegularColumn(RATE, DoubleType.instance);
            }
        }
        else if (test instanceof Gauge)
        {
            Preconditions.checkArgument(((Gauge) test).getValue().getClass().isAssignableFrom(Long.class));
        }

        // Create the VirtualTable that will walk through all tables and get the Metric for each to build the tables
        // SimpleDataSet
        return new AbstractVirtualTable(metadata.build())
        {
            public DataSet data()
            {
                SimpleDataSet result = new SimpleDataSet(metadata());
                for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
                {
                    Metric metric = func.apply(cfs.metric);

                    if(metric instanceof Counting)
                    {
                        Counting counting = (Counting) metric;
                        result.row(counting.getCount(), cfs.keyspace.getName(), cfs.name);
                        if (metric instanceof Sampling)
                        {
                            Sampling histo = (Sampling) metric;
                            Snapshot snapshot = histo.getSnapshot();
                            result.column(MEDIAN, (long) snapshot.getMedian())
                                  .column(P99, (long) snapshot.get99thPercentile())
                                  .column(MAX, (long) snapshot.getMax());
                        }
                        if (metric instanceof Metered)
                        {
                            Metered timer = (Metered) metric;
                            result.column(RATE, timer.getFiveMinuteRate());
                        }
                    }
                    else if (metric instanceof Gauge)
                    {
                        result.row(((Gauge) metric).getValue(), cfs.keyspace.getName(), cfs.name);
                    }
                    else if (metric instanceof Counter)
                    {
                        result.row(((Counter) metric).getCount(), cfs.keyspace.getName(), cfs.name);
                    }
                }
                return result;
            }
        };
    }

