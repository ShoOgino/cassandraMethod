    /**
     * get a list of columns starting from a given column, in a specified order.
     * only the latest version of a column is returned.
     * @return null if there is no data and no tombstones; otherwise a ColumnFamily
     */
    public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)
    {
        assert columnFamily_.equals(filter.getColumnFamilyName());

        long start = System.nanoTime();
        try
        {
            if (filter.path.superColumnName == null)
            {
                if (ssTables_.getRowCache().getCapacity() == 0)
                    return removeDeleted(getTopLevelColumns(filter, gcBefore), gcBefore);

                ColumnFamily cached = cacheRow(filter.key);
                ColumnIterator ci = filter.getMemColumnIterator(memtable_, cached, getComparator()); // TODO passing memtable here is confusing since it's almost entirely unused
                ColumnFamily returnCF = ci.getColumnFamily();
                filter.collectCollatedColumns(returnCF, ci, gcBefore);
                return removeDeleted(returnCF, gcBefore);
            }

            // we are querying subcolumns of a supercolumn: fetch the supercolumn with NQF, then filter in-memory.
            ColumnFamily cf;
            SuperColumn sc;
            if (ssTables_.getRowCache().getCapacity() == 0)
            {
                QueryFilter nameFilter = new NamesQueryFilter(filter.key, new QueryPath(columnFamily_), filter.path.superColumnName);
                cf = getTopLevelColumns(nameFilter, gcBefore);
                if (cf == null || cf.getColumnCount() == 0)
                    return cf;

                assert cf.getSortedColumns().size() == 1;
                sc = (SuperColumn)cf.getSortedColumns().iterator().next();
            }
            else
            {
                cf = cacheRow(filter.key);
                if (cf == null)
                    return null;
                sc = (SuperColumn)cf.getColumn(filter.path.superColumnName);
                if (sc == null)
                    return null;
                sc = (SuperColumn)sc.cloneMe();
            }
            
            SuperColumn scFiltered = filter.filterSuperColumn(sc, gcBefore);
            ColumnFamily cfFiltered = cf.cloneMeShallow();
            cfFiltered.addColumn(scFiltered);
            return removeDeleted(cfFiltered, gcBefore);
        }
        finally
        {
            readStats_.addNano(System.nanoTime() - start);
        }
    }

