    public synchronized void add(Collection<Range<Token>> ranges, long repairedAt)
    {
        Level newLevel = new Level(ranges, repairedAt);

        State lastState = state;

        List<Level> tmp = new ArrayList<>(lastState.levels.size() + 1);
        tmp.addAll(lastState.levels);
        tmp.add(newLevel);
        tmp.sort(Level.timeComparator);

        List<Level> levels = new ArrayList<>(lastState.levels.size() + 1);
        List<Range<Token>> covered = new ArrayList<>();

        for (Level level : tmp)
        {
            Level subtracted = level.subtract(covered);
            if (subtracted == null)
                continue;

            levels.add(subtracted);

            covered.addAll(subtracted.ranges);
            covered = Range.normalize(covered);
        }

        List<Section> sections = new ArrayList<>();
        for (Level level : levels)
        {
            for (Range<Token> range : level.ranges)
            {
                sections.add(new Section(range, level.repairedAt));
            }
        }
        sections.sort(Section.tokenComparator);

        state = new State(levels, covered, sections);
    }

