    public static <TL, TR> int compareMaps(AbstractType<?> keysComparator, AbstractType<?> valuesComparator, TL left, ValueAccessor<TL> accessorL, TR right, ValueAccessor<TR> accessorR)
    {
        if (accessorL.isEmpty(left) || accessorR.isEmpty(right))
            return Boolean.compare(accessorR.isEmpty(right), accessorL.isEmpty(left));


        ProtocolVersion protocolVersion = ProtocolVersion.V3;
        int sizeL = CollectionSerializer.readCollectionSize(left, accessorL, protocolVersion);
        int sizeR = CollectionSerializer.readCollectionSize(right, accessorR, protocolVersion);

        int offsetL = CollectionSerializer.sizeOfCollectionSize(sizeL, protocolVersion);
        int offsetR = CollectionSerializer.sizeOfCollectionSize(sizeR, protocolVersion);

        for (int i = 0; i < Math.min(sizeL, sizeR); i++)
        {
            TL k1 = CollectionSerializer.readValue(left, accessorL, offsetL, protocolVersion);
            offsetL += CollectionSerializer.sizeOfValue(k1, accessorL, protocolVersion);
            TR k2 = CollectionSerializer.readValue(right, accessorR, offsetR, protocolVersion);
            offsetR += CollectionSerializer.sizeOfValue(k2, accessorR, protocolVersion);
            int cmp = keysComparator.compare(k1, accessorL, k2, accessorR);
            if (cmp != 0)
                return cmp;

            TL v1 = CollectionSerializer.readValue(left, accessorL, offsetL, protocolVersion);
            offsetL += CollectionSerializer.sizeOfValue(v1, accessorL, protocolVersion);
            TR v2 = CollectionSerializer.readValue(right, accessorR, offsetR, protocolVersion);
            offsetR += CollectionSerializer.sizeOfValue(v2, accessorR, protocolVersion);
            cmp = valuesComparator.compare(v1, accessorL, v2, accessorR);
            if (cmp != 0)
                return cmp;
        }

        return sizeL == sizeR ? 0 : (sizeL < sizeR ? -1 : 1);
    }

