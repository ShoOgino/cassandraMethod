    /**
     * Deserialize columns from low-level representation
     *
     * @return Thrift-based deserialized representation of the column
     */
    public static List<ColumnDef> fromSchema(ColumnFamily columns)
    {

        if (columns == null || columns.isEmpty())
            return Collections.emptyList();

        // contenders to be a valid columns, re-check is done after all attributes
        // were read from serialized state, if ColumnDef has all required fields it gets promoted to be returned
        Map<String, ColumnDef> contenders = new HashMap<String, ColumnDef>();

        for (IColumn column : columns.getSortedColumns())
        {
            if (column.isMarkedForDelete())
                continue;

            // column name format <cf>:<column name>:<attribute name>
            String[] components = columns.getComparator().getString(column.name()).split(":");
            assert components.length == 3;

            ColumnDef columnDef = contenders.get(components[1]);

            if (columnDef == null)
            {
                columnDef = new ColumnDef();
                contenders.put(components[1], columnDef);
            }

            ColumnDef._Fields field = ColumnDef._Fields.findByName(components[2]);

            // this means that given field was deprecated
            // but still exists in the serialized schema
            if (field == null)
                continue;

            columnDef.setFieldValue(field, deserializeValue(column.value(), getValueClass(ColumnDef.class, field.getFieldName())));
        }

        List<ColumnDef> columnDefs = new ArrayList<ColumnDef>();

        for (ColumnDef columnDef : contenders.values())
        {
            if (columnDef.isSetName() && columnDef.isSetValidation_class())
                columnDefs.add(columnDef);
        }

        return columnDefs;
    }

