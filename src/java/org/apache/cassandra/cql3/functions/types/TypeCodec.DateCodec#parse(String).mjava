        @Override
        public LocalDate parse(String value)
        {
            if (value == null || value.isEmpty() || value.equalsIgnoreCase("NULL")) return null;

            // single quotes are optional for long literals, mandatory for date patterns
            // strip enclosing single quotes, if any
            if (ParseUtils.isQuoted(value)) value = ParseUtils.unquote(value);

            if (ParseUtils.isLongLiteral(value))
            {
                long unsigned;
                try
                {
                    unsigned = Long.parseLong(value);
                }
                catch (NumberFormatException e)
                {
                    throw new InvalidTypeException(
                    String.format("Cannot parse date value from \"%s\"", value), e);
                }
                try
                {
                    int days = CodecUtils.fromCqlDateToDaysSinceEpoch(unsigned);
                    return LocalDate.fromDaysSinceEpoch(days);
                }
                catch (IllegalArgumentException e)
                {
                    throw new InvalidTypeException(
                    String.format("Cannot parse date value from \"%s\"", value), e);
                }
            }

            try
            {
                Date date = ParseUtils.parseDate(value, pattern);
                return LocalDate.fromMillisSinceEpoch(date.getTime());
            }
            catch (ParseException e)
            {
                throw new InvalidTypeException(
                String.format("Cannot parse date value from \"%s\"", value), e);
            }
        }

