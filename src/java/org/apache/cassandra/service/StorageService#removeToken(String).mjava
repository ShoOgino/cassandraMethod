    public void removeToken(String tokenString)
    {
        Token token = partitioner_.getTokenFactory().fromString(tokenString);

        // Here we could refuse the operation from continuing if we
        // cannot find the endpoint for this token from metadata, but
        // that would prevent this command from being issued by a node
        // that has never seen the failed node.
        InetAddress endpoint = tokenMetadata_.getEndpoint(token);
        if (endpoint != null)
        {
            if (endpoint.equals(FBUtilities.getLocalAddress()))
                throw new UnsupportedOperationException("Cannot remove node's own token");

            // Let's make sure however that we're not removing a live
            // token (member)
            if (Gossiper.instance.getLiveMembers().contains(endpoint))
                throw new UnsupportedOperationException("Node " + endpoint + " is alive and owns this token. Use decommission command to remove it from the ring");

            removeEndpointLocally(endpoint);
            calculatePendingRanges();
        }

        // bundle two states together. include this nodes state to keep the status quo, but indicate the leaving token so that it can be dealt with.
        Gossiper.instance.addLocalApplicationState(ApplicationState.STATE_MOVE, stateFactory.removeNonlocal(getLocalToken(), token));
    }

