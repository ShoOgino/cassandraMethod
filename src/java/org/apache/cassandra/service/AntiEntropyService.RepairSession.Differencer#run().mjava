            /**
             * Compares our trees, and triggers repairs for any ranges that mismatch.
             */
            public void run()
            {
                InetAddress local = FBUtilities.getLocalAddress();

                // restore partitioners (in case we were serialized)
                if (ltree.partitioner() == null)
                    ltree.partitioner(StorageService.getPartitioner());
                if (rtree.partitioner() == null)
                    rtree.partitioner(StorageService.getPartitioner());

                // compare trees, and collect differences
                differences.addAll(MerkleTree.difference(ltree, rtree));

                // choose a repair method based on the significance of the difference
                String format = "Endpoints " + local + " and " + remote + " %s for " + cfname + " on " + range;
                if (differences.isEmpty())
                {
                    logger.info(String.format(format, "are consistent"));
                    completed(remote, cfname);
                    return;
                }

                // non-0 difference: perform streaming repair
                logger.info(String.format(format, "have " + differences.size() + " range(s) out of sync"));
                try
                {
                    performStreamingRepair();
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }

