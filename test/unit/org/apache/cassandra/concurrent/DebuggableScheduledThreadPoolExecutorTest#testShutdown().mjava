    @Test
    public void testShutdown() throws ExecutionException, InterruptedException, IOException
    {
        DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool");

        final AtomicInteger value = new AtomicInteger(0);

        //Normal scheduled task
        ScheduledFuture future = testPool.schedule(new Runnable()
        {
            public void run()
            {
                value.incrementAndGet();
            }
        }, 1, TimeUnit.SECONDS);

        future.get();
        assert value.get() == 1;


        //Shut down before schedule
        future = testPool.schedule(new Runnable()
        {
            public void run()
            {
                value.incrementAndGet();
            }
        }, 10, TimeUnit.SECONDS);


        StorageService.instance.drain();
        testPool.shutdown();

        future.get();
        assert value.get() == 2;


        //Now shut down verify task isn't just swallowed
        future = testPool.schedule(new Runnable()
        {
            public void run()
            {
                value.incrementAndGet();
            }
        }, 1, TimeUnit.SECONDS);


        try
        {
            future.get(2, TimeUnit.SECONDS);
            Assert.fail("Task should be cancelled");
        }
        catch (CancellationException e)
        {

        }
        catch (TimeoutException e)
        {
            Assert.fail("Task should be cancelled");
        }

        assert future.isCancelled();
        assert value.get() == 2;
    }

