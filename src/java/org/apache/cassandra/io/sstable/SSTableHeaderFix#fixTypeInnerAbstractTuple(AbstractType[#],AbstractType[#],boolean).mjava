    private AbstractType<?> fixTypeInnerAbstractTuple(AbstractType<?> typeInHeader, AbstractType<?> typeInSchema, boolean droppedColumnMode)
    {
        // This first 'if' handles the case when a UDT has been dropped, as a dropped UDT is recorded as a tuple
        // in dropped_columns. If a UDT is to be replaced with a tuple, then also do that for the inner UDTs.
        if (droppedColumnMode && typeInHeader.getClass() == UserType.class && typeInSchema instanceof TupleType)
            return fixTypeInnerUserTypeDropped((UserType) typeInHeader, (TupleType) typeInSchema);

        if (typeInHeader.getClass() != typeInSchema.getClass())
            return null;

        if (typeInHeader.getClass() == UserType.class)
            return fixTypeInnerUserType((UserType) typeInHeader, (UserType) typeInSchema);

        if (typeInHeader.getClass() == TupleType.class)
            return fixTypeInnerTuple((TupleType) typeInHeader, (TupleType) typeInSchema, droppedColumnMode);

        throw new IllegalArgumentException("Unknown tuple type class " + typeInHeader.getClass().getName());
    }

