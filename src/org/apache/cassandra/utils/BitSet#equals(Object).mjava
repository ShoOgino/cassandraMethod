    /**
     * Compares this object against the specified object. The result is
     * <code>true</code> if and only if the argument is not <code>null</code>
     * and is a <code>Bitset</code> object that has exactly the same set of
     * bits set to <code>true</code> as this bit set. That is, for every
     * nonnegative <code>int</code> index <code>k</code>,
     * 
     * <pre>
     * ((BitSet) obj).get(k) == this.get(k)
     * </pre>
     * 
     * must be true. The current sizes of the two bit sets are not compared.
     * <p>
     * Overrides the <code>equals</code> method of <code>Object</code>.
     * 
     * @param obj
     *            the object to compare with.
     * @return <code>true</code> if the objects are the same;
     *         <code>false</code> otherwise.
     * @see java.util.BitSet#size()
     */
    public boolean equals(Object obj)
    {
        if (!(obj instanceof BitSet))
            return false;
        if (this == obj)
            return true;
        
        BitSet set = (BitSet) obj;
        
        checkInvariants();
        set.checkInvariants();
        
        if (wordsInUse != set.wordsInUse)
            return false;
        
        // Check words in use by both BitSets
        for (int i = 0; i < wordsInUse; i++)
            if (words[i] != set.words[i])
                return false;
        
        return true;
    }

