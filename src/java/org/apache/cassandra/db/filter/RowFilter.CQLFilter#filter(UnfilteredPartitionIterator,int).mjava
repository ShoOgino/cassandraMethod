        public UnfilteredPartitionIterator filter(UnfilteredPartitionIterator iter, int nowInSec)
        {
            if (expressions.isEmpty())
                return iter;

            final CFMetaData metadata = iter.metadata();
            long numberOfStaticColumnExpressions = expressions.stream().filter(e -> e.column.isStatic()).count();
            final boolean filterStaticColumns = numberOfStaticColumnExpressions != 0;
            final boolean filterNonStaticColumns = (expressions.size() - numberOfStaticColumnExpressions) > 0;

            class IsSatisfiedFilter extends Transformation<UnfilteredRowIterator>
            {
                DecoratedKey pk;
                public UnfilteredRowIterator applyToPartition(UnfilteredRowIterator partition)
                {
                    // The filter might be on static columns, so need to check static row first.
                    if (filterStaticColumns && applyToRow(partition.staticRow()) == null)
                    {
                        partition.close();
                        return null;
                    }

                    pk = partition.partitionKey();
                    UnfilteredRowIterator iterator = Transformation.apply(partition, this);

                    if (filterNonStaticColumns && !iterator.hasNext())
                    {
                        iterator.close();
                        return null;
                    }

                    return iterator;
                }

                public Row applyToRow(Row row)
                {
                    Row purged = row.purge(DeletionPurger.PURGE_ALL, nowInSec, metadata.enforceStrictLiveness());
                    if (purged == null)
                        return null;

                    for (Expression e : expressions)
                        if (!e.isSatisfiedBy(metadata, pk, purged))
                            return null;
                    return row;
                }
            }

            return Transformation.apply(iter, new IsSatisfiedFilter());
        }

