    /**
     * Find location which is capable of holding given {@code estimatedSize}.
     * First it looks through for directory with no current task running and
     * the most free space available.
     * If no such directory is available, it just chose the one with the most
     * free space available.
     * If no directory can hold given {@code estimatedSize}, then returns null.
     *
     * @param estimatedSize estimated size you need to find location to fit
     * @return directory capable of given estimated size, or null if none found
     */
    public static DataDirectory getLocationCapableOfSize(long estimatedSize)
    {
        // sort by available disk space
        SortedSet<DataDirectory> directories = ImmutableSortedSet.copyOf(dataFileLocations);

        // if there is disk with sufficient space and no activity running on it, then use it
        for (DataDirectory directory : directories)
        {
            long spaceAvailable = directory.getEstimatedAvailableSpace();
            if (estimatedSize < spaceAvailable && directory.currentTasks.get() == 0)
                return directory;
        }

        // if not, use the one that has largest free space
        if (estimatedSize < directories.first().getEstimatedAvailableSpace())
            return directories.first();
        else
            return null;
    }

