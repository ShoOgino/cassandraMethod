    /**
     * Consumes bytes in the stream until the given length
     *
     * @param writer
     * @param len
     * @return
     * @throws IOException
     */
    public long consumeUntil(BufferedDataOutputStreamPlus writer, long len) throws IOException
    {
        long copied = 0; // number of bytes copied
        while (copied < len)
        {
            if (buffer.remaining() == 0)
            {
                try
                {
                    reBuffer();
                }
                catch (EOFException e)
                {
                    throw new EOFException("EOF after " + copied + " bytes out of " + len);
                }
                if (buffer.remaining() == 0 && copied < len)
                    throw new AssertionError("reBuffer() failed to return data");
            }

            int originalLimit = buffer.limit();
            int toCopy = (int) Math.min(len - copied, buffer.remaining());
            buffer.limit(buffer.position() + toCopy);
            int written = writer.applyToChannel(c -> c.write(buffer));
            buffer.limit(originalLimit);
            copied += written;
        }

        return copied;
    }

