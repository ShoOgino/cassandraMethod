    @Test
    public void testDescribeFunctionAndAggregate() throws Throwable
    {
        String fNonOverloaded = createFunction(KEYSPACE,
                                               "",
                                               "CREATE OR REPLACE FUNCTION %s() " +
                                               "CALLED ON NULL INPUT " +
                                               "RETURNS int " +
                                               "LANGUAGE java " +
                                               "AS 'throw new RuntimeException();';");

        String fOverloaded = createFunction(KEYSPACE,
                                            "int, ascii",
                                            "CREATE FUNCTION %s (input int, other_in ascii) " +
                                            "RETURNS NULL ON NULL INPUT " +
                                            "RETURNS text " +
                                            "LANGUAGE java " +
                                            "AS 'return \"Hello World\";'");
        createFunctionOverload(fOverloaded,
                               "text, ascii",
                               "CREATE FUNCTION %s (input text, other_in ascii) " +
                               "RETURNS NULL ON NULL INPUT " +
                               "RETURNS text " +
                               "LANGUAGE java " +
                               "AS 'return \"Hello World\";'");

        for (String describeKeyword : new String[]{"DESCRIBE", "DESC"})
        {
            assertRowsNet(executeDescribeNet(describeKeyword + " FUNCTION " + fNonOverloaded),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fNonOverloaded) + "()",
                              "CREATE FUNCTION " + fNonOverloaded + "()\n" +
                                      "    CALLED ON NULL INPUT\n" +
                                      "    RETURNS int\n" +
                                      "    LANGUAGE java\n" +
                                  "    AS $$throw new RuntimeException();$$;"));

            assertRowsNet(executeDescribeNet(describeKeyword + " FUNCTION " + fOverloaded),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fOverloaded) + "(int, ascii)",
                              "CREATE FUNCTION " + fOverloaded + "(input int, other_in ascii)\n" +
                                      "    RETURNS NULL ON NULL INPUT\n" +
                                      "    RETURNS text\n" +
                                      "    LANGUAGE java\n" +
                                  "    AS $$return \"Hello World\";$$;"),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fOverloaded) + "(text, ascii)",
                              "CREATE FUNCTION " + fOverloaded + "(input text, other_in ascii)\n" +
                                      "    RETURNS NULL ON NULL INPUT\n" +
                                      "    RETURNS text\n" +
                                      "    LANGUAGE java\n" +
                                  "    AS $$return \"Hello World\";$$;"));

            assertRowsNet(executeDescribeNet(describeKeyword + " FUNCTIONS"),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fNonOverloaded) + "()"),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fOverloaded) + "(int, ascii)"),
                          row(KEYSPACE,
                              "function",
                              shortFunctionName(fOverloaded) + "(text, ascii)"));
        }

        String fIntState = createFunction(KEYSPACE,
                                          "int, int",
                                          "CREATE FUNCTION %s (state int, add_to int) " +
                                          "CALLED ON NULL INPUT " +
                                          "RETURNS int " +
                                          "LANGUAGE java " +
                                          "AS 'return state + add_to;'");
        String fFinal = createFunction(KEYSPACE,
                                       "int",
                                       "CREATE FUNCTION %s (state int) " +
                                       "RETURNS NULL ON NULL INPUT " +
                                       "RETURNS int " +
                                       "LANGUAGE java " +
                                       "AS 'return state;'");

        String aNonDeterministic = createAggregate(KEYSPACE,
                                                   "int",
                                                   format("CREATE AGGREGATE %%s(int) " +
                                                                 "SFUNC %s " +
                                                                 "STYPE int " +
                                                                 "INITCOND 42",
                                                                 shortFunctionName(fIntState)));
        String aDeterministic = createAggregate(KEYSPACE,
                                                "int",
                                                format("CREATE AGGREGATE %%s(int) " +
                                                              "SFUNC %s " +
                                                              "STYPE int " +
                                                              "FINALFUNC %s ",
                                                              shortFunctionName(fIntState),
                                                              shortFunctionName(fFinal)));

        for (String describeKeyword : new String[]{"DESCRIBE", "DESC"})
        {
            assertRowsNet(executeDescribeNet(describeKeyword + " AGGREGATE " + aNonDeterministic),
                          row(KEYSPACE,
                              "aggregate",
                              shortFunctionName(aNonDeterministic) + "(int)",
                              "CREATE AGGREGATE " + aNonDeterministic + "(int)\n" +
                                      "    SFUNC " + shortFunctionName(fIntState) + "\n" +
                                      "    STYPE int\n" +
                                  "    INITCOND 42;"));
            assertRowsNet(executeDescribeNet(describeKeyword + " AGGREGATE " + aDeterministic),
                          row(KEYSPACE,
                              "aggregate",
                              shortFunctionName(aDeterministic) + "(int)",
                              "CREATE AGGREGATE " + aDeterministic + "(int)\n" +
                                      "    SFUNC " + shortFunctionName(fIntState) + "\n" +
                                      "    STYPE int\n" +
                                      "    FINALFUNC " + shortFunctionName(fFinal) + ";"));
            assertRowsNet(executeDescribeNet(describeKeyword + " AGGREGATES"),
                          row(KEYSPACE,
                              "aggregate",
                              shortFunctionName(aNonDeterministic) + "(int)"),
                          row(KEYSPACE,
                              "aggregate",
                              shortFunctionName(aDeterministic) + "(int)"));
        }
    }

