  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STRATEGY_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.strategy_class = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STRATEGY_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
              this.strategy_options = new HashMap<String,String>(2*_map64.size);
              for (int _i65 = 0; _i65 < _map64.size; ++_i65)
              {
                String _key66; // required
                String _val67; // required
                _key66 = iprot.readString();
                _val67 = iprot.readString();
                this.strategy_options.put(_key66, _val67);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CF_DEFS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
              this.cf_defs = new ArrayList<CfDef>(_list68.size);
              for (int _i69 = 0; _i69 < _list68.size; ++_i69)
              {
                CfDef _elem70; // required
                _elem70 = new CfDef();
                _elem70.read(iprot);
                this.cf_defs.add(_elem70);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DURABLE_WRITES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.durable_writes = iprot.readBool();
            setDurable_writesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

