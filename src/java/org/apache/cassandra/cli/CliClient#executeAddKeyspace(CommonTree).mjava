    /**
     * Add a keyspace
     * @throws TException
     * @throws InvalidRequestException 
     * @throws NotFoundException 
     */
    private void executeAddKeyspace(CommonTree ast) throws TException, InvalidRequestException, NotFoundException
    {

        if (!CliMain.isConnected())
        {
            return;
        }
        CommonTree newKSSpec = (CommonTree)ast.getChild(0);

        //parser send the keyspace, plus a series of key value pairs, ie should always be an odd number...
        assert(newKSSpec.getChildCount() > 0);
        assert(newKSSpec.getChildCount() % 2 == 1);

        //defaults
        String replicaPlacementStrategy = "org.apache.cassandra.locator.SimpleStrategy";
        int replicationFactor = 2;

        /*
         * first value is the keyspace name, after that it is all key=value
         */
        String keyspaceName = newKSSpec.getChild(0).getText();
        int argumentLength = newKSSpec.getChildCount();

        for(int i = 1; i < argumentLength; i = i + 2)
        {
            AddKeyspaceArgument mArgument = AddKeyspaceArgument.valueOf(newKSSpec.getChild(i).getText().toUpperCase());
            String mValue = newKSSpec.getChild(i + 1).getText();

            switch(mArgument)
            {
            case PLACEMENT_STRATEGY:
                replicaPlacementStrategy = CliUtils.unescapeSQLString(mValue);
                break;
            case REPLICATION_FACTOR:
                replicationFactor = Integer.parseInt( mValue);
                break;
            default:
                //must match one of the above or we'd throw an exception at the valueOf statement above.
                assert(false);
            }
        }
        List<CfDef> mList = new LinkedList<CfDef>();
        KsDef ks_def = new KsDef(keyspaceName, replicaPlacementStrategy, replicationFactor, mList);
        css_.out.println(thriftClient_.system_add_keyspace(ks_def));

        keyspacesMap.put(keyspaceName, thriftClient_.describe_keyspace(keyspaceName));
    }

