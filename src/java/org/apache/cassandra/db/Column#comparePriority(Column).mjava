    // note that we do not call this simply compareTo since it also makes sense to compare Columns by name
    public ClockRelationship comparePriority(Column o)
    {
        ClockRelationship rel = clock.compare(o.clock());

        // tombstone always wins ties.
        if (isMarkedForDelete())
        {
            switch (rel)
            {
                case EQUAL:
                    return ClockRelationship.GREATER_THAN;
                default:
                    return rel;
            }
        }
        if (o.isMarkedForDelete())
        {
            switch (rel)
            {
                case EQUAL:
                    return ClockRelationship.LESS_THAN;
                default:
                    return rel;
            }
        }

        // compare value as tie-breaker for equal clocks
        if (ClockRelationship.EQUAL == rel)
        {
            int valRel = FBUtilities.compareByteArrays(value, o.value);
            if (1 == valRel)
                return ClockRelationship.GREATER_THAN;
            if (0 == valRel)
                return ClockRelationship.EQUAL;
            // -1 == valRel
            return ClockRelationship.LESS_THAN;
        }

        // neither is tombstoned and clocks are different
        return rel;
    }

