    private static void fixSchemaNanoTimestamp(String columnFamily)
    {
        ColumnFamilyStore cfs = Table.open(Table.SYSTEM_KS).getColumnFamilyStore(columnFamily);

        boolean needsCleanup = false;
        Date now = new Date();

        List<Row> rows = SystemTable.serializedSchema(columnFamily);

        row_check_loop:
        for (Row row : rows)
        {
            if (Schema.invalidSchemaRow(row))
                continue;

            for (IColumn column : row.cf.columns)
            {
                Date columnDate = new Date(column.timestamp());

                if (columnDate.after(now))
                {
                    Date micros = new Date(column.timestamp() / 1000); // assume that it was in micros

                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(micros);

                    if ((micros.before(now) && calendar.get(Calendar.YEAR) == 1970) || micros.after(now))
                    {
                        needsCleanup = true;
                        break row_check_loop;
                    }
                }
                else // millis and we have to fix it to micros
                {
                    needsCleanup = true;
                    break row_check_loop;
                }
            }
        }

        if (!needsCleanup)
            return;

        logger.info("Fixing timestamps of schema ColumnFamily " + columnFamily + "...");

        try
        {
            cfs.truncate().get();
        }
        catch (ExecutionException e)
        {
            throw new RuntimeException(e);
        }
        catch (InterruptedException e)
        {
            throw new AssertionError(e);
        }

        long microTimestamp = now.getTime() * 1000;

        for (Row row : rows)
        {
            if (Schema.invalidSchemaRow(row))
                continue;

            RowMutation mutation = new RowMutation(Table.SYSTEM_KS, row.key.key);

            for (IColumn column : row.cf.columns)
            {
                if (column.isLive())
                    mutation.add(new QueryPath(columnFamily, null, column.name()), column.value(), microTimestamp);
            }

            mutation.apply();
        }
        // flush immediately because we read schema before replaying the commitlog
        try
        {
            cfs.forceBlockingFlush();
        }
        catch (ExecutionException e)
        {
            throw new RuntimeException("Could not flush after fixing schema timestamps", e);
        }
        catch (InterruptedException e)
        {
            throw new AssertionError(e);
        }
    }

