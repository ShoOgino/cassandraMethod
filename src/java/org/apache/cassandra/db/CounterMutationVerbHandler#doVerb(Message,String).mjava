    public void doVerb(final Message message, final String id)
    {
        byte[] bytes = message.getMessageBody();
        FastByteArrayInputStream buffer = new FastByteArrayInputStream(bytes);

        try
        {
            DataInputStream is = new DataInputStream(buffer);
            final CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
            if (logger.isDebugEnabled())
              logger.debug("Applying forwarded " + cm);

            String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
            // We should not wait for the result of the write in this thread,
            // otherwise we could have a distributed deadlock between replicas
            // running this VerbHandler (see #4578).
            // Instead, we use a callback to send the response. Note that the callback
            // will not be called if the request timeout, but this is ok
            // because the coordinator of the counter mutation will timeout on
            // it's own in that case.
            StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter, new Runnable(){
                public void run()
                {
                    try
                    {
                        WriteResponse response = new WriteResponse(cm.getTable(), cm.key(), true);
                        Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
                        MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
                    }
                    catch (IOException e)
                    {
                        logger.error("Error writing response to counter mutation", e);
                    }
                }
            });
        }
        catch (UnavailableException e)
        {
            // We check for UnavailableException in the coordinator not. It is
            // hence reasonable to let the coordinator timeout in the very
            // unlikely case we arrive here
        }
        catch (TimeoutException e)
        {
            // The coordinator will timeout on it's own so ignore
        }
        catch (IOException e)
        {
            logger.error("Error in counter mutation", e);
        }
    }

