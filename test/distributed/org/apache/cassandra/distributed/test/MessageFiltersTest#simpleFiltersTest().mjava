    @Test
    public void simpleFiltersTest() throws Throwable
    {
        int VERB1 = MessagingService.Verb.READ.ordinal();
        int VERB2 = MessagingService.Verb.REQUEST_RESPONSE.ordinal();
        int VERB3 = MessagingService.Verb.READ_REPAIR.ordinal();
        int i1 = 1;
        int i2 = 2;
        int i3 = 3;
        String MSG1 = "msg1";
        String MSG2 = "msg2";

        MessageFilters filters = new MessageFilters();
        MessageFilters.Filter filter = filters.allVerbs().from(1).drop();

        Assert.assertFalse(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertFalse(filters.permit(i1, i2, msg(VERB2, MSG1)));
        Assert.assertFalse(filters.permit(i1, i2, msg(VERB3, MSG1)));
        Assert.assertTrue(filters.permit(i2, i1, msg(VERB1, MSG1)));
        filter.off();
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB1, MSG1)));
        filters.reset();

        filters.verbs(VERB1).from(1).to(2).drop();
        Assert.assertFalse(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB2, MSG1)));
        Assert.assertTrue(filters.permit(i2, i1, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i2, i3, msg(VERB2, MSG1)));

        filters.reset();
        AtomicInteger counter = new AtomicInteger();
        filters.verbs(VERB1).from(1).to(2).messagesMatching((from, to, msg) -> {
            counter.incrementAndGet();
            return Arrays.equals(msg.bytes(), MSG1.getBytes());
        }).drop();
        Assert.assertFalse(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertEquals(counter.get(), 1);
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB1, MSG2)));
        Assert.assertEquals(counter.get(), 2);

        // filter chain gets interrupted because a higher level filter returns no match
        Assert.assertTrue(filters.permit(i2, i1, msg(VERB1, MSG1)));
        Assert.assertEquals(counter.get(), 2);
        Assert.assertTrue(filters.permit(i2, i1, msg(VERB2, MSG1)));
        Assert.assertEquals(counter.get(), 2);
        filters.reset();

        filters.allVerbs().from(3, 2).to(2, 1).drop();
        Assert.assertFalse(filters.permit(i3, i1, msg(VERB1, MSG1)));
        Assert.assertFalse(filters.permit(i3, i2, msg(VERB1, MSG1)));
        Assert.assertFalse(filters.permit(i2, i1, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i2, i3, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i1, i3, msg(VERB1, MSG1)));
        filters.reset();

        counter.set(0);
        filters.allVerbs().from(1).to(2).messagesMatching((from, to, msg) -> {
            counter.incrementAndGet();
            return false;
        }).drop();
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i1, i3, msg(VERB1, MSG1)));
        Assert.assertTrue(filters.permit(i1, i2, msg(VERB1, MSG1)));
        Assert.assertEquals(2, counter.get());
    }

