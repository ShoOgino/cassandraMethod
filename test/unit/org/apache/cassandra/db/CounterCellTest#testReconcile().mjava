    @Test
    public void testReconcile()
    {
        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COUNTER1);
        ColumnDefinition cDef = Keyspace.open(KEYSPACE1).getColumnFamilyStore(STANDARD1).metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
        ByteBuffer col = ByteBufferUtil.bytes("c1");

        AbstractCell left;
        AbstractCell right;

        // both deleted, diff deletion time, same ts
        left = createLegacyCounterCell(cfs, col, 1, 2, 0, 5);
        right = createLegacyCounterCell(cfs, col, 1, 2, 0, 10);
        assert Cells.reconcile(left, right, 10) == right;

        // diff ts
        right = createLegacyCounterCell(cfs, col, 1, 1, 0, 10);
        assert Cells.reconcile(left, right, 10) == left;

        // < tombstone
        left = new CellTest.TestCell(cDef, ByteBufferUtil.bytes(5L), SimpleLivenessInfo.forDeletion(6, 6));
        right = createLegacyCounterCell(cfs, col, 1, 5, 0, 5);
        assert Cells.reconcile(left, right, 10) == left;

        // > tombstone
        left = new CellTest.TestCell(cDef, ByteBufferUtil.bytes(5L), SimpleLivenessInfo.forDeletion(1, 1));
        right = createLegacyCounterCell(cfs, col, 1, 5, 0, Integer.MAX_VALUE);
        assert Cells.reconcile(left, right, 10) == left;

        // == tombstone
        left = new CellTest.TestCell(cDef, ByteBufferUtil.bytes(5L), SimpleLivenessInfo.forDeletion(8, 8));
        right = createLegacyCounterCell(cfs, col, 1, 8, 0, Integer.MAX_VALUE);
        assert Cells.reconcile(left, right, 10) == left;

        // live + live
        left = createLegacyCounterCell(cfs, col, 1, 2, 0, Integer.MAX_VALUE);
        right = createLegacyCounterCell(cfs, col, 3, 5, 0, Integer.MAX_VALUE);
        Cell reconciled = Cells.reconcile(left, right, 10);
        assertEquals(CounterContext.instance().total(reconciled.value()), 4);
        assertEquals(reconciled.livenessInfo().timestamp(), 5L);

        // Add, don't change TS
        Cell addTen = createLegacyCounterCell(cfs, col, 10, 4, 0, Integer.MAX_VALUE);
        reconciled = Cells.reconcile(reconciled, addTen, 10);
        assertEquals(CounterContext.instance().total(reconciled.value()), 14);
        assertEquals(reconciled.livenessInfo().timestamp(), 5L);

        // Add w/new TS
        Cell addThree = createLegacyCounterCell(cfs, col, 3, 7, 0, Integer.MAX_VALUE);
        reconciled = Cells.reconcile(reconciled, addThree, 10);
        assertEquals(CounterContext.instance().total(reconciled.value()), 17);
        assertEquals(reconciled.livenessInfo().timestamp(), 7L);

        // Confirm no deletion time
        assert reconciled.livenessInfo().localDeletionTime() == Integer.MAX_VALUE;

        Cell deleted = createLegacyCounterCell(cfs, col, 2, 8, 0, 8);
        reconciled = Cells.reconcile(reconciled, deleted, 10);
        assertEquals(2, CounterContext.instance().total(reconciled.value()));
        assertEquals(reconciled.livenessInfo().timestamp(), 8L);
        assert reconciled.livenessInfo().localDeletionTime() == 8;
    }

