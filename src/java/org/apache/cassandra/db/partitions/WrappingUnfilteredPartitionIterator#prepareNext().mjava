    private void prepareNext()
    {
        while (next == null && wrapped.hasNext())
        {
            @SuppressWarnings("resource") // Closed on exception, right away if empty or ignored by computeNext, or if assigned to 'next',
                                          // either by the caller to next(), or in close().
            UnfilteredRowIterator wrappedNext = wrapped.next();
            try
            {
                UnfilteredRowIterator maybeNext = computeNext(wrappedNext);

                // As the wrappd iterator shouldn't return an empty iterator, if computeNext
                // gave us back it's input we save the isEmpty check.
                if (maybeNext != null && (isForThrift() || maybeNext == wrappedNext || !maybeNext.isEmpty()))
                {
                    next = maybeNext;
                    return;
                }
                else
                {
                    wrappedNext.close();
                }
            }
            catch (RuntimeException | Error e)
            {
                wrappedNext.close();
                throw e;
            }
        }
    }

