    private Bootstrap buildBootstrap(boolean compress)
    {
        boolean tcpNoDelay = isLocalDC(connectionId.local(), connectionId.remote()) ? INTRADC_TCP_NODELAY : DatabaseDescriptor.getInterDCTcpNoDelay();
        int sendBufferSize = DatabaseDescriptor.getInternodeSendBufferSize() > 0
                             ? DatabaseDescriptor.getInternodeSendBufferSize()
                             : OutboundConnectionParams.DEFAULT_SEND_BUFFER_SIZE;

        int tcpConnectTimeout = DatabaseDescriptor.getInternodeTcpConnectTimeoutInMS();
        int tcpUserTimeout = DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();

        OutboundConnectionParams params = OutboundConnectionParams.builder()
                                                                  .connectionId(connectionId)
                                                                  .callback(this::finishHandshake)
                                                                  .encryptionOptions(encryptionOptions)
                                                                  .mode(Mode.MESSAGING)
                                                                  .compress(compress)
                                                                  .coalescingStrategy(coalescingStrategy)
                                                                  .sendBufferSize(sendBufferSize)
                                                                  .tcpNoDelay(tcpNoDelay)
                                                                  .tcpConnectTimeoutInMS(tcpConnectTimeout)
                                                                  .tcpUserTimeoutInMS(tcpUserTimeout)
                                                                  .backlogSupplier(() -> nextBackloggedMessage())
                                                                  .messageResultConsumer(this::handleMessageResult)
                                                                  .protocolVersion(targetVersion)
                                                                  .build();

        return NettyFactory.instance.createOutboundBootstrap(params);
    }

