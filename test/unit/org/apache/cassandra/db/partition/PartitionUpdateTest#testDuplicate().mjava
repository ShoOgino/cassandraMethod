    /**
     * Makes sure we merge duplicate rows, see CASSANDRA-15789
     */
    @Test
    public void testDuplicate()
    {
        createTable("CREATE TABLE %s (pk int, ck int, v map<text, text>, PRIMARY KEY (pk, ck))");
        CFMetaData cfm = currentTableMetadata();

        DecoratedKey dk = Murmur3Partitioner.instance.decorateKey(ByteBufferUtil.bytes(1));

        List<Row> rows = new ArrayList<>();
        Row.Builder builder = BTreeRow.unsortedBuilder(FBUtilities.nowInSeconds());
        builder.newRow(Clustering.make(ByteBufferUtil.bytes(2)));
        builder.addComplexDeletion(cfm.getColumnDefinition(ByteBufferUtil.bytes("v")), new DeletionTime(2, 1588586647));

        Cell c = BufferCell.live(cfm.getColumnDefinition(ByteBufferUtil.bytes("v")), 3, ByteBufferUtil.bytes("h"), CellPath.create(ByteBufferUtil.bytes("g")));
        builder.addCell(c);

        Row r = builder.build();
        rows.add(r);

        builder.newRow(Clustering.make(ByteBufferUtil.bytes(2)));
        builder.addRowDeletion(new Row.Deletion(new DeletionTime(1588586647, 1), false));
        r = builder.build();
        rows.add(r);

        RowAndDeletionMergeIterator rmi = new RowAndDeletionMergeIterator(cfm,
                                                                          dk,
                                                                          DeletionTime.LIVE,
                                                                          ColumnFilter.all(cfm),
                                                                          Rows.EMPTY_STATIC_ROW,
                                                                          false,
                                                                          EncodingStats.NO_STATS,
                                                                          rows.iterator(),
                                                                          Collections.emptyIterator(),
                                                                          true);

        PartitionUpdate pu = PartitionUpdate.fromPre30Iterator(rmi, ColumnFilter.all(cfm));
        pu.iterator();

        Mutation m = new Mutation(getCurrentColumnFamilyStore().keyspace.getName(), dk);
        m.add(pu);
        m.apply();
        getCurrentColumnFamilyStore().forceBlockingFlush();

        SSTableReader sst = getCurrentColumnFamilyStore().getLiveSSTables().iterator().next();
        int count = 0;
        try (ISSTableScanner scanner = sst.getScanner())
        {
            while (scanner.hasNext())
            {
                try (UnfilteredRowIterator iter = scanner.next())
                {
                    while (iter.hasNext())
                    {
                        iter.next();
                        count++;
                    }
                }
            }
        }
        assertEquals(1, count);
    }

