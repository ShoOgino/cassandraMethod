    public void run(CassandraClient client) throws IOException
    {
        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
            throw new RuntimeException("Super columns are not implemented for CQL");

        if (cqlQuery == null)
        {
            StringBuilder query = new StringBuilder("SELECT ");

            if (session.cqlVersion.startsWith("2"))
                query.append("FIRST ").append(session.getColumnsPerKey()).append(" ''..''");
            else
                query.append("*");

            String counterCF = session.cqlVersion.startsWith("2") ? "Counter1" : "Counter3";

            query.append(" FROM ").append(wrapInQuotesIfRequired(counterCF))
                                  .append(" USING CONSISTENCY ")
                                  .append(session.getConsistencyLevel().toString())
                                  .append(" WHERE KEY=?");

            cqlQuery = query.toString();
        }

        byte[] key = generateKey();
        String formattedQuery = null;

        long start = System.currentTimeMillis();

        boolean success = false;
        String exceptionMessage = null;

        for (int t = 0; t < session.getRetryTimes(); t++)
        {
            if (success)
                break;

            try
            {
                CqlResult result = null;

                if (session.usePreparedStatements())
                {
                    Integer stmntId = getPreparedStatement(client, cqlQuery);
                    result = client.execute_prepared_cql_query(stmntId,
                            Collections.singletonList(ByteBufferUtil.bytes(getUnQuotedCqlBlob(key))));
                }
                else
                {
                    if (formattedQuery == null)
                        formattedQuery = formatCqlQuery(cqlQuery, Collections.singletonList(getUnQuotedCqlBlob(key)));
                    result = client.execute_cql_query(ByteBuffer.wrap(formattedQuery.getBytes()),
                                                      Compression.NONE);
                }

                assert result.type.equals(CqlResultType.ROWS) : "expected ROWS result type";
                assert result.rows.size() == 0 : "expected exactly one row";
                success = (result.rows.get(0).columns.size() != 0);
            }
            catch (Exception e)
            {
                exceptionMessage = getExceptionMessage(e);
                success = false;
            }
        }

        if (!success)
        {
            error(String.format("Operation [%d] retried %d times - error reading counter key %s %s%n",
                                index,
                                session.getRetryTimes(),
                                new String(key),
                                (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
        }

        session.operations.getAndIncrement();
        session.keys.getAndIncrement();
        session.latency.getAndAdd(System.currentTimeMillis() - start);
    }

