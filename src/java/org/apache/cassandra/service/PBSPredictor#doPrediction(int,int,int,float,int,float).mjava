    public PBSPredictionResult doPrediction(int n,
                                            int r,
                                            int w,
                                            float timeSinceWrite,
                                            int numberVersionsStale,
                                            float percentileLatency) throws Exception
    {
        if (r > n)
            throw new IllegalArgumentException("r must be less than n");
        if (r < 0)
            throw new IllegalArgumentException("r must be positive");
        if (w > n)
            throw new IllegalArgumentException("w must be less than n");
        if (w < 0)
            throw new IllegalArgumentException("w must be positive");
        if (percentileLatency < 0 || percentileLatency > 1)
            throw new IllegalArgumentException("percentileLatency must be between 0 and 1 inclusive");
        if (numberVersionsStale < 0)
            throw new IllegalArgumentException("numberVersionsStale must be positive");

        if (!logLatencies)
            throw new InvalidRequestException("Latency logging is not enabled");

        // get a mapping of {replica number : latency} for each of WARS
        Map<Integer, List<Long>> wLatencies = getOrderedWLatencies();
        Map<Integer, List<Long>> aLatencies = getOrderedALatencies();
        Map<Integer, List<Long>> rLatencies = getOrderedRLatencies();
        Map<Integer, List<Long>> sLatencies = getOrderedSLatencies();

        if (wLatencies.isEmpty() || aLatencies.isEmpty())
            throw new InvalidRequestException("No write latencies have been recorded so far. Run some (non-local) inserts.");

        if (rLatencies.isEmpty() || sLatencies.isEmpty())
            throw new InvalidRequestException("No read latencies have been recorded so far. Run some (non-local) reads.");

        // storage for simulated read and write latencies
        ArrayList<Long> readLatencies = new ArrayList<Long>();
        ArrayList<Long> writeLatencies = new ArrayList<Long>();

        long consistentReads = 0;

        // storage for latencies for each replica for a given Monte Carlo trial
        // arr[i] will hold the ith replica's latency for one of WARS
        ArrayList<Long> trialWLatencies = new ArrayList<Long>();
        ArrayList<Long> trialRLatencies = new ArrayList<Long>();

        ArrayList<Long> replicaWriteLatencies = new ArrayList<Long>();
        ArrayList<Long> replicaReadLatencies = new ArrayList<Long>();

        //run repeated trials and observe staleness
        for (int i = 0; i < numberTrialsPrediction; ++i)
        {
            //simulate sending a write to N replicas then sending a
            //read to N replicas and record the latencies by randomly
            //sampling from gathered latencies
            for (int replicaNo = 0; replicaNo < n; ++replicaNo)
            {
                long trialWLatency = getRandomLatencySample(wLatencies, replicaNo);
                long trialALatency = getRandomLatencySample(aLatencies, replicaNo);

                trialWLatencies.add(trialWLatency);

                replicaWriteLatencies.add(trialWLatency + trialALatency);
            }

            // reads are only sent to R replicas - so pick R random read and
            // response latencies
            for (int replicaNo = 0; replicaNo < r; ++replicaNo)
            {
                long trialRLatency = getRandomLatencySample(rLatencies, replicaNo);
                long trialSLatency = getRandomLatencySample(sLatencies, replicaNo);

                trialRLatencies.add(trialRLatency);

                replicaReadLatencies.add(trialRLatency + trialSLatency);
            }

            // the write latency for this trial is the time it takes
            // for the wth replica to respond (W+A)
            Collections.sort(replicaWriteLatencies);
            long writeLatency = replicaWriteLatencies.get(w - 1);
            writeLatencies.add(writeLatency);

            ArrayList<Long> sortedReplicaReadLatencies = new ArrayList<Long>(replicaReadLatencies);
            Collections.sort(sortedReplicaReadLatencies);

            // the read latency for this trial is the time it takes
            // for the rth replica to respond (R+S)
            readLatencies.add(sortedReplicaReadLatencies.get(r - 1));

            // were all of the read responses reordered?

            // for each of the first r messages (the ones the
            // coordinator will pick from):
            //--if the read message came in after this replica saw the
            // write, it will be consistent
            //--each read request is sent at time
            // writeLatency+timeSinceWrite

            for (int responseNumber = 0; responseNumber < r; ++responseNumber)
            {
                int replicaNumber = replicaReadLatencies.indexOf(sortedReplicaReadLatencies.get(responseNumber));

                if (writeLatency + timeSinceWrite + trialRLatencies.get(replicaNumber) >=
                    trialWLatencies.get(replicaNumber))
                {
                    consistentReads++;
                    break;
                }

                // tombstone this replica in the case that we have
                // duplicate read latencies
                replicaReadLatencies.set(replicaNumber, -1L);
            }

            // clear storage for the next trial
            trialWLatencies.clear();
            trialRLatencies.clear();

            replicaReadLatencies.clear();
            replicaWriteLatencies.clear();
        }

        float oneVersionConsistencyProbability = (float) consistentReads / numberTrialsPrediction;

        // to calculate multi-version staleness, we exponentiate the staleness probability by the number of versions
        float consistencyProbability = (float) (1 - Math.pow((double) (1 - oneVersionConsistencyProbability),
                                                             numberVersionsStale));

        float averageWriteLatency = listAverage(writeLatencies);
        float averageReadLatency = listAverage(readLatencies);

        long percentileWriteLatency = getPercentile(writeLatencies, percentileLatency);
        long percentileReadLatency = getPercentile(readLatencies, percentileLatency);

        return new PBSPredictionResult(n,
                                       r,
                                       w,
                                       timeSinceWrite,
                                       numberVersionsStale,
                                       consistencyProbability,
                                       averageReadLatency,
                                       averageWriteLatency,
                                       percentileReadLatency,
                                       percentileLatency,
                                       percentileWriteLatency,
                                       percentileLatency);
    }

