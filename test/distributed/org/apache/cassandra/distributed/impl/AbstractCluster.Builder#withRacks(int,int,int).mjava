        public Builder<I, C> withRacks(int dcCount, int racksPerDC, int nodesPerRack)
        {
            if (nodeIdTopology != null)
                throw new IllegalStateException("Network topology already created. Call withDCs/withRacks once or before withDC/withRack calls");

            nodeIdTopology = new HashMap<>();
            int nodeId = 1;
            for (int dc = 1; dc <= dcCount; dc++)
            {
                for (int rack = 1; rack <= racksPerDC; rack++)
                {
                    for (int rackNodeIdx = 0; rackNodeIdx < nodesPerRack; rackNodeIdx++)
                        nodeIdTopology.put(nodeId++, Pair.create(dcName(dc), rackName(rack)));
                }
            }
            // adjust the node count to match the allocatation
            final int adjustedNodeCount = dcCount * racksPerDC * nodesPerRack;
            if (adjustedNodeCount != nodeCount)
            {
                assert adjustedNodeCount > nodeCount : "withRacks should only ever increase the node count";
                logger.info("Network topology of {} DCs with {} racks per DC and {} nodes per rack required increasing total nodes to {}",
                            dcCount, racksPerDC, nodesPerRack, adjustedNodeCount);
                nodeCount = adjustedNodeCount;
            }
            return this;
        }

