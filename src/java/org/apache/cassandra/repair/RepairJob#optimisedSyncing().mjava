    private AsyncFunction<List<TreeResponse>, List<SyncStat>> optimisedSyncing()
    {
        return trees ->
        {
            InetAddressAndPort local = FBUtilities.getLocalAddressAndPort();

            List<AsymmetricSyncTask> syncTasks = new ArrayList<>();
            // We need to difference all trees one against another
            DifferenceHolder diffHolder = new DifferenceHolder(trees);

            logger.debug("diffs = {}", diffHolder);
            PreferedNodeFilter preferSameDCFilter = (streaming, candidates) ->
                                                    candidates.stream()
                                                              .filter(node -> getDC(streaming)
                                                                              .equals(getDC(node)))
                                                              .collect(Collectors.toSet());
            ImmutableMap<InetAddressAndPort, HostDifferences> reducedDifferences = ReduceHelper.reduce(diffHolder, preferSameDCFilter);

            for (int i = 0; i < trees.size(); i++)
            {
                InetAddressAndPort address = trees.get(i).endpoint;
                HostDifferences streamsFor = reducedDifferences.get(address);
                if (streamsFor != null)
                {
                    assert streamsFor.get(address).isEmpty() : "We should not fetch ranges from ourselves";
                    for (InetAddressAndPort fetchFrom : streamsFor.hosts())
                    {
                        List<Range<Token>> toFetch = streamsFor.get(fetchFrom);
                        logger.debug("{} is about to fetch {} from {}", address, toFetch, fetchFrom);
                        AsymmetricSyncTask task;
                        if (address.equals(local))
                        {
                            task = new AsymmetricLocalSyncTask(desc, fetchFrom, toFetch, isIncremental ? desc.parentSessionId : null, previewKind);
                        }
                        else
                        {
                            task = new AsymmetricRemoteSyncTask(desc, address, fetchFrom, toFetch, previewKind);
                            session.waitForSync(Pair.create(desc, new NodePair(address, fetchFrom)),(AsymmetricRemoteSyncTask)task);
                        }
                        syncTasks.add(task);
                        taskExecutor.submit(task);
                    }
                }
                else
                {
                    logger.debug("Node {} has nothing to stream", address);
                }
            }
            return Futures.allAsList(syncTasks);
        };
    }

