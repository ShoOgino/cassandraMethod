    /**
     * Gets a list L of starting indices for downsampling rounds: the first round should start with the offset
     * given by L[0], the second by the offset in L[1], etc.
     *
     * @param samplingLevel the base sampling level
     *
     * @return A list of `samplingLevel` unique indices between 0 and `samplingLevel`
     */
    public static List<Integer> getSamplingPattern(int samplingLevel)
    {
        List<Integer> pattern = samplePatternCache.get(samplingLevel);
        if (pattern != null)
            return pattern;

        if (samplingLevel <= 1)
            return Arrays.asList(0);

        ArrayList<Integer> startIndices = new ArrayList<>(samplingLevel);
        startIndices.add(0);

        int spread = samplingLevel;
        while (spread >= 2)
        {
            ArrayList<Integer> roundIndices = new ArrayList<>(samplingLevel / spread);
            for (int i = spread / 2; i < samplingLevel; i += spread)
                roundIndices.add(i);

            // especially for latter rounds, it's important that we spread out the start points, so we'll
            // make a recursive call to get an ordering for this list of start points
            List<Integer> roundIndicesOrdering = getSamplingPattern(roundIndices.size());
            for (int i = 0; i < roundIndices.size(); ++i)
                startIndices.add(roundIndices.get(roundIndicesOrdering.get(i)));

            spread /= 2;
        }

        samplePatternCache.put(samplingLevel, startIndices);
        return startIndices;
    }

