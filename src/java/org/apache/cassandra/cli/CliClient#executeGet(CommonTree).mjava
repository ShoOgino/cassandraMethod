    // Execute GET statement
    private void executeGet(CommonTree ast) throws TException, NotFoundException, InvalidRequestException
    {
        if (!CliMain.isConnected())
            return;

        int childCount = ast.getChildCount();
        assert(childCount == 1);

        CommonTree columnFamilySpec = (CommonTree)ast.getChild(0);
        assert(columnFamilySpec.getType() == CliParser.NODE_COLUMN_ACCESS);

        String tableName     = CliCompiler.getTableName(columnFamilySpec);
        String key           = CliCompiler.getKey(columnFamilySpec);
        String columnFamily  = CliCompiler.getColumnFamily(columnFamilySpec);
        int    columnSpecCnt = CliCompiler.numColumnSpecifiers(columnFamilySpec);

        // assume simple columnFamily for now
        if (columnSpecCnt == 0)
        {
            // table.cf['key']
        	List<Column> columns = new ArrayList<Column>();
      		columns = thriftClient_.get_slice(tableName, key, new ColumnParent(columnFamily, null), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 1000000, ConsistencyLevel.ONE);
            int size = columns.size();
            for (Iterator<Column> colIter = columns.iterator(); colIter.hasNext(); )
            {
                Column column = colIter.next();
                css_.out.printf("  (column=%s, value=%s; timestamp=%d)\n",
                                 column.name, column.value, column.timestamp);
            }
            css_.out.println("Returned " + size + " rows.");
        }
        else
        {
            assert columnSpecCnt == 1;
            // table.cf['key']['column']
            String columnName = CliCompiler.getColumn(columnFamilySpec, 0);
            Column column = new Column();
            try
            {
                column = thriftClient_.get_column(tableName, key, new ColumnPath(columnFamily, null, columnName.getBytes("UTF-8")), ConsistencyLevel.ONE);
            }
            catch (UnsupportedEncodingException e)
            {
                throw new RuntimeException(e);
            }
            css_.out.printf("==> (name=%s, value=%s; timestamp=%d)\n",
                            column.name, column.value, column.timestamp);
        }
    }

