    /**
     * Generate two trees with different splits, but containing the same keys, and
     * check that they compare equally.
     *
     * The set of keys used in this test is: #{2,4,6,8,12,14,0}
     */
    @Test
    public void testValidateTree()
    {
        TOKEN_SCALE = new BigInteger("16"); // this test needs slightly more resolution

        Range full = new Range(tok(0), tok(0));
        Iterator<TreeRange> ranges;
        MerkleTree mt2 = new MerkleTree(partitioner, RECOMMENDED_DEPTH, Integer.MAX_VALUE);

        mt.split(tok(8));
        mt.split(tok(4));
        mt.split(tok(12));
        mt.split(tok(6));
        mt.split(tok(10));
        
        ranges = mt.invalids(full);
        ranges.next().validate(new HIterator(2, 4)); // (0,4]: depth 2
        ranges.next().validate(new HIterator(6)); // (4,6]
        ranges.next().validate(new HIterator(8)); // (6,8]
        ranges.next().validate(new HIterator(/*empty*/ new int[0])); // (8,10]
        ranges.next().validate(new HIterator(12)); // (10,12]
        ranges.next().validate(new HIterator(14, 0)); // (12,0]: depth 2


        mt2.split(tok(8));
        mt2.split(tok(4));
        mt2.split(tok(12));
        mt2.split(tok(2));
        mt2.split(tok(10));
        mt2.split(tok(9));
        mt2.split(tok(11));

        ranges = mt2.invalids(full);
        ranges.next().validate(new HIterator(2)); // (0,2]
        ranges.next().validate(new HIterator(4)); // (2,4]
        ranges.next().validate(new HIterator(6, 8)); // (4,8]: depth 2
        ranges.next().validate(new HIterator(/*empty*/ new int[0])); // (8,9]
        ranges.next().validate(new HIterator(/*empty*/ new int[0])); // (9,10]
        ranges.next().validate(new HIterator(/*empty*/ new int[0])); // (10,11]: depth 4
        ranges.next().validate(new HIterator(12)); // (11,12]: depth 4
        ranges.next().validate(new HIterator(14, 0)); // (12,0]: depth 2

        byte[] mthash = mt.hash(full);
        byte[] mt2hash = mt2.hash(full);
        assertHashEquals("Tree hashes did not match: " + mt + " && " + mt2, mthash, mt2hash);
    }

