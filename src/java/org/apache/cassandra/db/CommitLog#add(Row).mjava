    /*
     * Adds the specified row to the commit log. This method will reset the
     * file offset to what it is before the start of the operation in case
     * of any problems. This way we can assume that the subsequent commit log
     * entry will override the garbage left over by the previous write.
    */
    CommitLogContext add(final Row row) throws IOException
    {
        Callable<CommitLogContext> task = new Callable<CommitLogContext>()
        {
            public CommitLogContext call() throws Exception
            {
                long currentPosition = -1L;
                DataOutputBuffer cfBuffer = new DataOutputBuffer();
                try
                {
                    /* serialize the row */
                    Row.serializer().serialize(row, cfBuffer);
                    currentPosition = logWriter_.getCurrentPosition();
                    CommitLogContext cLogCtx = new CommitLogContext(logFile_, currentPosition);
                    /* Update the header */
                    maybeUpdateHeader(row);
                    logWriter_.writeLong(cfBuffer.getLength());
                    logWriter_.append(cfBuffer);
                    if (!maybeRollLog())
                    {
                        logWriter_.sync();
                    }
                    return cLogCtx;
                }
                catch (IOException e)
                {
                    if ( currentPosition != -1 )
                        logWriter_.seek(currentPosition);
                    throw e;
                }
            }
        };

        try
        {
            return executor.submit(task).get();
        }
        catch (InterruptedException e)
        {
            throw new RuntimeException(e);
        }
        catch (ExecutionException e)
        {
            throw new RuntimeException(e);
        }
    }

