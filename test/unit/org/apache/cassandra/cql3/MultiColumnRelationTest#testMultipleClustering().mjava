    @Test
    public void testMultipleClustering() throws Throwable
    {
        createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c, d))");

        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 1);

        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 1);

        // Empty query
        assertEmpty(execute("SELECT * FROM %s WHERE a = 0 AND (b, c, d) IN ()"));

        // Equalities

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) = (?)", 0, 1),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        // Same with whole tuple prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) = ?", 0, tuple(1)),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) = (?, ?)", 0, 1, 1),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        // Same with whole tuple prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) = ?", 0, tuple(1, 1)),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) = (?, ?, ?)", 0, 1, 1, 1),
            row(0, 1, 1, 1)
        );

        // Same with whole tuple prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) = ?", 0, tuple(1, 1, 1)),
            row(0, 1, 1, 1)
        );

        // Inequalities

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) > (?)", 0, 0),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) >= (?)", 0, 0),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) > (?, ?)", 0, 1, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) >= (?, ?)", 0, 1, 0),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?)", 0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) >= (?, ?, ?)", 0, 1, 1, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) < (?)", 0, 1),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) <= (?)", 0, 1),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(0, 1, 0, 0),
            row(0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) < (?, ?)", 0, 0, 1),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) <= (?, ?)", 0, 0, 1),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) < (?, ?, ?)", 0, 0, 1, 1),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) <= (?, ?, ?)", 0, 0, 1, 1),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b) < (?)", 0, 0, 1, 0, 1),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b, c) < (?, ?)", 0, 0, 1, 1, 1, 1),
            row(0, 1, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b, c, d) < (?, ?, ?)", 0, 0, 1, 1, 1, 1, 0),
            row(0, 1, 0, 0)
        );

        // Same with whole tuple prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > ? AND (b, c, d) < ?", 0, tuple(0, 1, 1), tuple(1, 1, 0)),
            row(0, 1, 0, 0)
        );

        // reversed
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) > (?) ORDER BY b DESC, c DESC, d DESC", 0, 0),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0),
            row(0, 1, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) >= (?) ORDER BY b DESC, c DESC, d DESC", 0, 0),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0),
            row(0, 1, 0, 0),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) > (?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 1, 0),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) >= (?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 1, 0),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0),
            row(0, 1, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 1, 1, 0),
            row(0, 1, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) >= (?, ?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 1, 1, 0),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) < (?) ORDER BY b DESC, c DESC, d DESC", 0, 1),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b) <= (?) ORDER BY b DESC, c DESC, d DESC", 0, 1),
            row(0, 1, 1, 1),
            row(0, 1, 1, 0),
            row(0, 1, 0, 0),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) < (?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) <= (?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) < (?, ?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) <= (?, ?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1, 1),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b) < (?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1, 0, 1),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b, c) < (?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1, 1, 1, 1),
            row(0, 1, 0, 0)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) > (?, ?, ?) AND (b, c, d) < (?, ?, ?) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1, 1, 1, 1, 0),
            row(0, 1, 0, 0)
        );

        // IN

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) IN ((?, ?, ?), (?, ?, ?))", 0, 0, 1, 0, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        // same query but with whole tuple prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) IN (?, ?)", 0, tuple(0, 1, 0), tuple(0, 1, 1)),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        // same query but with whole IN list prepared
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) IN ?", 0, list(tuple(0, 1, 0), tuple(0, 1, 1))),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        // same query, but reversed order for the IN values
        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c, d) IN (?, ?)", 0, tuple(0, 1, 1), tuple(0, 1, 0)),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? and (b, c) IN ((?, ?))", 0, 0, 1),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? and (b) IN ((?))", 0, 0),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a = ? AND (b, c) IN ((?, ?)) ORDER BY b DESC, c DESC, d DESC", 0, 0, 1),
            row(0, 0, 1, 1),
            row(0, 0, 1, 0)
        );

        // IN on both partition key and clustering key
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
        execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 1);

        assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) AND (b, c, d) IN (?, ?)", 0, 1, tuple(0, 1, 0), tuple(0, 1, 1)),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(1, 0, 1, 0),
            row(1, 0, 1, 1)
        );

        // same but with whole IN lists prepared
        assertRows(execute("SELECT * FROM %s WHERE a IN ? AND (b, c, d) IN ?", list(0, 1), list(tuple(0, 1, 0), tuple(0, 1, 1))),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(1, 0, 1, 0),
            row(1, 0, 1, 1)
        );

        // same query, but reversed order for the IN values
        assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) AND (b, c, d) IN (?, ?)", 1, 0, tuple(0, 1, 1), tuple(0, 1, 0)),
            row(1, 0, 1, 0),
            row(1, 0, 1, 1),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) and (b, c) IN ((?, ?))", 0, 1, 0, 1),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(1, 0, 1, 0),
            row(1, 0, 1, 1)
        );

        assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) and (b) IN ((?))", 0, 1, 0),
            row(0, 0, 0, 0),
            row(0, 0, 1, 0),
            row(0, 0, 1, 1),
            row(1, 0, 0, 0),
            row(1, 0, 1, 0),
            row(1, 0, 1, 1)
        );
    }

