    @SuppressWarnings("resource")
    private void recordSizeEstimates(ColumnFamilyStore table, Collection<Range<Token>> localRanges)
    {
        List<Range<Token>> unwrappedRanges = Range.normalize(localRanges);
        // for each local primary range, estimate (crudely) mean partition size and partitions count.
        Map<Range<Token>, Pair<Long, Long>> estimates = new HashMap<>(localRanges.size());
        for (Range<Token> range : unwrappedRanges)
        {
            // filter sstables that have partitions in this range.
            Refs<SSTableReader> refs = null;
            long partitionsCount, meanPartitionSize;

            try
            {
                while (refs == null)
                {
                    ColumnFamilyStore.ViewFragment view = table.select(View.select(SSTableSet.CANONICAL, Range.makeRowRange(range)));
                    refs = Refs.tryRef(view.sstables);
                }

                // calculate the estimates.
                partitionsCount = estimatePartitionsCount(refs, range);
                meanPartitionSize = estimateMeanPartitionSize(refs);
            }
            finally
            {
                if (refs != null)
                    refs.release();
            }

            estimates.put(range, Pair.create(partitionsCount, meanPartitionSize));
        }

        // atomically update the estimates.
        SystemKeyspace.updateSizeEstimates(table.metadata.ksName, table.metadata.cfName, estimates);
    }

