    /**
     * Adds new point p with value m to this histogram.
     * @param p
     * @param m
     */
    public void update(Number p, long m)
    {
        long[] mi = bin.get(p);
        if (mi != null)
        {
            // we found the same p so increment that counter
            mi[0] += m;
        }
        else
        {
            mi = new long[]{m};
            bin.put(p, mi);
            // if bin size exceeds maximum bin size then trim down to max size
            while (bin.size() > maxBinSize)
            {
                // find points p1, p2 which have smallest difference
                Iterator<Number> keys = bin.keySet().iterator();
                double p1 = keys.next().doubleValue();
                double p2 = keys.next().doubleValue();
                double smallestDiff = p2 - p1;
                double q1 = p1, q2 = p2;
                while (keys.hasNext())
                {
                    p1 = p2;
                    p2 = keys.next().doubleValue();
                    double diff = p2 - p1;
                    if (diff < smallestDiff)
                    {
                        smallestDiff = diff;
                        q1 = p1;
                        q2 = p2;
                    }
                }
                // merge those two
                long[] a1 = bin.remove(q1);
                long[] a2 = bin.remove(q2);
                long k1 = a1[0];
                long k2 = a2[0];

                a1[0] += k2;
                bin.put((q1 * k1 + q2 * k2) / (k1 + k2), a1);
            }
        }
    }

