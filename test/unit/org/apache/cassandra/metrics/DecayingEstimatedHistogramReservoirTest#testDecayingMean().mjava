    @Test
    public void testDecayingMean()
    {
        {
            TestClock clock = new TestClock();

            DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(clock);

            clock.addMillis(DecayingEstimatedHistogramReservoir.LANDMARK_RESET_INTERVAL_IN_MS - 1_000L);

            while (clock.getTime() < DecayingEstimatedHistogramReservoir.LANDMARK_RESET_INTERVAL_IN_MS + 1_000L)
            {
                clock.addMillis(900);
                for (int i = 0; i < 1_000_000; i++)
                {
                    histogram.update(1000);
                    histogram.update(2000);
                    histogram.update(3000);
                    histogram.update(4000);
                    histogram.update(5000);
                }
                assertEquals(3000D, histogram.getSnapshot().getMean(), 500D);
            }
        }
    }

