    public void run()
    {
        List<String> values  = generateValues();
        List<Column> columns = new ArrayList<Column>();
        List<SuperColumn> superColumns = new ArrayList<SuperColumn>();

        // format used for keys
        String format = "%0" + session.getTotalKeysLength() + "d";

        // columns = [Column('C' + str(j), 'unset', time.time() * 1000000) for j in xrange(columns_per_key)]
        for (int i = 0; i < session.getColumnsPerKey(); i++)
        {
            byte[] columnName = ("C" + Integer.toString(i)).getBytes();
            columns.add(new Column(ByteBuffer.wrap(columnName), ByteBuffer.wrap(new byte[] {}), System.currentTimeMillis()));
        }

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            // supers = [SuperColumn('S' + str(j), columns) for j in xrange(supers_per_key)]
            for (int i = 0; i < session.getSuperColumns(); i++)
            {
                String superColumnName = "S" + Integer.toString(i);
                superColumns.add(new SuperColumn(ByteBuffer.wrap(superColumnName.getBytes()), columns));
            }
        }

        for (int i : range)
        {
            ByteBuffer key = ByteBuffer.wrap(String.format(format, i).getBytes());
            Map<ByteBuffer, Map<String, List<Mutation>>> record = new HashMap<ByteBuffer, Map<String, List<Mutation>>>();

            record.put(key, session.getColumnFamilyType() == ColumnFamilyType.Super
                                                          ? getSuperColumnsMutationMap(superColumns)
                                                          : getColumnsMutationMap(columns));

            String value = values.get(i % values.size());

            for (Column c : columns)
                c.value = ByteBuffer.wrap(value.getBytes());

            long start = System.currentTimeMillis();

            try
            {
                client.batch_mutate(record, session.getConsistencyLevel());
            }
            catch (Exception e)
            {
                try
                {
                    System.err.printf("Error while inserting key %s - %s%n", ByteBufferUtil.string(key), getExceptionMessage(e));
                }
                catch (CharacterCodingException e1)
                {
                    throw new AssertionError(e1); // keys are valid strings
                }

                if (!session.ignoreErrors())
                    return;
            }

            session.operationCount.getAndIncrement(index);
            session.keyCount.getAndIncrement(index);
            session.latencies.getAndAdd(index, System.currentTimeMillis() - start);
        }
    }

