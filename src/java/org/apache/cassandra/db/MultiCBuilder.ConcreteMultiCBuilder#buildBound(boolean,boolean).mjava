        public SortedSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive)
        {
            built = true;

            if (hasMissingElements)
                return FBUtilities.emptySortedSet(comparator);

            CBuilder builder = CBuilder.create(comparator);

            if (elementsList.isEmpty())
                return FBUtilities.singleton(builder.buildBound(isStart, isInclusive), comparator);

            // Use a TreeSet to sort and eliminate duplicates
            SortedSet<Slice.Bound> set = new TreeSet<>(comparator);

            for (int i = 0, m = elementsList.size(); i < m; i++)
            {
                List<ByteBuffer> elements = elementsList.get(i);
                set.add(builder.buildBoundWith(elements, isStart, isInclusive));
            }
            return set;
        }

