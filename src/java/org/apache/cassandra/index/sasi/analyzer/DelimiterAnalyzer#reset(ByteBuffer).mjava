    public void reset(ByteBuffer input)
    {
        Preconditions.checkNotNull(input);
        final CharBuffer cb = charset.decode(input);

        this.iter = new AbstractIterator<ByteBuffer>() {
            protected ByteBuffer computeNext() {

                if (!cb.hasRemaining())
                    return endOfData();

                CharBuffer readahead = cb.duplicate();
                // loop until we see the next delimiter character, or reach end of data
                boolean readaheadRemaining;
                while ((readaheadRemaining = readahead.hasRemaining()) && readahead.get() != delimiter);

                char[] chars = new char[readahead.position() - cb.position() - (readaheadRemaining ? 1 : 0)];
                cb.get(chars);
                Preconditions.checkState(!cb.hasRemaining() || cb.get() == delimiter);

                return 0 < chars.length
                        ? charset.encode(CharBuffer.wrap(chars))
                        // blank partition keys not permitted, ref ConcurrentRadixTree.putIfAbsent(..)
                        : computeNext();
            }
        };
    }

