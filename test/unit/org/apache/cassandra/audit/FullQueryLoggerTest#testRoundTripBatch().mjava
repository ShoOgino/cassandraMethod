    @Test
    public void testRoundTripBatch() throws Exception
    {
        configureFQL();
        instance.logBatch("UNLOGGED", Arrays.asList("foo1", "foo2"), Arrays.asList(Arrays.asList(ByteBuffer.allocate(1) , ByteBuffer.allocateDirect(2)), Arrays.asList()), QueryOptions.DEFAULT, 1);
        Util.spinAssertEquals(true, () ->
        {
            try (ChronicleQueue queue = ChronicleQueueBuilder.single(tempDir.toFile()).rollCycle(RollCycles.TEST_SECONDLY).build())
            {
                return queue.createTailer().readingDocument().isPresent();
            }
        }, 60);
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(tempDir.toFile()).rollCycle(RollCycles.TEST_SECONDLY).build())
        {
            ExcerptTailer tailer = queue.createTailer();
            assertTrue(tailer.readDocument(wire -> {
                assertEquals("batch", wire.read("type").text());
                ProtocolVersion protocolVersion = ProtocolVersion.decode(wire.read("protocol-version").int32());
                assertEquals(ProtocolVersion.CURRENT, protocolVersion);
                QueryOptions queryOptions = QueryOptions.codec.decode(Unpooled.wrappedBuffer(wire.read("query-options").bytes()), protocolVersion);
                assertEquals(1L, wire.read("query-time").int64());
                compareQueryOptions(QueryOptions.DEFAULT, queryOptions);
                assertEquals("UNLOGGED", wire.read("batch-type").text());
                ValueIn in = wire.read("queries");
                assertEquals(2, in.int32());
                assertEquals("foo1", in.text());
                assertEquals("foo2", in.text());
                in = wire.read("values");
                assertEquals(2, in.int32());
                assertEquals(2, in.int32());
                assertTrue(Arrays.equals(new byte[1], in.bytes()));
                assertTrue(Arrays.equals(new byte[2], in.bytes()));
                assertEquals(0, in.int32());
            }));
        }
    }

