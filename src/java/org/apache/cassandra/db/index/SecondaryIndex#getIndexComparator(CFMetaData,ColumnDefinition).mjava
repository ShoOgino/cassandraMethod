    /**
     * Returns the index comparator for index backed by CFS, or null.
     *
     * Note: it would be cleaner to have this be a member method. However we need this when opening indexes
     * sstables, but by then the CFS won't be fully initiated, so the SecondaryIndex object won't be accessible.
     */
    public static AbstractType<?> getIndexComparator(CFMetaData baseMetadata, ColumnDefinition cdef)
    {
        IPartitioner rowPartitioner = StorageService.getPartitioner();
        AbstractType<?> keyComparator = (rowPartitioner instanceof OrderPreservingPartitioner || rowPartitioner instanceof ByteOrderedPartitioner)
                                      ? BytesType.instance
                                      : new LocalByPartionerType(rowPartitioner);

        switch (cdef.getIndexType())
        {
            case KEYS:
                return keyComparator;
            case COMPOSITES:
                assert baseMetadata.comparator instanceof CompositeType;
                int prefixSize;
                try
                {
                    prefixSize = Integer.parseInt(cdef.getIndexOptions().get(CompositesIndex.PREFIX_SIZE_OPTION));
                }
                catch (NumberFormatException e)
                {
                    // This shouldn't happen if validation has been done correctly
                    throw new RuntimeException(e);
                }
                List<AbstractType<?>> types = new ArrayList<AbstractType<?>>(prefixSize + 1);
                types.add(keyComparator);
                for (int i = 0; i < prefixSize; i++)
                    types.add(((CompositeType)baseMetadata.comparator).types.get(i));
                return CompositeType.getInstance(types);
            case CUSTOM:
                return null;
        }
        throw new AssertionError();
    }

