    @Test
    public void testSimpleBoundIsSatisfiedByValue() throws InvalidRequestException
    {
        // EQ
        assertTrue(conditionApplies(ONE, EQ, ONE));
        assertFalse(conditionApplies(TWO, EQ, ONE));
        assertFalse(conditionApplies(ONE, EQ, TWO));
        assertFalse(conditionApplies(ONE, EQ, EMPTY_BYTE_BUFFER));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, EQ, ONE));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, EQ, EMPTY_BYTE_BUFFER));
        assertFalse(conditionApplies(ONE, EQ, null));
        assertFalse(conditionApplies(null, EQ, ONE));
        assertTrue(conditionApplies((ByteBuffer) null, EQ, (ByteBuffer) null));

        // NEQ
        assertFalse(conditionApplies(ONE, NEQ, ONE));
        assertTrue(conditionApplies(TWO, NEQ, ONE));
        assertTrue(conditionApplies(ONE, NEQ, TWO));
        assertTrue(conditionApplies(ONE, NEQ, EMPTY_BYTE_BUFFER));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, NEQ, ONE));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, NEQ, EMPTY_BYTE_BUFFER));
        assertTrue(conditionApplies(ONE, NEQ, null));
        assertTrue(conditionApplies(null, NEQ, ONE));
        assertFalse(conditionApplies((ByteBuffer) null, NEQ, (ByteBuffer) null));

        // LT
        assertFalse(conditionApplies(ONE, LT, ONE));
        assertFalse(conditionApplies(TWO, LT, ONE));
        assertTrue(conditionApplies(ONE, LT, TWO));
        assertFalse(conditionApplies(ONE, LT, EMPTY_BYTE_BUFFER));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, LT, ONE));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, LT, EMPTY_BYTE_BUFFER));
        assertThrowsIRE(() -> conditionApplies(ONE, LT, null), "Invalid comparison with null for operator \"<\"");
        assertFalse(conditionApplies(null, LT, ONE));

        // LTE
        assertTrue(conditionApplies(ONE, LTE, ONE));
        assertFalse(conditionApplies(TWO, LTE, ONE));
        assertTrue(conditionApplies(ONE, LTE, TWO));
        assertFalse(conditionApplies(ONE, LTE, EMPTY_BYTE_BUFFER));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, LTE, ONE));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, LTE, EMPTY_BYTE_BUFFER));
        assertThrowsIRE(() -> conditionApplies(ONE, LTE, null), "Invalid comparison with null for operator \"<=\"");
        assertFalse(conditionApplies(null, LTE, ONE));

        // GT
        assertFalse(conditionApplies(ONE, GT, ONE));
        assertTrue(conditionApplies(TWO, GT, ONE));
        assertFalse(conditionApplies(ONE, GT, TWO));
        assertTrue(conditionApplies(ONE, GT, EMPTY_BYTE_BUFFER));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, GT, ONE));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, GT, EMPTY_BYTE_BUFFER));
        assertThrowsIRE(() -> conditionApplies(ONE, GT, null), "Invalid comparison with null for operator \">\"");
        assertFalse(conditionApplies(null, GT, ONE));

        // GTE
        assertTrue(conditionApplies(ONE, GTE, ONE));
        assertTrue(conditionApplies(TWO, GTE, ONE));
        assertFalse(conditionApplies(ONE, GTE, TWO));
        assertTrue(conditionApplies(ONE, GTE, EMPTY_BYTE_BUFFER));
        assertFalse(conditionApplies(EMPTY_BYTE_BUFFER, GTE, ONE));
        assertTrue(conditionApplies(EMPTY_BYTE_BUFFER, GTE, EMPTY_BYTE_BUFFER));
        assertThrowsIRE(() -> conditionApplies(ONE, GTE, null), "Invalid comparison with null for operator \">=\"");
        assertFalse(conditionApplies(null, GTE, ONE));
    }

