    /**
     * Give a range a-------------b which is being split as
     * a-----x-----y-----b then we want a mapping from 
     * (a, b] --> (a, x], (x, y], (y, b] 
    */
    protected static Map<Range, List<Range>> getRangeSplitRangeMapping(Range[] oldRanges, Token[] allTokens)
    {
        Map<Range, List<Range>> splitRanges = new HashMap<Range, List<Range>>();
        Token[] tokens = new Token[allTokens.length];
        System.arraycopy(allTokens, 0, tokens, 0, tokens.length);
        Arrays.sort(tokens);
        
        Range prevRange = null;
        Token prevToken = null;
        boolean bVal = false;
        
        for ( Range oldRange : oldRanges )
        {
            if (bVal)
            {
                bVal = false; 
                List<Range> subRanges = splitRanges.get(prevRange);
                if ( subRanges != null )
                    subRanges.add( new Range(prevToken, prevRange.right()) );     
            }
            
            prevRange = oldRange;
            prevToken = oldRange.left();                
            for (Token token : tokens)
            {     
                List<Range> subRanges = splitRanges.get(oldRange);
                if ( oldRange.contains(token) )
                {                        
                    if ( subRanges == null )
                    {
                        subRanges = new ArrayList<Range>();
                        splitRanges.put(oldRange, subRanges);
                    }                            
                    subRanges.add( new Range(prevToken, token) );
                    prevToken = token;
                    bVal = true;
                }
                else
                {
                    if ( bVal )
                    {
                        bVal = false;                                                                                
                        subRanges.add( new Range(prevToken, oldRange.right()) );                            
                    }
                }
            }
        }
        /* This is to handle the last range being processed. */
        if ( bVal )
        {
            bVal = false; 
            List<Range> subRanges = splitRanges.get(prevRange);
            subRanges.add( new Range(prevToken, prevRange.right()) );                            
        }
        return splitRanges;
    }

