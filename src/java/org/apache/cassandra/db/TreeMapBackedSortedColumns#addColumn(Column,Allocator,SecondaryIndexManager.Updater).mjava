    /*
     * If we find an old column that has the same name
     * the ask it to resolve itself else add the new column
    */
    public long addColumn(Column column, Allocator allocator, SecondaryIndexManager.Updater indexer)
    {
        ByteBuffer name = column.name();
        // this is a slightly unusual way to structure this; a more natural way is shown in ThreadSafeSortedColumns,
        // but TreeMap lacks putAbsent.  Rather than split it into a "get, then put" check, we do it as follows,
        // which saves the extra "get" in the no-conflict case [for both normal and super columns],
        // in exchange for a re-put in the SuperColumn case.
        Column oldColumn = map.put(name, column);
        if (oldColumn == null)
            return column.dataSize();

        // calculate reconciled col from old (existing) col and new col
        Column reconciledColumn = column.reconcile(oldColumn, allocator);
        map.put(name, reconciledColumn);
        // for memtable updates we only care about oldcolumn, reconciledcolumn, but when compacting
        // we need to make sure we update indexes no matter the order we merge
        if (reconciledColumn == column)
            indexer.update(oldColumn, reconciledColumn);
        else
            indexer.update(column, reconciledColumn);
        return reconciledColumn.dataSize() - oldColumn.dataSize();
    }

