    /*
     * Replicas are picked manually:
     * - replicas should be alive according to the failure detector
     * - replicas should be in the local datacenter
     * - choose min(2, number of qualifying candiates above)
     * - allow the local node to be the only replica only if it's a single-node DC
     */
    private static Collection<InetAddress> getBatchlogEndpoints(String localDataCenter, ConsistencyLevel consistencyLevel)
    throws UnavailableException
    {
        TokenMetadata.Topology topology = StorageService.instance.getTokenMetadata().cachedOnlyTokenMap().getTopology();
        List<InetAddress> localEndpoints = new ArrayList<InetAddress>(topology.getDatacenterEndpoints().get(localDataCenter));

        // special case for single-node datacenters
        if (localEndpoints.size() == 1)
            return localEndpoints;

        List<InetAddress> chosenEndpoints = new ArrayList<InetAddress>(2);
        int startOffset = new Random().nextInt(localEndpoints.size());

        // starts at some random point in the list, advances forward until the end, then loops
        // around to the beginning, advancing again until it is back at the starting point again.
        for (int i = 0; i < localEndpoints.size() && chosenEndpoints.size() < 2; i++)
        {
            InetAddress endpoint = localEndpoints.get((i + startOffset) % localEndpoints.size());
            // skip localhost and non-alive nodes
            if (!endpoint.equals(FBUtilities.getBroadcastAddress()) && FailureDetector.instance.isAlive(endpoint))
                chosenEndpoints.add(endpoint);
        }

        if (chosenEndpoints.isEmpty())
        {
            if (consistencyLevel == ConsistencyLevel.ANY)
                return Collections.singleton(FBUtilities.getBroadcastAddress());

            throw new UnavailableException(ConsistencyLevel.ONE, 1, 0);
        }

        return chosenEndpoints;
    }

