    /**
     * This method adds the row to the Commit Log associated with this table.
     * Once this happens the data associated with the individual column families
     * is also written to the column family store's memtable.
    */
    void apply(RowMutation mutation, Object serializedMutation, boolean writeCommitLog) throws IOException
    {
        HashMap<ColumnFamilyStore,Memtable> memtablesToFlush = new HashMap<ColumnFamilyStore, Memtable>(2);

        flusherLock.readLock().lock();
        try
        {
            if (writeCommitLog)
                CommitLog.open().add(mutation, serializedMutation);
        
            for (ColumnFamily columnFamily : mutation.getColumnFamilies())
            {
                Memtable memtableToFlush;
                ColumnFamilyStore cfStore = columnFamilyStores.get(columnFamily.name());
                if ((memtableToFlush=cfStore.apply(mutation.key(), columnFamily)) != null)
                    memtablesToFlush.put(cfStore, memtableToFlush);
            }
        }
        finally
        {
            flusherLock.readLock().unlock();
        }

        // usually mTF will be empty and this will be a no-op
        for (Map.Entry<ColumnFamilyStore, Memtable> entry : memtablesToFlush.entrySet())
            entry.getKey().switchMemtable(entry.getValue(), writeCommitLog);
    }

