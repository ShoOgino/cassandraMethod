        public void prepare()
        {
            List<DecoratedKey> keys = new ArrayList<DecoratedKey>();
            ColumnFamilyStore cfs;
            try
            {
                cfs = Table.open(cf.left).getColumnFamilyStore(cf.right);
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
            if (cfs != null) // TODO test w/ valid CF definitions, this if{} shouldn't be necessary
            {
                for (SSTable.KeyPosition info: cfs.allIndexPositions())
                    keys.add(info.key);
            }

            if (keys.isEmpty())
            {
                // use an even tree distribution
                tree.init();
            }
            else
            {
                int numkeys = keys.size();
                Random random = new Random();
                // sample the column family using random keys from the index 
                while (true)
                {
                    DecoratedKey dk = keys.get(random.nextInt(numkeys));
                    if (!tree.split(dk.token))
                        break;
                }
            }
            logger.debug("Prepared AEService tree of size " + tree.size() + " for " + cf);
            mintoken = tree.partitioner().getMinimumToken();
            ranges = tree.invalids(new Range(mintoken, mintoken));
        }

