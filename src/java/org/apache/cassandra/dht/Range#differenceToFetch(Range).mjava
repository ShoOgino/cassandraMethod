    /**
     * Calculate set of the difference ranges of given two ranges
     * (as current (A, B] and rhs is (C, D])
     * which node will need to fetch when moving to a given new token
     *
     * @param rhs range to calculate difference
     * @return set of difference ranges
     */
    public Set<Range> differenceToFetch(Range rhs)
    {
        Set<Range> result;
        Set<Range> intersectionSet = this.intersectionWith(rhs);
        if (intersectionSet.isEmpty())
        {
            result = new HashSet<Range>();
            result.add(rhs);
        }
        else
        {
            Range[] intersections = new Range[intersectionSet.size()];
            intersectionSet.toArray(intersections);
            if (intersections.length == 1)
            {
                result = new HashSet<Range>(rhs.subtractContained(intersections[0]));
            }
            else
            {
                // intersections.length must be 2
                Range first = intersections[0];
                Range second = intersections[1];
                ArrayList<Range> temp = rhs.subtractContained(first);

                // Because there are two intersections, subtracting only one of them
                // will yield a single Range.
                Range single = temp.get(0);
                result = new HashSet<Range>(single.subtractContained(second));
            }
        }
        return result;
    }

