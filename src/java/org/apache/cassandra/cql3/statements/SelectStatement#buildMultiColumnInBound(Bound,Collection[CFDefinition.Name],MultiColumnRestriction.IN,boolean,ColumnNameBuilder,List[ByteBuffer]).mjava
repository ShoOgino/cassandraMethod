    private List<ByteBuffer> buildMultiColumnInBound(Bound bound,
                                                     Collection<CFDefinition.Name> names,
                                                     MultiColumnRestriction.IN restriction,
                                                     boolean isReversed,
                                                     ColumnNameBuilder builder,
                                                     List<ByteBuffer> variables) throws InvalidRequestException
    {
        List<List<ByteBuffer>> splitInValues = restriction.splitValues(variables);

        // The IN query might not have listed the values in comparator order, so we need to re-sort
        // the bounds lists to make sure the slices works correctly (also, to avoid duplicates).
        TreeSet<ByteBuffer> inValues = new TreeSet<>(isReversed ? cfDef.cfm.comparator.reverseComparator : cfDef.cfm.comparator);
        Iterator<CFDefinition.Name> iter = names.iterator();
        for (List<ByteBuffer> components : splitInValues)
        {
            ColumnNameBuilder nameBuilder = builder.copy();
            for (ByteBuffer component : components)
                nameBuilder.add(component);

            Bound b = isReversed == isReversedType(iter.next()) ? bound : Bound.reverse(bound);
            inValues.add((bound == Bound.END && nameBuilder.remainingCount() > 0) ? nameBuilder.buildAsEndOfRange() : nameBuilder.build());
        }
        return new ArrayList<>(inValues);
    }

