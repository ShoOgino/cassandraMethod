    /**
     * Replaces Python Dtest: nodetool_test.py#test_refresh_size_estimates_clears_invalid_entries
     */
    @Test
    public void refreshTableEstimatesClearsInvalidEntries()
    {
        String table_estimatesInsert = "INSERT INTO system.table_estimates (keyspace_name, table_name, range_type, range_start, range_end, mean_partition_size, partitions_count) VALUES (?, ?, ?, ?, ?, ?, ?)";
        IInstance node = CLUSTER.get(1);

        try
        {
            node.executeInternal(table_estimatesInsert, "system_auth", "bad_table", "local_primary", "-5", "5", 0L, 0L);
            node.executeInternal(table_estimatesInsert, "bad_keyspace", "bad_table", "local_primary", "-5", "5", 0L, 0L);
        }
        catch (Exception e)
        {
            // to make this test portable (with the intent to extract out), handle the case where the table_estimates isn't defined
            Assertions.assertThat(e.getClass().getCanonicalName()).isEqualTo("org.apache.cassandra.exceptions.InvalidRequestException");
            Assertions.assertThat(e).hasMessageContaining("does not exist");
            Assume.assumeTrue("system.table_estimates not present", false);
        }

        node.nodetoolResult("refreshsizeestimates").asserts().success();

        QueryResult qr = CLUSTER.coordinator(1).executeWithResult("SELECT * FROM system.table_estimates WHERE keyspace_name=? AND table_name=?", ConsistencyLevel.ONE, "system_auth", "bad_table");
        Assertions.assertThat(qr).isExhausted();

        qr = CLUSTER.coordinator(1).executeWithResult("SELECT * FROM system.table_estimates WHERE keyspace_name=?", ConsistencyLevel.ONE, "bad_keyspace");
        Assertions.assertThat(qr).isExhausted();
    }

