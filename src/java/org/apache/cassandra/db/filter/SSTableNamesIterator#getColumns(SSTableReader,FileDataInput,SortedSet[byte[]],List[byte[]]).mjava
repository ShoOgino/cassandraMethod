    /**
     * Read in the columns we are looking for
     * @param ssTable Table to read from
     * @param file Read from this file
     * @param columnNames Names of all columns we are looking for
     * @param filteredColumnNames Names of columns that are thought to exist
     * @throws IOException
     */
    private void getColumns(SSTableReader ssTable, FileDataInput file, SortedSet<byte[]> columnNames, List<byte[]> filteredColumnNames) throws IOException
    {
        List<IndexHelper.IndexInfo> indexList = IndexHelper.deserializeIndex(file);
     
        cf = ColumnFamily.serializer().deserializeFromSSTableNoColumns(ssTable.makeColumnFamily(), file);
        file.readInt(); // column count
     
        /* get the various column ranges we have to read */
        AbstractType comparator = ssTable.getColumnComparator();
        SortedSet<IndexHelper.IndexInfo> ranges = new TreeSet<IndexHelper.IndexInfo>(IndexHelper.getComparator(comparator));
        for (byte[] name : filteredColumnNames)
        {
            int index = IndexHelper.indexFor(name, indexList, comparator, false);
            if (index == indexList.size())
                continue;
            IndexHelper.IndexInfo indexInfo = indexList.get(index);
            if (comparator.compare(name, indexInfo.firstName) < 0)
                continue;
            ranges.add(indexInfo);
        }
     
        file.mark();
        for (IndexHelper.IndexInfo indexInfo : ranges)
        {
            file.reset();
            long curOffsert = file.skipBytes((int)indexInfo.offset);
            assert curOffsert == indexInfo.offset;
            // TODO only completely deserialize columns we are interested in
            while (file.bytesPastMark() < indexInfo.offset + indexInfo.width)
            {
                final IColumn column = cf.getColumnSerializer().deserialize(file);
                // we check vs the original Set, not the filtered List, for efficiency
                if (columnNames.contains(column.name()))
                {
                    cf.addColumn(column);
                }
            }
        }
    }

