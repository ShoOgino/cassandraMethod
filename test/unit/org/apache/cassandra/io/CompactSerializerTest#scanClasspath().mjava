    @BeforeClass
    public static void scanClasspath()
    {
        expectedClassNames = new HashSet<String>();
        expectedClassNames.add("RangeSliceCommandSerializer");
        expectedClassNames.add("IndexScanCommandSerializer");
        expectedClassNames.add("ReadCommandSerializer");
        expectedClassNames.add("ReadResponseSerializer");
        expectedClassNames.add("RowSerializer");
        expectedClassNames.add("RowMutationSerializer");
        expectedClassNames.add("SliceByNamesReadCommandSerializer");
        expectedClassNames.add("SliceFromReadCommandSerializer");
        expectedClassNames.add("TruncateResponseSerializer");
        expectedClassNames.add("TruncationSerializer");
        expectedClassNames.add("WriteResponseSerializer");
        expectedClassNames.add("EndpointStateSerializer");
        expectedClassNames.add("GossipDigestSerializer");
        expectedClassNames.add("GossipDigestAck2Serializer");
        expectedClassNames.add("GossipDigestAckSerializer");
        expectedClassNames.add("GossipDigestSynSerializer");
        expectedClassNames.add("HeartBeatStateSerializer");
        expectedClassNames.add("VersionedValueSerializer");
        expectedClassNames.add("PendingFileSerializer");
        expectedClassNames.add("StreamHeaderSerializer");
        expectedClassNames.add("FileStatusSerializer");
        expectedClassNames.add("StreamRequestSerializer");
        expectedClassNames.add("CounterMutationSerializer");
        expectedClassNames.add("HashableSerializer");
        expectedClassNames.add("StreamingRepairTaskSerializer");
        expectedClassNames.add("AbstractBoundsSerializer");
        expectedClassNames.add("SnapshotCommandSerializer");
        expectedClassNames.add("RangeSliceReplySerializer");
        expectedClassNames.add("StringSerializer");
        expectedClassNames.add("GossipShutdownMessageSerializer");
        expectedClassNames.add("CallbackDeterminedSerializer");
        expectedClassNames.add("TreeRequestSerializer");
        expectedClassNames.add("ValidatorSerializer");
        expectedClassNames.add("MigrationsSerializer");
        expectedClassNames.add("InnerSerializer");
        expectedClassNames.add("LeafSerializer");
        expectedClassNames.add("MerkleTreeSerializer");
        expectedClassNames.add("UUIDSerializer");

        discoveredClassNames = new ArrayList<String>();
        String cp = System.getProperty("java.class.path");
        assert cp != null;
        String[] parts = cp.split(File.pathSeparator, -1);
        class DirScanner
        {
            void scan(File f, String ctx)
            {
                String newCtx = ctx == null ? f.getName().equals("org") ? f.getName() : null : ctx + "." + f.getName();
                if (f.isDirectory())
                {
                    for (File child : f.listFiles())
                    {
                        scan(child, newCtx);
                    }
                }
                else if (f.getName().endsWith(".class"))
                {
                    String fName = f.getName();
                    String className = ctx + "." + fName.substring(0, fName.lastIndexOf('.'));
                    try
                    {
                        Class cls = Class.forName(className);
                        String simpleName = cls.getSimpleName();
                        classTraversal: while (cls != null)
                        {
                            Type[] interfaces = cls.getGenericInterfaces();
                            for (Type t : interfaces)
                            {
                                if(t instanceof ParameterizedType)
                                {
                                    ParameterizedType pt = (ParameterizedType)t;
                                    if (((Class)pt.getRawType()).getSimpleName().equals("IVersionedSerializer"))
                                    {
                                        discoveredClassNames.add(simpleName);
                                        break classTraversal;
                                    }
                                }
                            }
                            cls = cls.getSuperclass();
                        }
                    }
                    catch (ClassNotFoundException ex)
                    {
                        throw new RuntimeException(ex);
                    }
                }
            }
        }

        DirScanner dirScanner = new DirScanner();
        for (String cpItem : parts)
        {
            File f = new File(cpItem);
            if (f.exists() && f.isDirectory())
                dirScanner.scan(f, null);
        }
    }

