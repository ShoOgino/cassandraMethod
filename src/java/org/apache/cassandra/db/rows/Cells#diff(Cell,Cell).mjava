    /**
     * Computes the difference between a cell and the result of merging this
     * cell to other cells.
     * <p>
     * This method is used when cells from multiple sources are merged and we want to
     * find for a given source if it was up to date for that cell, and if not, what
     * should be sent to the source to repair it.
     *
     * @param merged the cell that is the result of merging multiple source.
     * @param cell the cell from one of the source that has been merged to yied
     * {@code merged}.
     * @return {@code null} if the source having {@code cell} is up-to-date for that
     * cell, or a cell that applied to the source will "repair" said source otherwise.
     */
    public static Cell diff(Cell merged, Cell cell)
    {
        // Note that it's enough to check if merged is a counterCell. If it isn't and
        // cell is one, it means that merged is a tombstone with a greater timestamp
        // than cell, because that's the only case where reconciling a counter with
        // a tombstone don't yield a counter. If that's the case, the normal path will
        // return what it should.
        if (merged.isCounterCell())
        {
            if (merged.livenessInfo().supersedes(cell.livenessInfo()))
                return merged;

            // Reconciliation never returns something with a timestamp strictly lower than its operand. This
            // means we're in the case where merged.timestamp() == cell.timestamp(). As 1) tombstones
            // always win over counters (CASSANDRA-7346) and 2) merged is a counter, it follows that cell
            // can't be a tombstone or merged would be one too.
            assert !cell.isTombstone();

            CounterContext.Relationship rel = CounterContext.instance().diff(merged.value(), cell.value());
            return (rel == CounterContext.Relationship.GREATER_THAN || rel == CounterContext.Relationship.DISJOINT) ? merged : null;
        }
        return merged.livenessInfo().supersedes(cell.livenessInfo()) ? merged : null;
    }

