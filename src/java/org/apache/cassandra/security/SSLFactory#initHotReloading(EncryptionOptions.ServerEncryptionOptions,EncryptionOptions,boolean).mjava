    /**
     * Determines whether to hot reload certificates and schedules a periodic task for it.
     *
     * @param serverEncryptionOptions
     * @param clientEncryptionOptions
     */
    public static synchronized void initHotReloading(EncryptionOptions.ServerEncryptionOptions serverEncryptionOptions,
                                                     EncryptionOptions clientEncryptionOptions,
                                                     boolean force)
    {
        if (isHotReloadingInitialized && !force)
            return;

        logger.debug("Initializing hot reloading SSLContext");

        List<HotReloadableFile> fileList = new ArrayList<>();

        if (serverEncryptionOptions.enabled)
        {
            fileList.add(new HotReloadableFile(serverEncryptionOptions.keystore));
            fileList.add(new HotReloadableFile(serverEncryptionOptions.truststore));
        }

        if (clientEncryptionOptions.enabled)
        {
            fileList.add(new HotReloadableFile(clientEncryptionOptions.keystore));
            fileList.add(new HotReloadableFile(clientEncryptionOptions.truststore));
        }

        hotReloadableFiles = ImmutableList.copyOf(fileList);

        if (!isHotReloadingInitialized)
        {
            ScheduledExecutors.scheduledTasks.scheduleWithFixedDelay(SSLFactory::checkCertFilesForHotReloading,
                                                                     DEFAULT_HOT_RELOAD_INITIAL_DELAY_SEC,
                                                                     DEFAULT_HOT_RELOAD_PERIOD_SEC, TimeUnit.SECONDS);
        }

        isHotReloadingInitialized = true;
    }

