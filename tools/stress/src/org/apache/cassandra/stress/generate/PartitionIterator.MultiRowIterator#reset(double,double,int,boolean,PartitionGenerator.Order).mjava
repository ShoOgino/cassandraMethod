        /**
         * initialise the iterator state
         *
         * if we're a write, the expected behaviour is that the requested
         * batch count is compounded with the seed's visit count to decide
         * how much we should return in one iteration
         *
         * @param useChance uniform chance of visiting any single row (NaN if targetCount provided)
         * @param targetCount number of rows we would like to visit (0 if useChance provided)
         * @param isWrite true if the action requires write semantics
         *
         * @return true if there is data to return, false otherwise
         */
        boolean reset(double useChance, double rowPopulationRatio, int targetCount, boolean isWrite, PartitionGenerator.Order order)
        {
            this.isWrite = isWrite;
            this.rowPopulationRatio = rowPopulationRatio;

            this.order = order;
            // set the seed for the first clustering component
            generator.clusteringComponents.get(0).setSeed(idseed);

            // calculate how many first clustering components we'll generate, and how many total rows this predicts
            int firstComponentCount = (int) generator.clusteringComponents.get(0).clusteringDistribution.next();
            int expectedRowCount;

            int position = seed.position();

            if (isWrite)
                expectedRowCount = firstComponentCount * generator.clusteringDescendantAverages[0];
            else if (position != 0)
                expectedRowCount = setLastRow(position - 1);
            else
                expectedRowCount = setNoLastRow(firstComponentCount);

            if (Double.isNaN(useChance))
                useChance = Math.max(0d, Math.min(1d, targetCount / (double) expectedRowCount));
            setUseChance(useChance);

            while (true)
            {
                // we loop in case we have picked an entirely non-existent range, in which case
                // we will reset the seed's position, then try again (until we exhaust it or find
                // some real range)

                for (Queue<?> q : clusteringComponents)
                    q.clear();
                fill(0);

                if (!isWrite)
                {
                    if (seek(0) != State.SUCCESS)
                        throw new IllegalStateException();
                    return true;
                }

                int count = seed.visits == 1 ? 1 + (int) generator.maxRowCount : Math.max(1, expectedRowCount / seed.visits);
                position = seed.moveForwards(count);
                isFirstWrite = position == 0;
                setLastRow(position + count - 1);

                // seek to our start position
                switch (seek(position))
                {
                    case END_OF_PARTITION:
                        return false;
                    case SUCCESS:
                        return true;
                }
            }
        }

