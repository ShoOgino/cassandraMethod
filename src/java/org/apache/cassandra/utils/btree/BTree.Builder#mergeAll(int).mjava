        // iter must be in sorted order!
        private Builder<V> mergeAll(int addCount)
        {
            // start optimistically by assuming new values are superset of current, and just run until this fails to hold
            Object[] a = values;
            int addOffset = count;

            int i = 0, j = addOffset;
            int curEnd = addOffset, addEnd = addOffset + addCount;
            while (i < curEnd && j < addEnd)
            {
                int c = comparator.compare((V) a[i], (V) a[j]);
                if (c > 0)
                    break;
                else if (c == 0)
                    j++;
                i++;
            }

            if (j == addEnd)
                return this; // already a superset of the new values

            // otherwise, copy the remaining existing values to the very end, freeing up space for merge result
            int newCount = i;
            System.arraycopy(a, i, a, addEnd, count - i);
            curEnd = addEnd + (count - i);
            i = addEnd;

            while (i < curEnd && j < addEnd)
            {
                // could avoid one comparison if we cared, but would make this ugly
                int c = comparator.compare((V) a[i], (V) a[j]);
                if (c == 0)
                {
                    a[newCount++] = a[i];
                    i++;
                    j++;
                }
                else
                {
                    a[newCount++] =  c < 0 ? a[i++] : a[j++];
                }
            }

            // exhausted one of the inputs; fill in remainder of the other
            if (i < curEnd)
            {
                System.arraycopy(a, i, a, newCount, curEnd - i);
                newCount += curEnd - i;
            }
            else if (j < addEnd)
            {
                if (j != newCount)
                    System.arraycopy(a, j, a, newCount, addEnd - j);
                newCount += addEnd - j;
            }
            count = newCount;
            return this;
        }

