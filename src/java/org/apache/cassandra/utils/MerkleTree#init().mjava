    /**
     * Initializes this tree by splitting it into maxsize ranges, or
     * until hashdepth is reached.
     *
     * TODO: could be optimized as breadth first generation of nodes.
     *
     * NB: asserts that the tree is of size 1.
     */
    public void init()
    {
        assert size() == 1;

        Queue<Range> ranges = new ArrayDeque<Range>();
        ranges.add(new Range(partitioner.getMinimumToken(),
                             partitioner.getMinimumToken()));
        while (true)
        {
            Range range = ranges.remove();
            Token mid = partitioner.midpoint(range.left(),
                                                   range.right());
            if (!split(mid))
                // we've reached maxsize or hashdepth
                return;

            ranges.add(new Range(range.left(), mid));
            ranges.add(new Range(mid, range.right()));
        }
    }

