    @Test
    public void testTimeSort() throws IOException
    {
        Keyspace keyspace = Keyspace.open("Keyspace1");
        ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore("StandardLong1");

        for (int i = 900; i < 1000; ++i)
        {
            Mutation rm = new Mutation("Keyspace1", ByteBufferUtil.bytes(Integer.toString(i)));
            for (int j = 0; j < 8; ++j)
            {
                rm.add("StandardLong1", cellname(j * 2), ByteBufferUtil.bytes("a"), j * 2);
            }
            rm.apply();
        }

        validateTimeSort(keyspace);

        cfStore.forceBlockingFlush();
        validateTimeSort(keyspace);

        // interleave some new data to test memtable + sstable
        DecoratedKey key = Util.dk("900");
        Mutation rm = new Mutation("Keyspace1", key.key);
        for (int j = 0; j < 4; ++j)
        {
            rm.add("StandardLong1", cellname(j * 2 + 1), ByteBufferUtil.bytes("b"), j * 2 + 1);
        }
        rm.apply();
        // and some overwrites
        rm = new Mutation("Keyspace1", key.key);
        rm.add("StandardLong1", cellname(0), ByteBufferUtil.bytes("c"), 100);
        rm.add("StandardLong1", cellname(10), ByteBufferUtil.bytes("c"), 100);
        rm.apply();

        // verify
        ColumnFamily cf = cfStore.getColumnFamily(key, cellname(0), Composites.EMPTY, false, 1000, System.currentTimeMillis());
        Collection<Cell> cells = cf.getSortedColumns();
        assertEquals(12, cells.size());
        Iterator<Cell> iter = cells.iterator();
        Cell cell;
        for (int j = 0; j < 8; j++)
        {
            cell = iter.next();
            assert cell.name().toByteBuffer().equals(getBytes(j));
        }
        TreeSet<CellName> columnNames = new TreeSet<CellName>(cfStore.getComparator());
        columnNames.add(cellname(10));
        columnNames.add(cellname(0));
        cf = cfStore.getColumnFamily(QueryFilter.getNamesFilter(Util.dk("900"), "StandardLong1", columnNames, System.currentTimeMillis()));
        assert "c".equals(ByteBufferUtil.string(cf.getColumn(cellname(0)).value()));
        assert "c".equals(ByteBufferUtil.string(cf.getColumn(cellname(10)).value()));
    }

