    /**
     * Collects data in order of recency, using the sstable maxtimestamp data.
     * Once we have data for all requests columns that is newer than the newest remaining maxtimestamp,
     * we stop.
     */
    private ColumnFamily collectTimeOrderedData()
    {
        logger.debug("collectTimeOrderedData");

        List<IColumnIterator> iterators;
        ColumnFamily container;
        while (true)
        {
            DataTracker.View dataview = cfs.getDataTracker().getView();
            iterators = new ArrayList<IColumnIterator>();
            container = ColumnFamily.create(cfs.metadata, factory, filter.filter.isReversed());
            List<SSTableReader> sstables;
            for (Memtable memtable : Iterables.concat(dataview.memtablesPendingFlush, Collections.singleton(dataview.memtable)))
            {
                IColumnIterator iter = filter.getMemtableColumnIterator(memtable, cfs.metadata.comparator);
                if (iter != null)
                {
                    iterators.add(iter);
                    container.delete(iter.getColumnFamily());
                    while (iter.hasNext())
                        container.addColumn(iter.next());
                }
            }

            // avoid changing the filter columns of the original filter
            // (reduceNameFilter removes columns that are known to be irrelevant)
            TreeSet<ByteBuffer> filterColumns = new TreeSet<ByteBuffer>(cfs.metadata.comparator);
            filterColumns.addAll(((NamesQueryFilter) filter.filter).columns);
            QueryFilter reducedFilter = new QueryFilter(filter.key, filter.path, new NamesQueryFilter(filterColumns));

            /* add the SSTables on disk */
            sstables = dataview.intervalTree.search(new Interval(filter.key, filter.key));
            Collections.sort(sstables, SSTable.maxTimestampComparator);
            if (!SSTableReader.acquireReferences(sstables))
                continue; // retry w/ new view

            try
            {
                // read sorted sstables
                for (SSTableReader sstable : sstables)
                {
                    long currentMaxTs = sstable.getMaxTimestamp();
                    reduceNameFilter(reducedFilter, container, currentMaxTs);
                    if (((NamesQueryFilter) reducedFilter.filter).columns.isEmpty())
                        break;

                    IColumnIterator iter = reducedFilter.getSSTableColumnIterator(sstable);
                    iterators.add(iter);
                    if (iter.getColumnFamily() != null)
                    {
                        container.delete(iter.getColumnFamily());
                        sstablesIterated++;
                        while (iter.hasNext())
                            container.addColumn(iter.next());
                    }
                }
            }
            finally
            {
                SSTableReader.releaseReferences(sstables);
                for (IColumnIterator iter : iterators)
                    FileUtils.closeQuietly(iter);
            }

            break; // sstable reference acquisition was successful
        }


        // we need to distinguish between "there is no data at all for this row" (BF will let us rebuild that efficiently)
        // and "there used to be data, but it's gone now" (we should cache the empty CF so we don't need to rebuild that slower)
        if (iterators.isEmpty())
            return null;

        // do a final collate.  toCollate is boilerplate required to provide a CloseableIterator
        final ColumnFamily c2 = container;
        CloseableIterator<IColumn> toCollate = new SimpleAbstractColumnIterator()
        {
            final Iterator<IColumn> iter = c2.iterator();

            protected IColumn computeNext()
            {
                return iter.hasNext() ? iter.next() : endOfData();
            }

            public ColumnFamily getColumnFamily()
            {
                return c2;
            }

            public DecoratedKey getKey()
            {
                return filter.key;
            }
        };
        ColumnFamily returnCF = container.cloneMeShallow();
        filter.collateColumns(returnCF, Collections.singletonList(toCollate), cfs.metadata.comparator, gcBefore);

        // Caller is responsible for final removeDeletedCF.  This is important for cacheRow to work correctly:
        return returnCF;
    }

