  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.column = new Column();
            this.column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.super_column = new SuperColumn();
            this.super_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNTER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.counter_column = new CounterColumn();
            this.counter_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNTER_SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.counter_super_column = new CounterSuperColumn();
            this.counter_super_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

