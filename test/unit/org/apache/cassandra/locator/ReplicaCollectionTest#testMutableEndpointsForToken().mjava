    @Test
    public void testMutableEndpointsForToken()
    {
        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);
        EndpointsForToken.Builder test = new EndpointsForToken.Builder(tk(1), canonical1.size());
        test.addAll(canonical1, Conflict.NONE);
        try
        {   // incorrect range
            test.addAll(canonical1, Conflict.NONE);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        test.addAll(canonical1, Conflict.DUPLICATE); // we ignore exact duplicates
        try
        {   // incorrect range
            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        try
        {   // conflict on isFull/isTransient
            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);
            Assert.fail();
        } catch (IllegalArgumentException e) { }
        test.add(transientReplica(EP1, R1), Conflict.ALL);

        new EndpointsTestCase<>(true, test, canonical1).testAll();

        EndpointsForToken snapshot = test.subList(0, test.size());

        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;
        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);
        new EndpointsTestCase<>(false, snapshot, canonical1).testAll();
        new EndpointsTestCase<>(true, test, canonical2).testAll();
    }

