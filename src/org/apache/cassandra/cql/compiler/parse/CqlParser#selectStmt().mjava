    // $ANTLR start selectStmt
    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:132:1: selectStmt : selectClause ( fromClause )? ( whereClause )? ( limitClause )? -> ^( A_SELECT selectClause ( fromClause )? ( whereClause )? ( limitClause )? ) ;
    public final selectStmt_return selectStmt() throws RecognitionException {
        selectStmt_return retval = new selectStmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        selectClause_return selectClause19 = null;

        fromClause_return fromClause20 = null;

        whereClause_return whereClause21 = null;

        limitClause_return limitClause22 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:133:5: ( selectClause ( fromClause )? ( whereClause )? ( limitClause )? -> ^( A_SELECT selectClause ( fromClause )? ( whereClause )? ( limitClause )? ) )
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:133:7: selectClause ( fromClause )? ( whereClause )? ( limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStmt419);
            selectClause19=selectClause();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_selectClause.add(selectClause19.getTree());
            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:134:9: ( fromClause )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==K_FROM) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:0:0: fromClause
                    {
                    pushFollow(FOLLOW_fromClause_in_selectStmt429);
                    fromClause20=fromClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_fromClause.add(fromClause20.getTree());

                    }
                    break;

            }

            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:135:9: ( whereClause )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==K_WHERE) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:0:0: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStmt440);
                    whereClause21=whereClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_whereClause.add(whereClause21.getTree());

                    }
                    break;

            }

            // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:136:9: ( limitClause )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==K_LIMIT) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:0:0: limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStmt451);
                    limitClause22=limitClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_limitClause.add(limitClause22.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: selectClause, fromClause, limitClause, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 136:22: -> ^( A_SELECT selectClause ( fromClause )? ( whereClause )? ( limitClause )? )
            {
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:136:25: ^( A_SELECT selectClause ( fromClause )? ( whereClause )? ( limitClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(A_SELECT, "A_SELECT"), root_1);

                adaptor.addChild(root_1, stream_selectClause.next());
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:136:49: ( fromClause )?
                if ( stream_fromClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_fromClause.next());

                }
                stream_fromClause.reset();
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:136:61: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // /home/kannan/fbomb/trunk/fbcode/cassandra/src/com/facebook/infrastructure/cql/compiler/parse/Cql.g:136:74: ( limitClause )?
                if ( stream_limitClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_limitClause.next());

                }
                stream_limitClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectStmt

