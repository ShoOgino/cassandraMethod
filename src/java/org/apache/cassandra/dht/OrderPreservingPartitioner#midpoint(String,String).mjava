    /**
     * @return A new String array that will compare
     * approximately halfway between the parameters.
     */
    private static String midpoint(String left, String right)
    {
        int inlength;
        char[] lchars;
        char[] rchars;
        int comparison = left.compareTo(right);
        if (comparison < 0)
        {
            inlength = Math.max(left.length(), right.length());
            lchars = getChars(left, inlength);
            rchars = getChars(right, inlength);
        }
        else
        {
            // wrapping range must involve the minimum token
            assert MINIMUM.token.equals(right);
            
            inlength = Math.max(left.length(), 1);
            lchars = getChars(left, inlength);
            rchars = new char[inlength];
            Arrays.fill(rchars, (char)0xFFFF);
        }


        // if the lsbits of the two inputs are not equal we have to extend
        // the result array to make room for a carried bit during the right shift
        int outlength = (((int)lchars[inlength-1] & 0x0001) == ((int)rchars[inlength-1] & 0x0001))
                        ? inlength
                        : inlength+1;
        char[] result = new char[outlength];
        boolean carrying = false;

        // perform the addition
        for (int i = inlength-1; i >= 0; i--)
        {
            // initialize the lsbit if we're carrying
            int sum = carrying ? 0x0001 : 0x0000;

            // remove the sign bit, and sum left and right
            sum += (lchars[i] & 0xFFFF) + (rchars[i] & 0xFFFF);
            
            // see if we'll need to carry
            carrying = sum > 0xFFFF;

            // set to the sum (truncating the msbit)
            result[i] = (char)sum;
        }
        // the carried bit from addition will be shifted in as the msbit

        // perform the division (as a right shift)
        for (int i = 0; i < inlength; i++)
        {
            // initialize the msbit if we're carrying
            char shifted = (char)(carrying ? 0x8000 : 0x0000);

            // check the lsbit to see if we'll need to continue carrying
            carrying = (result[i] & 0x0001) == 0x0001;

            // OR the right shifted value into the result char
            result[i] = (char)(shifted | ((result[i] & 0xFFFF) >>> 1));
        }

        if (carrying)
            // the last char in the result array
            result[inlength] |= 0x8000;
        return new String(result);
    }

