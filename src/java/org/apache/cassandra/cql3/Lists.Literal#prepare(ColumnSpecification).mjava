        public Value prepare(ColumnSpecification receiver) throws InvalidRequestException
        {
            validateAssignableTo(receiver);

            ColumnSpecification valueSpec = Lists.valueSpecOf(receiver);
            List<ByteBuffer> values = new ArrayList<ByteBuffer>(elements.size());
            for (Term.Raw rt : elements)
            {
                Term t = rt.prepare(valueSpec);

                if (!(t instanceof Constants.Value))
                {
                    if (t instanceof Term.NonTerminal)
                        throw new InvalidRequestException(String.format("Invalid list literal for %s: bind variables are not supported inside collection literals", receiver));
                    else
                        throw new InvalidRequestException(String.format("Invalid list literal for %s: nested collections are not supported", receiver));
                }

                // We don't allow prepared marker in collections, nor nested collections
                assert t instanceof Constants.Value;
                ByteBuffer bytes = ((Constants.Value)t).bytes;
                if (bytes == null)
                    throw new InvalidRequestException("null is not supported inside collections");

                // We don't support value > 64K because the serialization format encode the length as an unsigned short.
                if (bytes.remaining() > FBUtilities.MAX_UNSIGNED_SHORT)
                    throw new InvalidRequestException(String.format("List value is too long. List values are limited to %d bytes but %d bytes value provided",
                                                                    FBUtilities.MAX_UNSIGNED_SHORT,
                                                                    bytes.remaining()));

                values.add(bytes);
            }
            return new Value(values);
        }

