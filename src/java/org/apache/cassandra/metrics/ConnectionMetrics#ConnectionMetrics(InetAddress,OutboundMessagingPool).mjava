    /**
     * Create metrics for given connection pool.
     *
     * @param ip IP address to use for metrics label
     */
    public ConnectionMetrics(InetAddress ip, final OutboundMessagingPool messagingPool)
    {
        // ipv6 addresses will contain colons, which are invalid in a JMX ObjectName
        address = ip.getHostAddress().replace(':', '.');

        factory = new DefaultNameFactory("Connection", address);

        largeMessagePendingTasks = Metrics.register(factory.createMetricName("LargeMessagePendingTasks"), new Gauge<Integer>()
        {
            public Integer getValue()
            {
                return messagingPool.largeMessageChannel.getPendingMessages();
            }
        });
        largeMessageCompletedTasks = Metrics.register(factory.createMetricName("LargeMessageCompletedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.largeMessageChannel.getCompletedMessages();
            }
        });
        largeMessageDroppedTasks = Metrics.register(factory.createMetricName("LargeMessageDroppedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.largeMessageChannel.getDroppedMessages();
            }
        });
        smallMessagePendingTasks = Metrics.register(factory.createMetricName("SmallMessagePendingTasks"), new Gauge<Integer>()
        {
            public Integer getValue()
            {
                return messagingPool.smallMessageChannel.getPendingMessages();
            }
        });
        smallMessageCompletedTasks = Metrics.register(factory.createMetricName("SmallMessageCompletedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.smallMessageChannel.getCompletedMessages();
            }
        });
        smallMessageDroppedTasks = Metrics.register(factory.createMetricName("SmallMessageDroppedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.smallMessageChannel.getDroppedMessages();
            }
        });
        gossipMessagePendingTasks = Metrics.register(factory.createMetricName("GossipMessagePendingTasks"), new Gauge<Integer>()
        {
            public Integer getValue()
            {
                return messagingPool.gossipChannel.getPendingMessages();
            }
        });
        gossipMessageCompletedTasks = Metrics.register(factory.createMetricName("GossipMessageCompletedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.gossipChannel.getCompletedMessages();
            }
        });
        gossipMessageDroppedTasks = Metrics.register(factory.createMetricName("GossipMessageDroppedTasks"), new Gauge<Long>()
        {
            public Long getValue()
            {
                return messagingPool.gossipChannel.getDroppedMessages();
            }
        });
        timeouts = Metrics.meter(factory.createMetricName("Timeouts"));
    }

