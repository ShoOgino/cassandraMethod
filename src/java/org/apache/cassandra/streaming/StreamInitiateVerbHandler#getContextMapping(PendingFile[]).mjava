    /**
     * Translates remote files to local files by creating a local sstable
     * per remote sstable.
     */
    public LinkedHashMap<PendingFile, PendingFile> getContextMapping(PendingFile[] remoteFiles) throws IOException
    {
        /* Create a local sstable for each remote sstable */
        LinkedHashMap<PendingFile, PendingFile> mapping = new LinkedHashMap<PendingFile, PendingFile>();
        Map<Descriptor, Descriptor> sstables = new HashMap<Descriptor, Descriptor>();
        for (PendingFile remote : remoteFiles)
        {
            Descriptor remotedesc = remote.getDescriptor();
            Descriptor localdesc = sstables.get(remotedesc);
            if (localdesc == null)
            {
                // new local sstable
                Table table = Table.open(remotedesc.ksname);
                ColumnFamilyStore cfStore = table.getColumnFamilyStore(remotedesc.cfname);

                localdesc = Descriptor.fromFilename(cfStore.getFlushPath());
                sstables.put(remotedesc, localdesc);
            }

            // add a local file for this component
            mapping.put(remote, new PendingFile(localdesc, remote.getComponent(), remote.getExpectedBytes()));
        }

        return mapping;
    }

