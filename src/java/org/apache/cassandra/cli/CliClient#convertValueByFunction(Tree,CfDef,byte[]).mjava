    /**
     * Used to convert value (function argument, string) into byte[]
     * @param functionCall - tree representing function call ^(FUNCTION_CALL function_name value)
     * @param columnFamily - column family definition (CfDef)
     * @param columnName   - column name as byte[] (used to update CfDef)
     * @return byte[] - string value as byte[]
     */
    private byte[] convertValueByFunction(Tree functionCall, CfDef columnFamily, byte[] columnName)
    {
        String functionName = functionCall.getChild(0).getText();
        String functionArg  = CliUtils.unescapeSQLString(functionCall.getChild(1).getText());
        Function function;

        try
        {
            function = Function.valueOf(functionName.toUpperCase());
        }
        catch (IllegalArgumentException e)
        {
            StringBuilder errorMessage = new StringBuilder("Function '" + functionName + "' not found. ");
            errorMessage.append("Available functions: ");
            throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());  
        }

        try
        {
            AbstractType validator = function.getValidator();
            byte[] value = getBytesAccordingToType(functionArg, validator);

            // updating CfDef
            updateColumnMetaData(columnFamily, columnName, validator.getClass().getName());

            return value;
        }
        catch (InvalidRequestException e)
        {
            throw new RuntimeException(e.getWhy());
        }
        catch (TException e)
        {
            throw new RuntimeException(e);
        }
        catch (Exception e)
        {
            throw new RuntimeException(e.getMessage());
        }
    }

