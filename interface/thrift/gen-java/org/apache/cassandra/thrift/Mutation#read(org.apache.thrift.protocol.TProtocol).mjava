  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN_OR_SUPERCOLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.column_or_supercolumn = new ColumnOrSuperColumn();
            this.column_or_supercolumn.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DELETION
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.deletion = new Deletion();
            this.deletion.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNTER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.counter = new Counter();
            this.counter.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

