    /**
     * If the provided throwable is a "wrapping" exception (see below), return the cause of that throwable, otherwise
     * return its argument untouched.
     * <p>
     * We call a "wrapping" exception in the context of that method an exception whose only purpose is to wrap another
     * exception, and currently this method recognize only 2 exception as "wrapping" ones: {@link ExecutionException}
     * and {@link CompletionException}.
     */
    public static Throwable unwrapped(Throwable t)
    {
        Throwable unwrapped = t;
        while (unwrapped instanceof CompletionException ||
               unwrapped instanceof ExecutionException ||
               unwrapped instanceof InvocationTargetException)
            unwrapped = unwrapped.getCause();

        // I don't think it make sense for those 2 exception classes to ever be used with null causes, but no point
        // in failing here if this happen. We still wrap the original exception if that happen so we get a sign
        // that the assumption of this method is wrong.
        return unwrapped == null
               ? new RuntimeException("Got wrapping exception not wrapping anything", t)
               : unwrapped;
    }

